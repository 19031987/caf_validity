{"version":3,"sources":["app/app.module.js","app/services/user/user.service.js","app/services/profiles/profile.service.js","app/services/profiles/page-ribbon.directive.js","app/services/auth/register.service.js","app/services/auth/principal.service.js","app/services/auth/password-reset-init.service.js","app/services/auth/password-reset-finish.service.js","app/services/auth/password.service.js","app/services/auth/has-authority.directive.js","app/services/auth/has-any-authority.directive.js","app/services/auth/auth.service.js","app/services/auth/auth.jwt.service.js","app/services/auth/activate.service.js","app/services/auth/account.service.js","app/layouts/navbar/navbar.controller.js","app/layouts/error/error.state.js","app/home/home.state.js","app/home/home.controller.js","app/entities/system/system-dialog.controller.js","app/entities/system/system-detail.controller.js","app/entities/system/system-delete-dialog.controller.js","app/entities/system/system.state.js","app/entities/system/system.service.js","app/entities/system/system.search.service.js","app/entities/system/system.controller.js","app/entities/suspendedusers/suspendedusers-dialog.controller.js","app/entities/suspendedusers/suspendedusers-detail.controller.js","app/entities/suspendedusers/suspendedusers-delete-dialog.controller.js","app/entities/suspendedusers/suspendedusers.state.js","app/entities/suspendedusers/suspendedusers.service.js","app/entities/suspendedusers/suspendedusers.search.service.js","app/entities/suspendedusers/suspendedusers.controller.js","app/entities/sourcebox/sourcebox-dialog.controller.js","app/entities/sourcebox/sourcebox-detail.controller.js","app/entities/sourcebox/sourcebox-delete-dialog.controller.js","app/entities/sourcebox/sourcebox.state.js","app/entities/sourcebox/sourcebox.service.js","app/entities/sourcebox/sourcebox.search.service.js","app/entities/sourcebox/sourcebox.controller.js","app/entities/scancaf/scancaf-dialog.controller.js","app/entities/scancaf/scancaf-detail.controller.js","app/entities/scancaf/scancaf-delete-dialog.controller.js","app/entities/scancaf/scancaf.state.js","app/entities/scancaf/scancaf.service.js","app/entities/scancaf/scancaf.search.service.js","app/entities/scancaf/scancaf.controller.js","app/entities/mobile-validation/mobile-validation-dialog.controller.js","app/entities/mobile-validation/mobile-validation-detail.controller.js","app/entities/mobile-validation/mobile-validation-delete-dialog.controller.js","app/entities/mobile-validation/mobile-validation.state.js","app/entities/mobile-validation/mobile-validation.service.js","app/entities/mobile-validation/mobile-validation.search.service.js","app/entities/mobile-validation/mobile-validation.controller.js","app/entities/entity.state.js","app/entities/boxassign/boxassign-dialog.controller.js","app/entities/boxassign/boxassign-detail.controller.js","app/entities/boxassign/boxassign-delete-dialog.controller.js","app/entities/boxassign/boxassign.state.js","app/entities/boxassign/boxassign.service.js","app/entities/boxassign/boxassign.search.service.js","app/entities/boxassign/boxassign.controller.js","app/entities/adminstats/adminstats-dialog.controller.js","app/entities/adminstats/adminstats-detail.controller.js","app/entities/adminstats/adminstats-delete-dialog.controller.js","app/entities/adminstats/adminstats.state.js","app/entities/adminstats/adminstats.service.js","app/entities/adminstats/adminstats.search.service.js","app/entities/adminstats/adminstats.controller.js","app/components/util/truncate-words.filter.js","app/components/util/truncate-characters.filter.js","app/components/util/sort-by.directive.js","app/components/util/sort.directive.js","app/components/util/parse-links.service.js","app/components/util/pagination-util.service.js","app/components/util/jhi-item-count.directive.js","app/components/util/date-util.service.js","app/components/util/data-util.service.js","app/components/util/capitalize.filter.js","app/components/util/base64.service.js","app/components/login/login.service.js","app/components/login/login.controller.js","app/components/form/show-validation.directive.js","app/components/form/pagination.constants.js","app/components/form/minbytes.directive.js","app/components/form/maxbytes.directive.js","app/components/alert/alert-error.directive.js","app/components/alert/alert.service.js","app/components/alert/alert.directive.js","app/blocks/interceptor/notification.interceptor.js","app/blocks/interceptor/errorhandler.interceptor.js","app/blocks/interceptor/auth-expired.interceptor.js","app/blocks/interceptor/auth.interceptor.js","app/blocks/handlers/state.handler.js","app/blocks/config/uib-pagination.config.js","app/blocks/config/uib-pager.config.js","app/blocks/config/localstorage.config.js","app/blocks/config/http.config.js","app/blocks/config/compile.config.js","app/blocks/config/alert.config.js","app/app.state.js","app/app.constants.js","app/admin/user-management/user-management-dialog.controller.js","app/admin/user-management/user-management-detail.controller.js","app/admin/user-management/user-management-delete-dialog.controller.js","app/admin/user-management/user-management.state.js","app/admin/user-management/user-management.controller.js","app/admin/metrics/metrics.state.js","app/admin/metrics/metrics.service.js","app/admin/metrics/metrics.modal.controller.js","app/admin/metrics/metrics.controller.js","app/admin/logs/logs.state.js","app/admin/logs/logs.service.js","app/admin/logs/logs.controller.js","app/admin/health/health.state.js","app/admin/health/health.service.js","app/admin/health/health.modal.controller.js","app/admin/health/health.controller.js","app/admin/elasticsearch-reindex/elasticsearch-reindex-dialog.controller.js","app/admin/elasticsearch-reindex/elasticsearch-reindex.state.js","app/admin/elasticsearch-reindex/elasticsearch-reindex.service.js","app/admin/elasticsearch-reindex/elasticsearch-reindex.controller.js","app/admin/docs/docs.state.js","app/admin/configuration/configuration.state.js","app/admin/configuration/configuration.service.js","app/admin/configuration/configuration.controller.js","app/admin/audits/audits.state.js","app/admin/audits/audits.service.js","app/admin/audits/audits.controller.js","app/admin/admin.state.js","app/account/settings/settings.state.js","app/account/settings/settings.controller.js","app/account/reset/request/reset.request.state.js","app/account/reset/request/reset.request.controller.js","app/account/reset/finish/reset.finish.state.js","app/account/reset/finish/reset.finish.controller.js","app/account/register/register.state.js","app/account/register/register.controller.js","app/account/password/password-strength-bar.directive.js","app/account/password/password.state.js","app/account/password/password.controller.js","app/account/activate/activate.state.js","app/account/activate/activate.controller.js","app/account/account.state.js","app/app.js"],"names":["run","stateHandler","initialize","angular","module","$inject","User","$resource","service","query","method","isArray","get","transformResponse","data","fromJson","save","update","delete","factory","ProfileService","$http","getProfileInfo","isUndefined","dataPromise","then","result","activeProfiles","response","ribbonEnv","inProduction","indexOf","swaggerEnabled","pageRibbon","$rootScope","linkFunc","scope","element","attrs","addClass","removeClass","directive","replace","restrict","template","link","Register","Principal","$q","Account","authenticate","identity","_identity","_authenticated","hasAnyAuthority","authorities","i","length","hasAuthority","authority","this","_id","when","force","getAccountThen","account","deferred","resolve","getAccountCatch","defer","undefined","isDefined","promise","$promise","catch","isAuthenticated","isIdentityResolved","PasswordResetInit","PasswordResetFinish","Password","setVisible","setHidden","defineVisibility","reset","$watch","split","Auth","$state","$sessionStorage","AuthServerProvider","LoginService","Activate","activateAccount","key","callback","cb","noop","err","bind","authorize","authThen","toState","parent","name","go","fromState","getPreviousState","previousState","resetPreviousState","params","storePreviousState","toStateParams","open","authReturn","changePassword","newPassword","createAccount","logout","login","credentials","loginThen","reject","loginWithToken","jwt","rememberMe","resetPasswordFinish","keyAndPassword","resetPasswordInit","mail","updateAccount","previousStateName","previousStateParams","$localStorage","getToken","authenticationToken","authenticateSuccess","status","headers","bearerToken","slice","storeAuthenticationToken","username","password","post","success","interceptor","NavbarController","collapseNavbar","toggleNavbar","vm","isNavbarCollapsed","controller","stateConfig","$stateProvider","state","url","pageTitle","views","content@","templateUrl","config","controllerAs","HomeController","$scope","getAccount","register","$on","SystemDialogController","$timeout","$stateParams","$uibModalInstance","entity","System","clear","dismiss","isSaving","system","id","onSaveSuccess","onSaveError","$emit","close","openCalendar","date","datePickerOpenStatus","focus","userdate","SystemDetailController","unsubscribe","event","SystemDeleteController","confirmDelete","currentStateData","current","href","onEnter","$uibModal","backdrop","size","reload","systemname","user","DateUtils","resourceUrl","convertLocalDateFromServer","transformRequest","copy","convertLocalDateToServer","toJson","SystemSearch","SystemController","loadAll","systems","searchQuery","search","currentSearch","SuspendedusersDialogController","Suspendedusers","suspendedusers","count","alert","scancaf","centralbarcode","increment_alphanumeric_str","category1","substring","SuspendedusersDetailController","SuspendedusersDeleteController","page","value","squash","sort","pagingParams","PaginationUtil","parsePage","predicate","parsePredicate","ascending","parseAscending","mobilenumber","convertDateTimeFromServer","SuspendedusersSearch","SuspendedusersController","ParseLinks","AlertService","paginationConstants","reverse","push","onSuccess","links","parse","totalItems","queryCount","onError","error","message","itemsPerPage","loadPage","transition","transitionTo","$current","SourceboxDialogController","Sourcebox","sourcebox","createddate","SourceboxDetailController","SourceboxDeleteController","sourceboxname","createduser","SourceboxSearch","SourceboxController","sourceboxes","ScancafDialogController","Scancaf","$cookies","$cookieStore","init","onSuccessName","countCategory1","countCategory2","countCategory3","countCategory4","countCategory5","category2","category3","category4","category5","array","boxassign","getDetailsByName","getSystemByName","str","increment_string_num","inc","String","parseInt","numeric","match","prefix","lastcompletedbox","lastsourcebox","cafbarcodecheck","onSaveSuccess1","put","getBoxCount","getSource","onSaveSuccessFinal","cafbarcode","caftype","colorcode","boxstatus","getCaf","cat1","validate1","custom","toggleCustom","sourceBoxComplete","cafcheck","successCaf","updatesucess","errorcaf","getBox","BoxComplete","getoutbox","item","blob","Blob","type","saveAs","geterrorbox","sourceboxstaus","getOutBox","ScancafDetailController","ScancafDeleteController","ScancafSearch","ScancafController","scancafs","initTest","MobileValidationDialogController","MobileValidation","mobileValidation","userDate","MobileValidationDetailController","MobileValidationDeleteController","activationDate","customerName","colorCode","MobileValidationSearch","MobileValidationController","mobileValidations","abstract","BoxassignDialogController","Boxassign","users","catChange","onSave","churntype","getCatLatest","BoxassignDetailController","BoxassignDeleteController","BoxassignSearch","BoxassignController","boxassigns","AdminstatsDialogController","Adminstats","adminstats","AdminstatsDetailController","AdminstatsDeleteController","usercount","AdminstatsSearch","AdminstatsController","words","wordsFilter","input","isNaN","inputWords","join","filter","characters","charactersFilter","chars","breakOnWord","charAt","substr","lastspace","lastIndexOf","jhSortBy","parentCtrl","require","jhSort","SortController","bindToController","$element","applyClass","thisIcon","find","sortIcon","sortAsc","sortDesc","remove","add","resetClasses","allThIcons","field","$apply","triggerApply","values","$watchGroup","header","Error","parts","forEach","p","section","trim","queryString","RegExp","$0","$1","$2","$3","isString","sortArray","pop","jhiItemCount","bindings","component","$filter","Date","dateString","dateformat","DataUtils","$window","abbreviate","text","byteSize","base64String","endsWith","suffix","paddingSize","formatAsBytes","toString","openFile","toBase64","file","fileReader","FileReader","readAsDataURL","onload","e","base64Data","target","capitalize","capitalizeFilter","toLowerCase","toUpperCase","Base64","encode","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","charCodeAt","keyStr","decode","fromCharCode","modalInstance","animation","resetModal","LoginController","cancel","authenticationError","preventDefault","$broadcast","requestResetPassword","showValidation","formCtrl","each","$formGroup","$inputs","$input","inputName","attr","$invalid","$dirty","isInvalid","toggleClass","constant","minbytes","ngModel","$validators","modelValue","$isEmpty","numberOfBytes","maxbytes","jhiAlertErrorController","addErrorAlert","alerts","msg","timeout","toast","isToast","scoped","cleanHttpErrorListener","httpResponse","stopPropagation","Object","keys","errorHeader","entityKey","entityName","fieldErrors","fieldError","convertedField","fieldName","jhiAlertError","getService","$sce","position","warning","info","alertOptions","trustAsHtml","alertId","closeAlert","addAlert","extAlerts","that","thisAlerts","closeAlertByIndex","map","index","splice","$get","showAsToast","provider","jhiAlertController","jhiAlert","notificationInterceptor","alertKey","param","errorHandlerInterceptor","responseError","path","authExpiredInterceptor","$injector","authInterceptor","$location","request","token","Authorization","VERSION","stateChangeStart","external","stateChangeSuccess","toParams","fromParams","titleKey","document","title","paginationConfig","uibPaginationConfig","maxSize","boundaryLinks","firstText","previousText","nextText","lastText","pagerConfig","uibPagerConfig","localStorageConfig","$localStorageProvider","$sessionStorageProvider","setKeyPrefix","httpConfig","$urlRouterProvider","$httpProvider","httpRequestInterceptorCacheBusterProvider","$urlMatcherFactoryProvider","setMatchlist","otherwise","interceptors","val","equals","a","b","is","pattern","compileServiceConfig","$compileProvider","DEBUG_INFO_ENABLED","debugInfoEnabled","alertServiceConfig","AlertServiceProvider","navbar@","UserManagementDialogController","langKey","languages","UserManagementDetailController","load","UserManagementDeleteController","firstName","lastName","email","activated","createdBy","createdDate","lastModifiedBy","lastModifiedDate","resetDate","resetKey","UserManagementController","setActive","isActivated","currentAccount","JhiMetricsService","getMetrics","threadDump","JhiMetricsMonitoringModalController","getLabelClass","threadState","threadDumpAll","threadDumpBlocked","threadDumpRunnable","threadDumpTimedWaiting","threadDumpWaiting","JhiMetricsMonitoringController","refresh","updatingMetrics","metrics","refreshThreadDumpData","cachesStats","servicesStats","newValue","timers","gauges","newKey","LogsService","findAll","changeLevel","LogsController","level","loggers","JhiHealthService","checkHealth","transformHealthData","flattenHealthData","getBaseName","getSubSystemName","remainder","isHealthObject","hasSubSystem","addHealthObject","getModuleName","isLeaf","healthObject","healthData","details","hasDetails","extend","separator","HealthModalController","currentHealth","baseName","subSystemName","JhiHealthCheckController","statusState","updatingHealth","showHealth","health","ElasticsearchReindexDialogController","ElasticsearchReindex","confirmReindex","reindex","translatePartialLoader","$translate","$translatePartialLoader","addPart","finally","ElasticsearchReindexController","JhiConfigurationService","getConfigPropsComplete","properties","orderBy","getEnv","getEnvComplete","vals","v","k","JhiConfigurationController","allConfiguration","configuration","AuditsService","fromDate","toDate","AuditsController","onChangeDate","dateFormat","audits","today","getFullYear","getMonth","getDate","previousMonth","SettingsController","settingsAccount","copyAccount","RequestResetController","requestReset","errorEmailNotExists","resetAccount","ResetFinishController","finishReset","doNotMatch","confirmPassword","keyMissing","RegisterController","registerAccount","errorUserExists","errorEmailExists","passwordStrengthBar","iElement","strength","colors","mesureStrength","_force","_regex","_lowerLetters","test","_upperLetters","_numbers","_symbols","_flags","_passedMatches","$","grep","el","Math","min","getColor","s","idx","col","c","children","css","background-color","passwordToCheck","PasswordController","ActivationController","$templateCache"],"mappings":"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","file":"app/app-1c9c6b1151.js","sourcesContent":["(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App', [\n            'ngStorage',\n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar'\n        ])\n        .run(run);\n\n    run.$inject = ['stateHandler'];\n\n    function run(stateHandler) {\n        stateHandler.initialize();\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('User', User);\n\n    User.$inject = ['$resource'];\n\n    function User ($resource) {\n        var service = $resource('api/users/:login', {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'save': { method:'POST' },\n            'update': { method:'PUT' },\n            'delete':{ method:'DELETE'}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('ProfileService', ProfileService);\n\n    ProfileService.$inject = ['$http'];\n\n    function ProfileService($http) {\n\n        var dataPromise;\n\n        var service = {\n            getProfileInfo : getProfileInfo\n        };\n\n        return service;\n\n        function getProfileInfo() {\n            if (angular.isUndefined(dataPromise)) {\n                dataPromise = $http.get('api/profile-info').then(function(result) {\n                    if (result.data.activeProfiles) {\n                        var response = {};\n                        response.activeProfiles = result.data.activeProfiles;\n                        response.ribbonEnv = result.data.ribbonEnv;\n                        response.inProduction = result.data.activeProfiles.indexOf(\"prod\") !== -1;\n                        response.swaggerEnabled = result.data.activeProfiles.indexOf(\"swagger\") !== -1;\n                        return response;\n                    }\n                });\n            }\n            return dataPromise;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .directive('pageRibbon', pageRibbon);\n\n    pageRibbon.$inject = ['ProfileService', '$rootScope'];\n\n    function pageRibbon(ProfileService, $rootScope) {\n        var directive = {\n            replace : true,\n            restrict : 'AE',\n            template : '<div class=\"ribbon hidden\"><a href=\"\">{{ribbonEnv}}</a></div>',\n            link : linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            ProfileService.getProfileInfo().then(function(response) {\n                if (response.ribbonEnv) {\n                    scope.ribbonEnv = response.ribbonEnv;\n                    element.addClass(response.ribbonEnv);\n                    element.removeClass('hidden');\n                }\n            });\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('Register', Register);\n\n    Register.$inject = ['$resource'];\n\n    function Register ($resource) {\n        return $resource('api/register', {}, {});\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('Principal', Principal);\n\n    Principal.$inject = ['$q', 'Account'];\n\n    function Principal ($q, Account) {\n        var _identity,\n            _authenticated = false;\n\n        var service = {\n            authenticate: authenticate,\n            hasAnyAuthority: hasAnyAuthority,\n            hasAuthority: hasAuthority,\n            identity: identity,\n            isAuthenticated: isAuthenticated,\n            isIdentityResolved: isIdentityResolved\n        };\n\n        return service;\n\n        function authenticate (identity) {\n            _identity = identity;\n            _authenticated = identity !== null;\n        }\n\n        function hasAnyAuthority (authorities) {\n            if (!_authenticated || !_identity || !_identity.authorities) {\n                return false;\n            }\n\n            for (var i = 0; i < authorities.length; i++) {\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function hasAuthority (authority) {\n            if (!_authenticated) {\n                return $q.when(false);\n            }\n\n            return this.identity().then(function(_id) {\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\n            }, function(){\n                return false;\n            });\n        }\n\n        function identity (force) {\n            var deferred = $q.defer();\n\n            if (force === true) {\n                _identity = undefined;\n            }\n\n            // check and see if we have retrieved the identity data from the server.\n            // if we have, reuse it by immediately resolving\n            if (angular.isDefined(_identity)) {\n                deferred.resolve(_identity);\n\n                return deferred.promise;\n            }\n\n            // retrieve the identity data from the server, update the identity object, and then resolve.\n            Account.get().$promise\n                .then(getAccountThen)\n                .catch(getAccountCatch);\n\n            return deferred.promise;\n\n            function getAccountThen (account) {\n                _identity = account.data;\n                _authenticated = true;\n                deferred.resolve(_identity);\n            }\n\n            function getAccountCatch () {\n                _identity = null;\n                _authenticated = false;\n                deferred.resolve(_identity);\n            }\n        }\n\n        function isAuthenticated () {\n            return _authenticated;\n        }\n\n        function isIdentityResolved () {\n            return angular.isDefined(_identity);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('PasswordResetInit', PasswordResetInit);\n\n    PasswordResetInit.$inject = ['$resource'];\n\n    function PasswordResetInit($resource) {\n        var service = $resource('api/account/reset_password/init', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('PasswordResetFinish', PasswordResetFinish);\n\n    PasswordResetFinish.$inject = ['$resource'];\n\n    function PasswordResetFinish($resource) {\n        var service = $resource('api/account/reset_password/finish', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('Password', Password);\n\n    Password.$inject = ['$resource'];\n\n    function Password($resource) {\n        var service = $resource('api/account/change_password', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .directive('hasAuthority', hasAuthority);\n\n    hasAuthority.$inject = ['Principal'];\n\n    function hasAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    Principal.hasAuthority(authority)\n                        .then(function (result) {\n                            if (result) {\n                                setVisible();\n                            } else {\n                                setHidden();\n                            }\n                        });\n                };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .directive('hasAnyAuthority', hasAnyAuthority);\n\n    hasAnyAuthority.$inject = ['Principal'];\n\n    function hasAnyAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n                    var result;\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    result = Principal.hasAnyAuthority(authorities);\n                    if (result) {\n                        setVisible();\n                    } else {\n                        setHidden();\n                    }\n                };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('Auth', Auth);\n\n    Auth.$inject = ['$rootScope', '$state', '$sessionStorage', '$q', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'PasswordResetInit', 'PasswordResetFinish'];\n\n    function Auth ($rootScope, $state, $sessionStorage, $q, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, PasswordResetInit, PasswordResetFinish) {\n        var service = {\n            activateAccount: activateAccount,\n            authorize: authorize,\n            changePassword: changePassword,\n            createAccount: createAccount,\n            getPreviousState: getPreviousState,\n            login: login,\n            logout: logout,\n            loginWithToken: loginWithToken,\n            resetPasswordFinish: resetPasswordFinish,\n            resetPasswordInit: resetPasswordInit,\n            resetPreviousState: resetPreviousState,\n            storePreviousState: storePreviousState,\n            updateAccount: updateAccount\n        };\n\n        return service;\n\n        function activateAccount (key, callback) {\n            var cb = callback || angular.noop;\n\n            return Activate.get(key,\n                function (response) {\n                    return cb(response);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function authorize (force) {\n            var authReturn = Principal.identity(force).then(authThen);\n\n            return authReturn;\n\n            function authThen () {\n                var isAuthenticated = Principal.isAuthenticated();\n\n                // an authenticated user can't access to login and register pages\n                if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register' || $rootScope.toState.name === 'social-auth')) {\n                    $state.go('home');\n                }\n\n                // recover and clear previousState after external login redirect (e.g. oauth2)\n                if (isAuthenticated && !$rootScope.fromState.name && getPreviousState()) {\n                    var previousState = getPreviousState();\n                    resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\n                    if (isAuthenticated) {\n                        // user is signed in but not authorized for desired state\n                        $state.go('accessdenied');\n                    }\n                    else {\n                        // user is not authenticated. stow the state they wanted before you\n                        // send them to the login service, so you can return them when you're done\n                        storePreviousState($rootScope.toState.name, $rootScope.toStateParams);\n\n                        // now, send them to the signin state so they can log in\n                        $state.go('accessdenied').then(function() {\n                            LoginService.open();\n                        });\n                    }\n                }\n            }\n        }\n\n        function changePassword (newPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return Password.save(newPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function createAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Register.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    this.logout();\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function login (credentials, callback) {\n            var cb = callback || angular.noop;\n            var deferred = $q.defer();\n\n            AuthServerProvider.login(credentials)\n                .then(loginThen)\n                .catch(function (err) {\n                    this.logout();\n                    deferred.reject(err);\n                    return cb(err);\n                }.bind(this));\n\n            function loginThen (data) {\n                Principal.identity(true).then(function(account) {\n                    deferred.resolve(data);\n                });\n                return cb();\n            }\n\n            return deferred.promise;\n        }\n\n        function loginWithToken(jwt, rememberMe) {\n            return AuthServerProvider.loginWithToken(jwt, rememberMe);\n        }\n\n        function logout () {\n            AuthServerProvider.logout();\n            Principal.authenticate(null);\n        }\n\n        function resetPasswordFinish (keyAndPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetFinish.save(keyAndPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function resetPasswordInit (mail, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetInit.save(mail, function() {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function updateAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Account.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function getPreviousState() {\n            var previousState = $sessionStorage.previousState;\n            return previousState;\n        }\n\n        function resetPreviousState() {\n            delete $sessionStorage.previousState;\n        }\n\n        function storePreviousState(previousStateName, previousStateParams) {\n            var previousState = { \"name\": previousStateName, \"params\": previousStateParams };\n            $sessionStorage.previousState = previousState;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('AuthServerProvider', AuthServerProvider);\n\n    AuthServerProvider.$inject = ['$http', '$localStorage', '$sessionStorage', '$q'];\n\n    function AuthServerProvider ($http, $localStorage, $sessionStorage, $q) {\n        var service = {\n            getToken: getToken,\n            login: login,\n            loginWithToken: loginWithToken,\n            storeAuthenticationToken: storeAuthenticationToken,\n            logout: logout\n        };\n\n        return service;\n\n        function getToken () {\n            return $localStorage.authenticationToken || $sessionStorage.authenticationToken;\n        }\n\n        function login (credentials) {\n\n            var data = {\n                username: credentials.username,\n                password: credentials.password,\n                rememberMe: credentials.rememberMe\n            };\n            return $http.post('api/authenticate', data).success(authenticateSuccess);\n\n            function authenticateSuccess (data, status, headers) {\n                var bearerToken = headers('Authorization');\n                if (angular.isDefined(bearerToken) && bearerToken.slice(0, 7) === 'Bearer ') {\n                    var jwt = bearerToken.slice(7, bearerToken.length);\n                    service.storeAuthenticationToken(jwt, credentials.rememberMe);\n                    return jwt;\n                }\n            }\n        }\n\n        function loginWithToken(jwt, rememberMe) {\n            var deferred = $q.defer();\n\n            if (angular.isDefined(jwt)) {\n                this.storeAuthenticationToken(jwt, rememberMe);\n                deferred.resolve(jwt);\n            } else {\n                deferred.reject();\n            }\n\n            return deferred.promise;\n        }\n\n        function storeAuthenticationToken(jwt, rememberMe) {\n            if(rememberMe){\n                $localStorage.authenticationToken = jwt;\n            } else {\n                $sessionStorage.authenticationToken = jwt;\n            }\n        }\n\n        function logout () {\n            delete $localStorage.authenticationToken;\n            delete $sessionStorage.authenticationToken;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('Activate', Activate);\n\n    Activate.$inject = ['$resource'];\n\n    function Activate ($resource) {\n        var service = $resource('api/activate', {}, {\n            'get': { method: 'GET', params: {}, isArray: false}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('Account', Account);\n\n    Account.$inject = ['$resource'];\n\n    function Account ($resource) {\n        var service = $resource('api/account', {}, {\n            'get': { method: 'GET', params: {}, isArray: false,\n                interceptor: {\n                    response: function(response) {\n                        // expose response\n                        return response;\n                    }\n                }\n            }\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = ['$state', 'Auth', 'Principal', 'ProfileService', 'LoginService'];\n\n    function NavbarController ($state, Auth, Principal, ProfileService, LoginService) {\n        var vm = this;\n\n        vm.isNavbarCollapsed = true;\n        vm.isAuthenticated = Principal.isAuthenticated;\n\n        ProfileService.getProfileInfo().then(function(response) {\n            vm.inProduction = response.inProduction;\n            vm.swaggerEnabled = response.swaggerEnabled;\n        });\n\n        vm.login = login;\n        vm.logout = logout;\n        vm.toggleNavbar = toggleNavbar;\n        vm.collapseNavbar = collapseNavbar;\n        vm.$state = $state;\n\n        function login() {\n            collapseNavbar();\n            LoginService.open();\n        }\n\n        function logout() {\n            collapseNavbar();\n            Auth.logout();\n            $state.go('home');\n        }\n\n        function toggleNavbar() {\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\n        }\n\n        function collapseNavbar() {\n            vm.isNavbarCollapsed = true;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('error', {\n                parent: 'app',\n                url: '/error',\n                data: {\n                    authorities: [],\n                    pageTitle: 'Error page!'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/error.html'\n                    }\n                }\n            })\n            .state('accessdenied', {\n                parent: 'app',\n                url: '/accessdenied',\n                data: {\n                    authorities: []\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/accessdenied.html'\n                    }\n                }\n            });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('home', {\n            parent: 'app',\n            url: '/',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/home/home.html',\n                    controller: 'HomeController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('HomeController', HomeController);\n\n    HomeController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\n\n    function HomeController ($scope, Principal, LoginService, $state) {\n        var vm = this;\n\n        vm.account = null;\n        vm.isAuthenticated = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        $scope.$on('authenticationSuccess', function() {\n            getAccount();\n        });\n\n        getAccount();\n\n        function getAccount() {\n            Principal.identity().then(function(account) {\n                vm.account = account;\n                vm.isAuthenticated = Principal.isAuthenticated;\n            });\n        }\n        function register () {\n            $state.go('register');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SystemDialogController', SystemDialogController);\n\n    SystemDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'System'];\n\n    function SystemDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, System) {\n        var vm = this;\n\n        vm.system = entity;\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.system.id !== null) {\n                System.update(vm.system, onSaveSuccess, onSaveError);\n            } else {\n                System.save(vm.system, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cafvalidityV2App:systemUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.userdate = false;\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SystemDetailController', SystemDetailController);\n\n    SystemDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'System'];\n\n    function SystemDetailController($scope, $rootScope, $stateParams, previousState, entity, System) {\n        var vm = this;\n\n        vm.system = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cafvalidityV2App:systemUpdate', function(event, result) {\n            vm.system = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SystemDeleteController',SystemDeleteController);\n\n    SystemDeleteController.$inject = ['$uibModalInstance', 'entity', 'System'];\n\n    function SystemDeleteController($uibModalInstance, entity, System) {\n        var vm = this;\n\n        vm.system = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            System.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('system', {\n            parent: 'entity',\n            url: '/system',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Systems'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/system/systems.html',\n                    controller: 'SystemController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('system-detail', {\n            parent: 'system',\n            url: '/system/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'System'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/system/system-detail.html',\n                    controller: 'SystemDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'System', function($stateParams, System) {\n                    return System.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'system',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('system-detail.edit', {\n            parent: 'system-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/system/system-dialog.html',\n                    controller: 'SystemDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['System', function(System) {\n                            return System.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('system.new', {\n            parent: 'system',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/system/system-dialog.html',\n                    controller: 'SystemDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                systemname: null,\n                                user: null,\n                                userdate: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('system', null, { reload: 'system' });\n                }, function() {\n                    $state.go('system');\n                });\n            }]\n        })\n        .state('system.edit', {\n            parent: 'system',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/system/system-dialog.html',\n                    controller: 'SystemDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['System', function(System) {\n                            return System.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('system', null, { reload: 'system' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('system.delete', {\n            parent: 'system',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/system/system-delete-dialog.html',\n                    controller: 'SystemDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['System', function(System) {\n                            return System.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('system', null, { reload: 'system' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('cafvalidityV2App')\n        .factory('System', System);\n\n    System.$inject = ['$resource', 'DateUtils'];\n\n    function System ($resource, DateUtils) {\n        var resourceUrl =  'api/systems/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.userdate = DateUtils.convertLocalDateFromServer(data.userdate);\n                    }\n                    return data;\n                }\n            },\n            'update': {\n                method: 'PUT',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            },\n            'save': {\n                method: 'POST',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('SystemSearch', SystemSearch);\n\n    SystemSearch.$inject = ['$resource'];\n\n    function SystemSearch($resource) {\n        var resourceUrl =  'api/_search/systems/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SystemController', SystemController);\n\n    SystemController.$inject = ['System', 'SystemSearch'];\n\n    function SystemController(System, SystemSearch) {\n\n        var vm = this;\n\n        vm.systems = [];\n        vm.clear = clear;\n        vm.search = search;\n        vm.loadAll = loadAll;\n\n        loadAll();\n\n        function loadAll() {\n            System.query(function(result) {\n                vm.systems = result;\n                vm.searchQuery = null;\n            });\n        }\n\n        function search() {\n            if (!vm.searchQuery) {\n                return vm.loadAll();\n            }\n            SystemSearch.query({query: vm.searchQuery}, function(result) {\n                vm.systems = result;\n                vm.currentSearch = vm.searchQuery;\n            });\n        }\n\n        function clear() {\n            vm.searchQuery = null;\n            loadAll();\n        }    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SuspendedusersDialogController', SuspendedusersDialogController);\n\n    SuspendedusersDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Suspendedusers'];\n\n    function SuspendedusersDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Suspendedusers) {\n        var vm = this;\n\n        vm.suspendedusers = entity;\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.suspendedusers.id !== null) {\n                Suspendedusers.update(vm.suspendedusers, onSaveSuccess, onSaveError);\n            } else {\n            \tvm.suspendedusers.count =vm.suspendedusers.count +1;\n                Suspendedusers.save(vm.suspendedusers, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n           if(vm.suspendedusers.count==50||vm.suspendedusers.count==100||vm.suspendedusers.count==150||\n        \t\t   vm.suspendedusers.count==200||vm.suspendedusers.count==250||vm.suspendedusers.count==300){\n        \t   alert('Lot Completed')\n           }\n           if(vm.suspendedusers.count==300){\n        \t   alert('Box Completed')\n        \t   vm.suspendedusers.count =0;\n    \t\t\t  vm.scancaf.centralbarcode= 'SUS'+increment_alphanumeric_str(vm.scancaf.category1.substring(3, 8));\n           }\n           \n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.userdate = false;\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SuspendedusersDetailController', SuspendedusersDetailController);\n\n    SuspendedusersDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Suspendedusers'];\n\n    function SuspendedusersDetailController($scope, $rootScope, $stateParams, previousState, entity, Suspendedusers) {\n        var vm = this;\n\n        vm.suspendedusers = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cafvalidityV2App:suspendedusersUpdate', function(event, result) {\n            vm.suspendedusers = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SuspendedusersDeleteController',SuspendedusersDeleteController);\n\n    SuspendedusersDeleteController.$inject = ['$uibModalInstance', 'entity', 'Suspendedusers'];\n\n    function SuspendedusersDeleteController($uibModalInstance, entity, Suspendedusers) {\n        var vm = this;\n\n        vm.suspendedusers = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Suspendedusers.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('suspendedusers', {\n            parent: 'entity',\n            url: '/suspendedusers?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Suspendedusers'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/suspendedusers/suspendedusers.html',\n                    controller: 'SuspendedusersController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('suspendedusers-detail', {\n            parent: 'suspendedusers',\n            url: '/suspendedusers/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Suspendedusers'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/suspendedusers/suspendedusers-detail.html',\n                    controller: 'SuspendedusersDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Suspendedusers', function($stateParams, Suspendedusers) {\n                    return Suspendedusers.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'suspendedusers',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('suspendedusers-detail.edit', {\n            parent: 'suspendedusers-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/suspendedusers/suspendedusers-dialog.html',\n                    controller: 'SuspendedusersDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Suspendedusers', function(Suspendedusers) {\n                            return Suspendedusers.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('suspendedusers.new', {\n            parent: 'suspendedusers',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/suspendedusers/suspendedusers-dialog.html',\n                    controller: 'SuspendedusersDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                mobilenumber: null,\n                                centralbarcode: null,\n                                count: null,\n                                user: null,\n                                userdate: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('suspendedusers', null, { reload: 'suspendedusers' });\n                }, function() {\n                    $state.go('suspendedusers');\n                });\n            }]\n        })\n        .state('suspendedusers.edit', {\n            parent: 'suspendedusers',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/suspendedusers/suspendedusers-dialog.html',\n                    controller: 'SuspendedusersDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Suspendedusers', function(Suspendedusers) {\n                            return Suspendedusers.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('suspendedusers', null, { reload: 'suspendedusers' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('suspendedusers.delete', {\n            parent: 'suspendedusers',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/suspendedusers/suspendedusers-delete-dialog.html',\n                    controller: 'SuspendedusersDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Suspendedusers', function(Suspendedusers) {\n                            return Suspendedusers.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('suspendedusers', null, { reload: 'suspendedusers' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('cafvalidityV2App')\n        .factory('Suspendedusers', Suspendedusers);\n\n    Suspendedusers.$inject = ['$resource', 'DateUtils'];\n\n    function Suspendedusers ($resource, DateUtils) {\n        var resourceUrl =  'api/suspendedusers/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.userdate = DateUtils.convertDateTimeFromServer(data.userdate);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('SuspendedusersSearch', SuspendedusersSearch);\n\n    SuspendedusersSearch.$inject = ['$resource'];\n\n    function SuspendedusersSearch($resource) {\n        var resourceUrl =  'api/_search/suspendedusers/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SuspendedusersController', SuspendedusersController);\n\n    SuspendedusersController.$inject = ['$state', 'Suspendedusers', 'SuspendedusersSearch', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function SuspendedusersController($state, Suspendedusers, SuspendedusersSearch, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.clear = clear;\n        vm.search = search;\n        vm.loadAll = loadAll;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n\n        loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                SuspendedusersSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                Suspendedusers.query({\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.suspendedusers = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search(searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear() {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SourceboxDialogController', SourceboxDialogController);\n\n    SourceboxDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Sourcebox'];\n\n    function SourceboxDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Sourcebox) {\n        var vm = this;\n\n        vm.sourcebox = entity;\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.sourcebox.id !== null) {\n                Sourcebox.update(vm.sourcebox, onSaveSuccess, onSaveError);\n            } else {\n                Sourcebox.save(vm.sourcebox, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cafvalidityV2App:sourceboxUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.createddate = false;\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SourceboxDetailController', SourceboxDetailController);\n\n    SourceboxDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Sourcebox'];\n\n    function SourceboxDetailController($scope, $rootScope, $stateParams, previousState, entity, Sourcebox) {\n        var vm = this;\n\n        vm.sourcebox = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cafvalidityV2App:sourceboxUpdate', function(event, result) {\n            vm.sourcebox = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SourceboxDeleteController',SourceboxDeleteController);\n\n    SourceboxDeleteController.$inject = ['$uibModalInstance', 'entity', 'Sourcebox'];\n\n    function SourceboxDeleteController($uibModalInstance, entity, Sourcebox) {\n        var vm = this;\n\n        vm.sourcebox = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Sourcebox.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('sourcebox', {\n            parent: 'entity',\n            url: '/sourcebox?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Sourceboxes'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/sourcebox/sourceboxes.html',\n                    controller: 'SourceboxController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('sourcebox-detail', {\n            parent: 'sourcebox',\n            url: '/sourcebox/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Sourcebox'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/sourcebox/sourcebox-detail.html',\n                    controller: 'SourceboxDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Sourcebox', function($stateParams, Sourcebox) {\n                    return Sourcebox.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'sourcebox',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('sourcebox-detail.edit', {\n            parent: 'sourcebox-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/sourcebox/sourcebox-dialog.html',\n                    controller: 'SourceboxDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Sourcebox', function(Sourcebox) {\n                            return Sourcebox.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('sourcebox.new', {\n            parent: 'sourcebox',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/sourcebox/sourcebox-dialog.html',\n                    controller: 'SourceboxDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                sourceboxname: null,\n                                createduser: null,\n                                createddate: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('sourcebox', null, { reload: 'sourcebox' });\n                }, function() {\n                    $state.go('sourcebox');\n                });\n            }]\n        })\n        .state('sourcebox.edit', {\n            parent: 'sourcebox',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/sourcebox/sourcebox-dialog.html',\n                    controller: 'SourceboxDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Sourcebox', function(Sourcebox) {\n                            return Sourcebox.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('sourcebox', null, { reload: 'sourcebox' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('sourcebox.delete', {\n            parent: 'sourcebox',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/sourcebox/sourcebox-delete-dialog.html',\n                    controller: 'SourceboxDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Sourcebox', function(Sourcebox) {\n                            return Sourcebox.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('sourcebox', null, { reload: 'sourcebox' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('cafvalidityV2App')\n        .factory('Sourcebox', Sourcebox);\n\n    Sourcebox.$inject = ['$resource', 'DateUtils'];\n\n    function Sourcebox ($resource, DateUtils) {\n        var resourceUrl =  'api/sourceboxes/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.createddate = DateUtils.convertLocalDateFromServer(data.createddate);\n                    }\n                    return data;\n                }\n            },\n            'update': {\n                method: 'PUT',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.createddate = DateUtils.convertLocalDateToServer(copy.createddate);\n                    return angular.toJson(copy);\n                }\n            },\n            'save': {\n                method: 'POST',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.createddate = DateUtils.convertLocalDateToServer(copy.createddate);\n                    return angular.toJson(copy);\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('SourceboxSearch', SourceboxSearch);\n\n    SourceboxSearch.$inject = ['$resource'];\n\n    function SourceboxSearch($resource) {\n        var resourceUrl =  'api/_search/sourceboxes/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SourceboxController', SourceboxController);\n\n    SourceboxController.$inject = ['$state', 'Sourcebox', 'SourceboxSearch', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function SourceboxController($state, Sourcebox, SourceboxSearch, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.clear = clear;\n        vm.search = search;\n        vm.loadAll = loadAll;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n\n        loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                SourceboxSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                Sourcebox.query({\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.sourceboxes = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search(searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear() {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('ScancafDialogController', ScancafDialogController);\n\n    ScancafDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Scancaf','$cookies','$cookieStore'];\n\n    function ScancafDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Scancaf,$cookies,$cookieStore) {\n        var vm = this;\n        $scope.lastcompletedbox = $cookieStore.get('completed');\n        $scope.lastsourcebox = $cookieStore.get('sourcecompleted')\n        vm.scancaf = entity;\n        vm.cafbarcodecheck = null;\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n        \n        \n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.scancaf.id !== null) {\n                Scancaf.update(vm.scancaf, onSaveSuccess, onSaveError);\n            } else {\n                Scancaf.save(vm.scancaf, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cafvalidityV2App:scancafUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.userdate = false;\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n        \n        function init(){\n        \t\n        \tScancaf.getSystemByName(vm.scancaf,onSuccess,onError);\n        \t function onSuccess(data){\n        \t\tif(data.user != null){\n        \t\t\tvm.scancaf.user=data.user\n        \t\t\t var array =  data.boxassign.split(\",\");\n                 \t \n     \t           \tif(array[0].indexOf('E1A') > -1){\n     \t           \t\tvm.scancaf.category1 = array[0];\n     \t           \t}\n     \t           \tif(array[1].indexOf('EC1') > -1){\n     \t           \t\tvm.scancaf.category2 = array[1];\n     \t           \t}\n     \t           \tif(array[2].indexOf('EC2')  > -1){\n     \t           \t vm.scancaf.category3= array[2]; \n     \t           \t}\n     \t           \tif(array[3].indexOf('EC3')  > -1){\n     \t           \t  vm.scancaf.category4  =  array[3];\n     \t           \t}\n     \t           \tif(array[4].indexOf('EDA')  > -1){\n     \t           \t vm.scancaf.category5 = array[4];\n     \t           \t}\n    \t\t\t\t}\n        \t\t\tScancaf.getDetailsByName(vm.scancaf,onSuccessName);\n        \t\t\tfunction onSuccessName(result){\n        \t\t\t\tif(result != null){\n        \t\t\t\t\tvm.scancaf.sourcebox = result.sourcebox;\n        \t\t\t\t vm.scancaf.countCategory1 = result.countCategory1;\n        \t        \t   vm.scancaf.countCategory2 = result.countCategory2;\n        \t        \t   vm.scancaf.countCategory3 = result.countCategory3;\n        \t        \t   vm.scancaf.countCategory4 = result.countCategory4;\n        \t        \t   vm.scancaf.countCategory5 = result.countCategory5;\n        \t\t           vm.scancaf.category1 = result.category1;\n        \t\t           vm.scancaf.category2 = result.category2;\n        \t\t           vm.scancaf.category3 = result.category3;\n        \t\t           vm.scancaf.category4 = result.category4;\n        \t\t           vm.scancaf.category5 = result.category5;\n        \t\t\t\t}\n        \t\t\t}\n        \t\t\t\t\n        \t\t}\n        \t\t\t\t\n          \t\t\n            function onError(){\n           \t\talert(\"You are not allowed to work on the system, Please check with your Team leader\");\n           \t}\n        }\n        \n       \n       \tinit();\n       \n        //watchCollection\n        $scope.$watch('vm.scancaf.sourcebox', function(){\n        \tif(vm.scancaf.sourcebox.length ===8){\n        \t\tScancaf.getSource(vm.scancaf.sourcebox,onSaveSuccess,onError);\n        \t}\n        \t function onSaveSuccess (result) {\n        \t\t\n\n           \t  Scancaf.getBoxCount(vm.scancaf,onSaveSuccess1);\n           \n           function onSaveSuccess1 (result) {\n        \t   vm.scancaf.countCategory1 = result.countCategory1;\n        \t   vm.scancaf.countCategory2 = result.countCategory2;\n        \t   vm.scancaf.countCategory3 = result.countCategory3;\n        \t   vm.scancaf.countCategory4 = result.countCategory4;\n        \t   vm.scancaf.countCategory5 = result.countCategory5;\n\t           vm.scancaf.category1 = result.category1;\n\t           vm.scancaf.category2 = result.category2;\n\t           vm.scancaf.category3 = result.category3;\n\t           vm.scancaf.category4 = result.category4;\n\t           vm.scancaf.category5 = result.category5;\n\t           \n\t           if(vm.scancaf.countCategory1===300){\n         \t\t\t \n          \t\t\t$cookieStore.put('completed', vm.scancaf.category1);\n          \t\t\t\tvm.scancaf.countCategory1= 0;\n          \t\t\t  vm.scancaf.category1= 'EDA'+increment_alphanumeric_str(vm.scancaf.category1.substring(3, 8));\n          \t\t      $scope.lastcompletedbox = $cookieStore.get('completed')\n\n          \t\t\t  \n          \t\t  }\n          \t\t  \n          \t\t  if(vm.scancaf.countCategory2===300){\n          \t\t\t  $cookieStore.put('completed', vm.scancaf.category2);\n          \t\t\t  vm.scancaf.countCategory2= 0;\n          \t\t\t  vm.scancaf.category2= 'E1A'+increment_alphanumeric_str(vm.scancaf.category2.substring(3, 8));\n          \t\t\t  $scope.lastcompletedbox = $cookieStore.get('completed')\n      \t\t       }\n          \t\t  if(vm.scancaf.countCategory3===300){\n          \t\t\t$cookieStore.put('completed', vm.scancaf.category3);\n        \t\t\t  vm.scancaf.countCategory3= 0;\n        \t\t\t  vm.scancaf.category3= 'EC1'+increment_alphanumeric_str(vm.scancaf.category3.substring(3, 8));\n        \t\t\t  $scope.lastcompletedbox = $cookieStore.get('completed')\n          \t\t  }\n          \t\t  if(vm.scancaf.countCategory4===300){\n          \t\t\t$cookieStore.put('completed', vm.scancaf.category4);\n      \t\t\t  vm.scancaf.countCategory4= 0;\n      \t\t\t  vm.scancaf.category4= 'EC2'+increment_alphanumeric_str(vm.scancaf.category4.substring(3, 8));\n      \t\t\t  $scope.lastcompletedbox = $cookieStore.get('completed')}\n          \t\t  if(vm.scancaf.countCategory5===300){\n          \t\t\t$cookieStore.put('completed', vm.scancaf.category5);\n      \t\t\t  vm.scancaf.countCategory5= 0;\n      \t\t\t  vm.scancaf.category5= 'EC3'+increment_alphanumeric_str(vm.scancaf.category5.substring(3, 8));\n      \t\t\t  $scope.lastcompletedbox = $cookieStore.get('completed')\n          \t\t  }\n\t           }\n        \t\t \n        \t }\n        });\n        \n        $scope.$watch('vm.scancaf.cafbarcode', function(){\n        \tif(vm.scancaf.cafbarcode.length ===13){\n        \t\t vm.scancaf.colorcode ='';\n        \t\t vm.scancaf.mobilenumber='';\n        \t\t  Scancaf.getCaf(vm.scancaf,onSaveSuccess);\n        \t\t\n        \t}\n        \t function onSaveSuccess (result) {\n               //  $scope.$emit('cafvalidityV2App:scancafUpdate', result);\n                 //$uibModalInstance.close(result);\n        \t\t vm.scancaf.centralbarcode =vm.scancaf.cafbarcode;\n        \t\t vm.scancaf.caftype = result.caftype;\n        \t\t if(vm.scancaf.caftype==='G3y'){\n        \t\t\t vm.scancaf.colorcode = 'red';\n        \t\t\t vm.scancaf.countCategory1 =  vm.scancaf.countCategory1+1;\n        \t\t }\n        \t\t if(vm.scancaf.caftype==='Active'){\n        \t\t\t vm.scancaf.colorcode = 'green';\n        \t\t\t vm.scancaf.countCategory2 =  vm.scancaf.countCategory2+1;\n        \t\t }\n        \t\t if(vm.scancaf.caftype==='L1'){\n        \t\t\t vm.scancaf.colorcode = 'white';\n        \t\t\t vm.scancaf.countCategory3 =  vm.scancaf.countCategory3+1;\n        \t\t }\n        \t\t if(vm.scancaf.caftype==='0-1'){\n        \t\t\t vm.scancaf.colorcode = 'yellow';\n        \t\t\t vm.scancaf.countCategory4 =  vm.scancaf.countCategory4+1;\n        \t\t }\n        \t\t if(vm.scancaf.caftype==='1-2'){\n        \t\t\t vm.scancaf.colorcode = 'blue';\n        \t\t\t vm.scancaf.countCategory5 =  vm.scancaf.countCategory5+1;\n        \t\t }\n        \t\t\n        \t\t \n        \t\t vm.scancaf.mobilenumber = result.mobilenumber;\n        \t\t vm.scancaf.cafbarcode = result.cafbarcode;\n        \t\t \n        \t\t\n        \t\t\n        \t\t \n        \t\t if(vm.scancaf.countCategory1===300){\n        \t\t\talert('Category1 Box is completed please ask for another one') ;\n        \t\t\tvm.scancaf.boxstatus='category1-completed'\n        \t\t }\n        \t\t \n        \t\t if(vm.scancaf.countCategory2===300){\n        \talert('Category2 Box is completed please ask for another one') ; \n        \t\t\tif(vm.scancaf.boxstatus!=null){\n        \t\t\t\tvm.scancaf.boxstatus=' ,category2-completed'\n        \t\t\t}else{\n        \t\t\t\tvm.scancaf.boxstatus='category2-completed'\n        \t\t\t}\n        \t\t }\n        \t\t if(vm.scancaf.countCategory3===300){\n        \t alert('Category3 Box is completed please ask for another one') ;\n        \t if(vm.scancaf.boxstatus!=null){\n \t\t\t\tvm.scancaf.boxstatus=' ,category3-completed'\n \t\t\t}else{\n \t\t\t\tvm.scancaf.boxstatus='category3-completed'\n \t\t\t}\n        \t\t }\n        \t\t if(vm.scancaf.countCategory4===300){\n        \t alert('Category4 Box is completed please ask for another one') ;\n        \t if(vm.scancaf.boxstatus!=null){\n \t\t\t\tvm.scancaf.boxstatus=' ,category4-completed'\n \t\t\t}else{\n \t\t\t\tvm.scancaf.boxstatus='category4-completed'\n \t\t\t}\n        \t\t }\n        \t\t if(vm.scancaf.countCategory5===300){\n        \t\t alert('Category5 Box is completed please ask for another one') ;\n\t\t        \t if(vm.scancaf.boxstatus!=null){\n\t\t \t\t\t\tvm.scancaf.boxstatus=' ,category5-completed'\n\t\t \t\t\t}else{\n\t\t \t\t\t\tvm.scancaf.boxstatus='category5-completed'\n\t\t \t\t\t}\n        \t\t }\n        \t\t if(vm.scancaf.countCategory1===50|| vm.scancaf.countCategory1===100||vm.scancaf.countCategory1===150||\n        \t\t\t\t vm.scancaf.countCategory1===200|| vm.scancaf.countCategory1===250){\n         \t\t\talert('For Category1 : Lot is completed') ;\n         \t\t }\n         \t\t \n        \t\t if(vm.scancaf.countCategory2===50|| vm.scancaf.countCategory2===100||vm.scancaf.countCategory2===150||\n        \t\t\t\t vm.scancaf.countCategory2===200|| vm.scancaf.countCategory2===250){\n        \t\t\t alert('For Category2 : Lot is completed') ;\n         \t\t }\n        \t\t if(vm.scancaf.countCategory3===50|| vm.scancaf.countCategory3===100||vm.scancaf.countCategory3===150||\n        \t\t\t\t vm.scancaf.countCategory3===200|| vm.scancaf.countCategory3===250){\n         \t\t\talert('For Category3 : Lot is completed') ;\t \n         \t\t }\n        \t\t if(vm.scancaf.countCategory4===50|| vm.scancaf.countCategory4===100||vm.scancaf.countCategory4===150||\n        \t\t\t\t vm.scancaf.countCategory4===200|| vm.scancaf.countCategory4===250){\n         \t\t\talert('For Category4 : Lot is completed') ;\n        \t\t }\n        \t\t if(vm.scancaf.countCategory5===50|| vm.scancaf.countCategory5===100||vm.scancaf.countCategory5===150||\n        \t\t\t\t vm.scancaf.countCategory5===200|| vm.scancaf.countCategory5===250){\n         \t\t\talert('For Category5 : Lot is completed') ;\n        \t\t }\n        \t\t // save functionality is being called\n        \t\t Scancaf.save(vm.scancaf,onSaveSuccessFinal);\n        \t\t \n        \t\t function onSaveSuccessFinal() {\n        \t\t\t vm.scancaf.cafbarcode ='';\n           \t\t  if(vm.scancaf.countCategory1===300){\n           \t\t\t \n           \t\t\t$cookieStore.put('completed', vm.scancaf.category1);\n           \t\t\t\tvm.scancaf.countCategory1= 0;\n           \t\t\t  vm.scancaf.category1= 'EDA'+increment_alphanumeric_str(vm.scancaf.category1.substring(3, 8));\n           \t\t      $scope.lastcompletedbox = $cookieStore.get('completed')\n\n           \t\t\t  \n           \t\t  }\n           \t\t  \n           \t\t  if(vm.scancaf.countCategory2===300){\n           \t\t\t  $cookieStore.put('completed', vm.scancaf.category2);\n           \t\t\t  vm.scancaf.countCategory2= 0;\n           \t\t\t  vm.scancaf.category2= 'E1A'+increment_alphanumeric_str(vm.scancaf.category2.substring(3, 8));\n           \t\t\t  $scope.lastcompletedbox = $cookieStore.get('completed')\n       \t\t       }\n           \t\t  if(vm.scancaf.countCategory3===300){\n           \t\t\t$cookieStore.put('completed', vm.scancaf.category3);\n         \t\t\t  vm.scancaf.countCategory3= 0;\n         \t\t\t  vm.scancaf.category3= 'EC1'+increment_alphanumeric_str(vm.scancaf.category3.substring(3, 8));\n         \t\t\t  $scope.lastcompletedbox = $cookieStore.get('completed')\n           \t\t  }\n           \t\t  if(vm.scancaf.countCategory4===300){\n           \t\t\t$cookieStore.put('completed', vm.scancaf.category4);\n       \t\t\t  vm.scancaf.countCategory4= 0;\n       \t\t\t  vm.scancaf.category4= 'EC2'+increment_alphanumeric_str(vm.scancaf.category4.substring(3, 8));\n       \t\t\t  $scope.lastcompletedbox = $cookieStore.get('completed')}\n           \t\t  if(vm.scancaf.countCategory5===300){\n           \t\t\t$cookieStore.put('completed', vm.scancaf.category5);\n       \t\t\t  vm.scancaf.countCategory5= 0;\n       \t\t\t  vm.scancaf.category5= 'EC3'+increment_alphanumeric_str(vm.scancaf.category5.substring(3, 8));\n       \t\t\t  $scope.lastcompletedbox = $cookieStore.get('completed')\n           \t\t  }\n                }\n\n        \t\t \n             }\n\n        \t         });\n        \n        $scope.cat1 = function(){\n        \t\n            if(vm.scancaf.category1.length===12){\n            \t  Scancaf.getBoxCount(vm.scancaf,onSaveSuccess);\n            }\n            function onSaveSuccess (result) {\n            vm.scancaf.countCategory1 = result.countCategory1;\n            }\n            }\n        \n  $scope.validate1 = function(){\n        \t\n            if(vm.scancaf.category1.length===8){\n            \t  if(vm.scancaf.category1.substring(0,3)!='EDA'){\n            \t\t alert('Assigned Box in Category 1 is not correct !!! Please Check') \n            \t  }\n            }\n            if(vm.scancaf.category2.length===8){\n          \t  if(vm.scancaf.category2.substring(0,3)!='E1A'){\n          \t\t alert('Assigned Box in Category 2 is not correct !!! Please Check') \n          \t  }\n          }\n            if(vm.scancaf.category3.length===8){\n          \t  if(vm.scancaf.category3.substring(0,3)!='EC1'){\n          \t\t alert('Assigned Box in Category 3 is not correct !!! Please Check') \n          \t  }\n          }\n            if(vm.scancaf.category4.length===8){\n          \t  if(vm.scancaf.category4.substring(0,3)!='EC2'){\n          \t\t alert('Assigned Box in Category 4 is not correct !!! Please Check') \n          \t  }\n          }\n            if(vm.scancaf.category5.length===8){\n          \t  if(vm.scancaf.category5.substring(0,3)!='EC3'){\n          \t\t alert('Assigned Box in Category 5 is not correct !!! Please Check') \n          \t  }\n          }\n\n            function onSaveSuccess (result) {\n            vm.scancaf.countCategory1 = result.countCategory1;\n            }\n            }\n        \t\n        $scope.custom = true;\n        $scope.toggleCustom = function() {\n            $scope.custom = $scope.custom === false ? true: false;\n        };\n        \n        function increment_alphanumeric_str(str){\n            var numeric = str.match(/\\d+$/)[0];\n            var prefix = str.split(numeric)[0];\n\n            function increment_string_num(str){\n                var inc = String(parseInt(str)+1);\n                return str.slice(0, str.length-inc.length)+inc;\n            }\n\n            return prefix+increment_string_num(numeric);\n        }\n        $scope.sourceBoxComplete = function() {\n        \t\n        \t$cookieStore.put('sourcecompleted', vm.scancaf.sourcebox);\n    \t\t  $scope.lastsourcebox = $cookieStore.get('sourcecompleted')\n        \t\n        };\n        \n        $scope.cafcheck = function(){\n        \tif(vm.scancaf.boxstatus.length ===13){\n        \t\t  Scancaf.getBox(vm.scancaf,successCaf,errorcaf);\n        \t\t function successCaf (result) {\n        \t\t\t vm.scancaf = result;\n        \t\t\t vm.scancaf.boxstatus ='SECOND_LEVEL';\n        \t\t\t Scancaf.update(vm.scancaf, updatesucess); \n        \t\t\t function updatesucess (result) {\n        \t\t\t\t vm.scancaf.boxstatus ='';\n        \t\t\t }\n        \t\t }\n        \t\t function errorcaf (result) {\n        \t\t\t vm.scancaf= result;\n        \t\t }\n        \t}\n        }\n        \n        \n        $scope.BoxComplete = function() {\n        \t\n        \tif (vm.scancaf.sourceboxstaus.indexOf('EDA') > -1)\n        \t{\n        \t  vm.scancaf.caftype ='category_1'\n        \t}\n        \tif (vm.scancaf.sourceboxstaus.indexOf('E1A') > -1)\n        \t{\n        \t  vm.scancaf.caftype ='category_2'\n        \t}\n        \tif (vm.scancaf.sourceboxstaus.indexOf('EC1') > -1)\n        \t{\n        \t  vm.scancaf.caftype ='category_3'\n        \t}\n        \tif (vm.scancaf.sourceboxstaus.indexOf('EC2') > -1)\n        \t{\n        \t  vm.scancaf.caftype ='category_4'\n        \t}\n        \tif (vm.scancaf.sourceboxstaus.indexOf('EC3') > -1)\n        \t{\n        \t  vm.scancaf.caftype ='category_5'\n        \t}\n        \t\n        \t Scancaf.getOutBox(vm.scancaf,getoutbox,geterrorbox);\n        \t \n        \t function getoutbox (result) {\n        \t\t $scope.item = result;\n    \t\t\t// alert(result.boxstatus);\n        \t\t \n    \t\t\t var blob = new Blob([result.boxstatus], {\n    \t\t            type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8\"\n    \t\t        });\n    \t\t\t \n    \t\t        saveAs(blob, \"Report.xls\");\n    \t\t\t\n    \t\t }\n    \t\t function geterrorbox (result) {\n    \t\t\t alert(result.boxstatus);\n    \t\t }\n        \t\n        };\n        \n        \n        // end of scope\n    }\n    \n    \n    \n    \n   \n   \n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('ScancafDetailController', ScancafDetailController);\n\n    ScancafDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Scancaf'];\n\n    function ScancafDetailController($scope, $rootScope, $stateParams, previousState, entity, Scancaf) {\n        var vm = this;\n\n        vm.scancaf = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cafvalidityV2App:scancafUpdate', function(event, result) {\n            vm.scancaf = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('ScancafDeleteController',ScancafDeleteController);\n\n    ScancafDeleteController.$inject = ['$uibModalInstance', 'entity', 'Scancaf'];\n\n    function ScancafDeleteController($uibModalInstance, entity, Scancaf) {\n        var vm = this;\n\n        vm.scancaf = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Scancaf.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('scancaf', {\n            parent: 'entity',\n            url: '/scancaf?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Scancafs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/scancaf/scancafs.html',\n                    controller: 'ScancafController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('scancaf-detail', {\n            parent: 'scancaf',\n            url: '/scancaf/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Scancaf'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/scancaf/scancaf-detail.html',\n                    controller: 'ScancafDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Scancaf', function($stateParams, Scancaf) {\n                    return Scancaf.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'scancaf',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('scancaf-detail.edit', {\n            parent: 'scancaf-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/scancaf/scancaf-dialog.html',\n                    controller: 'ScancafDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Scancaf', function(Scancaf) {\n                            return Scancaf.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('scancaf.new', {\n            parent: 'scancaf',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/scancaf/scancaf-dialog.html',\n                    controller: 'ScancafDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                sourcebox: null,\n                                category1: null,\n                                category2: null,\n                                category3: null,\n                                category4: null,\n                                category5: null,\n                                countCategory1: 0,\n                                countCategory2: 0,\n                                countCategory3: 0,\n                                countCategory4: 0,\n                                countCategory5: 0,\n                                cafbarcode: null,\n                                colorcode: null,\n                                user: null,\n                                userdate: null,\n                                boxstatus: null,\n                                sourceboxstaus: null,\n                                mobilenumber: null,\n                                centralbarcode: null,\n                                caftype: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('scancaf', null, { reload: 'scancaf' });\n                }, function() {\n                    $state.go('scancaf');\n                });\n            }]\n        })\n        .state('scancaf.edit', {\n            parent: 'scancaf',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/scancaf/scancaf-dialog.html',\n                    controller: 'ScancafDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Scancaf', function(Scancaf) {\n                            return Scancaf.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('scancaf', null, { reload: 'scancaf' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('scancaf.delete', {\n            parent: 'scancaf',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/scancaf/scancaf-delete-dialog.html',\n                    controller: 'ScancafDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Scancaf', function(Scancaf) {\n                            return Scancaf.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('scancaf', null, { reload: 'scancaf' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        }).state('scancaf.second', {\n            parent: 'scancaf',\n            url: '/second',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/scancaf/scancaf-dialog_second.html',\n                    controller: 'ScancafDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                sourcebox: null,\n                                category1: null,\n                                category2: null,\n                                category3: null,\n                                category4: null,\n                                category5: null,\n                                countCategory1: 0,\n                                countCategory2: 0,\n                                countCategory3: 0,\n                                countCategory4: 0,\n                                countCategory5: 0,\n                                cafbarcode: null,\n                                colorcode: null,\n                                user: null,\n                                userdate: null,\n                                boxstatus: null,\n                                sourceboxstaus: null,\n                                mobilenumber: null,\n                                centralbarcode: null,\n                                caftype: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('scancaf', null, { reload: 'scancaf' });\n                }, function() {\n                    $state.go('scancaf');\n                });\n            }]\n        })\n        ;\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('cafvalidityV2App')\n        .factory('Scancaf', Scancaf);\n\n    Scancaf.$inject = ['$resource', 'DateUtils'];\n\n    function Scancaf ($resource, DateUtils) {\n        var resourceUrl =  'api/scancafs/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.userdate = DateUtils.convertLocalDateFromServer(data.userdate);\n                    }\n                    return data;\n                }\n            },\n            'update': {\n                method: 'PUT',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            },\n            'save': {\n                method: 'POST',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            },'getSource': {\n                method: 'POST',\n                url: 'api/sourceboxes/getSource',\n                transformResponse: function (data) {\n                    var copy = angular.copy(data);\n                   // copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            },'getCaf': {\n                method: 'POST',\n                url: 'api/scancafs/getCaf',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                   // copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            },'getBoxCount': {\n                method: 'POST',\n                url: 'api/scancafs/getBoxCount',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                   // copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            },'getBox': {\n                method: 'POST',\n                url: 'api/scancafs/getBox',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                   // copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            },'getOutBox': {\n                method: 'POST',\n                url: 'api/scancafs/getOutBox',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                   // copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            },'getSystemByName': {\n                method: 'GET',\n                url: 'api/boxassigns/getSystemName',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                   // copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            },'getDetailsByName': {\n                method: 'POST',\n                url: 'api/scancafs/getDetailsByName',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                   // copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('ScancafSearch', ScancafSearch);\n\n    ScancafSearch.$inject = ['$resource'];\n\n    function ScancafSearch($resource) {\n        var resourceUrl =  'api/_search/scancafs/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('ScancafController', ScancafController);\n\n    ScancafController.$inject = ['$state', '$scope','Scancaf', 'ScancafSearch', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function ScancafController($state,$scope, Scancaf, ScancafSearch, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.clear = clear;\n        vm.search = search;\n        vm.loadAll = loadAll;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n\n        loadAll();\n        \n         $scope.initTest = function(){\n        \t Scancaf.getSystemByName(null,onSuccess,onError);\n        \t function onSuccess(data){\n        \t\t if(data.boxassign!= null){\n        \t\t $state.go(\"scancaf.new\");\n        \t\t }else{\n        \t\t\t alert(\"You are not assingned to any system, Please check with your Team leader\");\n        \t\t }\n        \t }\n        \tfunction onError(){\n        \t\talert(\"You are not allowed to work on the system, Please check with your Team leader\");\n        \t}\n        }\n     ///  init();\n        \n\n        function loadAll () {\n            if (pagingParams.search) {\n                ScancafSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                Scancaf.query({\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.scancafs = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search(searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear() {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('MobileValidationDialogController', MobileValidationDialogController);\n\n    MobileValidationDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'MobileValidation'];\n\n    function MobileValidationDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, MobileValidation) {\n        var vm = this;\n\n        vm.mobileValidation = entity;\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.save = save;\n        vm.search =search;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.mobileValidation.id !== null) {\n                MobileValidation.update(vm.mobileValidation, onSaveSuccess, onSaveError);\n            } else {\n                MobileValidation.save(vm.mobileValidation, onSaveSuccess, onSaveError);\n            }\n        }\n        \n        function search (){\n        \talert('hello con');\n        }\n        \n    \n\n        function onSaveSuccess (result) {\n            $scope.$emit('cafvalidityV2App:mobileValidationUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.userDate = false;\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('MobileValidationDetailController', MobileValidationDetailController);\n\n    MobileValidationDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'MobileValidation'];\n\n    function MobileValidationDetailController($scope, $rootScope, $stateParams, previousState, entity, MobileValidation) {\n        var vm = this;\n\n        vm.mobileValidation = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cafvalidityV2App:mobileValidationUpdate', function(event, result) {\n            vm.mobileValidation = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('MobileValidationDeleteController',MobileValidationDeleteController);\n\n    MobileValidationDeleteController.$inject = ['$uibModalInstance', 'entity', 'MobileValidation'];\n\n    function MobileValidationDeleteController($uibModalInstance, entity, MobileValidation) {\n        var vm = this;\n\n        vm.mobileValidation = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            MobileValidation.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('mobile-validation', {\n            parent: 'entity',\n            url: '/mobile-validation?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'MobileValidations'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/mobile-validation/mobile-validations.html',\n                    controller: 'MobileValidationController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('mobile-validation-detail', {\n            parent: 'mobile-validation',\n            url: '/mobile-validation/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'MobileValidation'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/mobile-validation/mobile-validation-detail.html',\n                    controller: 'MobileValidationDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'MobileValidation', function($stateParams, MobileValidation) {\n                    return MobileValidation.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'mobile-validation',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('mobile-validation-detail.edit', {\n            parent: 'mobile-validation-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/mobile-validation/mobile-validation-dialog.html',\n                    controller: 'MobileValidationDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['MobileValidation', function(MobileValidation) {\n                            return MobileValidation.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('mobile-validation.new', {\n            parent: 'mobile-validation',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/mobile-validation/mobile-validation-dialog.html',\n                    controller: 'MobileValidationDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                mobilenumber: null,\n                                activationDate: null,\n                                customerName: null,\n                                colorCode: null,\n                                user: null,\n                                userDate: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('mobile-validation', null, { reload: 'mobile-validation' });\n                }, function() {\n                    $state.go('mobile-validation');\n                });\n            }]\n        })\n        .state('mobile-validation.edit', {\n            parent: 'mobile-validation',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/mobile-validation/mobile-validation-dialog.html',\n                    controller: 'MobileValidationDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['MobileValidation', function(MobileValidation) {\n                            return MobileValidation.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('mobile-validation', null, { reload: 'mobile-validation' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('mobile-validation.delete', {\n            parent: 'mobile-validation',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/mobile-validation/mobile-validation-delete-dialog.html',\n                    controller: 'MobileValidationDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['MobileValidation', function(MobileValidation) {\n                            return MobileValidation.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('mobile-validation', null, { reload: 'mobile-validation' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('cafvalidityV2App')\n        .factory('MobileValidation', MobileValidation);\n\n    MobileValidation.$inject = ['$resource', 'DateUtils'];\n\n    function MobileValidation ($resource, DateUtils) {\n        var resourceUrl =  'api/mobile-validations/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.userDate = DateUtils.convertLocalDateFromServer(data.userDate);\n                    }\n                    return data;\n                }\n            },\n            'update': {\n                method: 'PUT',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.userDate = DateUtils.convertLocalDateToServer(copy.userDate);\n                    return angular.toJson(copy);\n                }\n            },\n            'save': {\n                method: 'POST',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.userDate = DateUtils.convertLocalDateToServer(copy.userDate);\n                    return angular.toJson(copy);\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('MobileValidationSearch', MobileValidationSearch);\n\n    MobileValidationSearch.$inject = ['$resource'];\n\n    function MobileValidationSearch($resource) {\n        var resourceUrl =  'api/_search/mobile-validations/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('MobileValidationController', MobileValidationController);\n\n    MobileValidationController.$inject = ['$state', 'MobileValidation', 'MobileValidationSearch', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function MobileValidationController($state, MobileValidation, MobileValidationSearch, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.clear = clear;\n        vm.search = search;\n        vm.loadAll = loadAll;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n\n        loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                MobileValidationSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                MobileValidation.query({\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.mobileValidations = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search(searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear() {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('BoxassignDialogController', BoxassignDialogController);\n\n    BoxassignDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Boxassign'];\n\n    function BoxassignDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Boxassign) {\n        var vm = this;\n\n        vm.boxassign = entity;\n        vm.clear = clear;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.boxassign.id !== null) {\n                Boxassign.update(vm.boxassign, onSaveSuccess, onSaveError);\n            } else {\n                Boxassign.save(vm.boxassign, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cafvalidityV2App:boxassignUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n        $scope.users = Boxassign.users();\n        $scope.system = Boxassign.system();\n        \n        $scope.catChange = function(){\n        \t\n        \tBoxassign.getCatLatest(onSave);\n        \t\n        \t function onSave(result){\n           \t\t var boxassign = result;\n           \t\t \n           \tif(vm.boxassign.churntype==='category_1'){\n           \t\tvm.boxassign.boxassign = 'E1A'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \tif(vm.boxassign.churntype==='category_2'){\n           \t\tvm.boxassign.boxassign = 'EC1'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \tif(vm.boxassign.churntype==='category_3'){\n           \t\tvm.boxassign.boxassign = 'EC2'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \tif(vm.boxassign.churntype==='category_4'){\n           \t\tvm.boxassign.boxassign = 'EC3'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \tif(vm.boxassign.churntype==='category_5'){\n           \t\tvm.boxassign.boxassign = 'EDA'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \tvm.boxassign.boxassign = result.boxassign;\n           \t\n           \tif(vm.boxassign.churntype===null){\n           \t var array = result.boxassign.split(',');\n           \t \n           \tif(array[0].indexOf('E1A') > -1){\n           \t\tvm.boxassign.boxassign = 'E1A'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \tif(array[1].indexOf('EC1') > -1){\n           \t\tvm.boxassign.boxassign = vm.boxassign.boxassign+\",\"+ 'EC1'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \tif(array[2].indexOf('EC2')  > -1){\n           \t\tvm.boxassign.boxassign = vm.boxassign.boxassign+\",\"+'EC2'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \tif(array[3].indexOf('EC3')  > -1){\n           \t\tvm.boxassign.boxassign = vm.boxassign.boxassign+\",\"+'EC3'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \tif(array[4].indexOf('EDA')  > -1){\n           \t\tvm.boxassign.boxassign = vm.boxassign.boxassign+\",\"+'EDA'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \t \n           \t\t\n           \t}\n           \t\n         }\n        \t\n        }\n        \n        function increment_alphanumeric_str(str){\n            var numeric = str.match(/\\d+$/)[0];\n            var prefix = str.split(numeric)[0];\n\n            function increment_string_num(str){\n                var inc = String(parseInt(str)+1);\n                return str.slice(0, str.length-inc.length)+inc;\n            }\n\n            return prefix+increment_string_num(numeric);\n        }\n\n       \n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('BoxassignDetailController', BoxassignDetailController);\n\n    BoxassignDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Boxassign'];\n\n    function BoxassignDetailController($scope, $rootScope, $stateParams, previousState, entity, Boxassign) {\n        var vm = this;\n\n        vm.boxassign = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cafvalidityV2App:boxassignUpdate', function(event, result) {\n            vm.boxassign = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('BoxassignDeleteController',BoxassignDeleteController);\n\n    BoxassignDeleteController.$inject = ['$uibModalInstance', 'entity', 'Boxassign'];\n\n    function BoxassignDeleteController($uibModalInstance, entity, Boxassign) {\n        var vm = this;\n\n        vm.boxassign = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Boxassign.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('boxassign', {\n            parent: 'entity',\n            url: '/boxassign?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Boxassigns'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/boxassign/boxassigns.html',\n                    controller: 'BoxassignController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('boxassign-detail', {\n            parent: 'boxassign',\n            url: '/boxassign/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Boxassign'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/boxassign/boxassign-detail.html',\n                    controller: 'BoxassignDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Boxassign', function($stateParams, Boxassign) {\n                    return Boxassign.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'boxassign',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('boxassign-detail.edit', {\n            parent: 'boxassign-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/boxassign/boxassign-dialog.html',\n                    controller: 'BoxassignDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Boxassign', function(Boxassign) {\n                            return Boxassign.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('boxassign.new', {\n            parent: 'boxassign',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/boxassign/boxassign-dialog.html',\n                    controller: 'BoxassignDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                user: null,\n                                boxassign: null,\n                                churntype: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('boxassign', null, { reload: 'boxassign' });\n                }, function() {\n                    $state.go('boxassign');\n                });\n            }]\n        })\n        .state('boxassign.edit', {\n            parent: 'boxassign',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/boxassign/boxassign-dialog.html',\n                    controller: 'BoxassignDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Boxassign', function(Boxassign) {\n                            return Boxassign.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('boxassign', null, { reload: 'boxassign' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('boxassign.delete', {\n            parent: 'boxassign',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/boxassign/boxassign-delete-dialog.html',\n                    controller: 'BoxassignDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Boxassign', function(Boxassign) {\n                            return Boxassign.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('boxassign', null, { reload: 'boxassign' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('cafvalidityV2App')\n        .factory('Boxassign', Boxassign);\n\n    Boxassign.$inject = ['$resource'];\n\n    function Boxassign ($resource) {\n        var resourceUrl =  'api/boxassigns/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n            , 'users': {\n                method: 'GET',\n                url: 'api/users',\n                isArray: true,\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },'getCatLatest' :{\n                method: 'POST',\n                url: 'api/boxassigns/getCatLatest',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            \t\n            },\n            'system': {\n                method: 'GET',\n                url: 'api/systems',\n                isArray: true,\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('BoxassignSearch', BoxassignSearch);\n\n    BoxassignSearch.$inject = ['$resource'];\n\n    function BoxassignSearch($resource) {\n        var resourceUrl =  'api/_search/boxassigns/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('BoxassignController', BoxassignController);\n\n    BoxassignController.$inject = ['$state', 'Boxassign', 'BoxassignSearch', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function BoxassignController($state, Boxassign, BoxassignSearch, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.clear = clear;\n        vm.search = search;\n        vm.loadAll = loadAll;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n\n        loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                BoxassignSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                Boxassign.query({\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.boxassigns = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search(searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear() {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('AdminstatsDialogController', AdminstatsDialogController);\n\n    AdminstatsDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Adminstats'];\n\n    function AdminstatsDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Adminstats) {\n        var vm = this;\n\n        vm.adminstats = entity;\n        vm.clear = clear;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.adminstats.id !== null) {\n                Adminstats.update(vm.adminstats, onSaveSuccess, onSaveError);\n            } else {\n                Adminstats.save(vm.adminstats, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cafvalidityV2App:adminstatsUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('AdminstatsDetailController', AdminstatsDetailController);\n\n    AdminstatsDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Adminstats'];\n\n    function AdminstatsDetailController($scope, $rootScope, $stateParams, previousState, entity, Adminstats) {\n        var vm = this;\n\n        vm.adminstats = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cafvalidityV2App:adminstatsUpdate', function(event, result) {\n            vm.adminstats = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('AdminstatsDeleteController',AdminstatsDeleteController);\n\n    AdminstatsDeleteController.$inject = ['$uibModalInstance', 'entity', 'Adminstats'];\n\n    function AdminstatsDeleteController($uibModalInstance, entity, Adminstats) {\n        var vm = this;\n\n        vm.adminstats = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Adminstats.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('adminstats', {\n            parent: 'entity',\n            url: '/adminstats?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Adminstats'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/adminstats/adminstats.html',\n                    controller: 'AdminstatsController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('adminstats-detail', {\n            parent: 'adminstats',\n            url: '/adminstats/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Adminstats'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/adminstats/adminstats-detail.html',\n                    controller: 'AdminstatsDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Adminstats', function($stateParams, Adminstats) {\n                    return Adminstats.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'adminstats',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('adminstats-detail.edit', {\n            parent: 'adminstats-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/adminstats/adminstats-dialog.html',\n                    controller: 'AdminstatsDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Adminstats', function(Adminstats) {\n                            return Adminstats.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('adminstats.new', {\n            parent: 'adminstats',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/adminstats/adminstats-dialog.html',\n                    controller: 'AdminstatsDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                user: null,\n                                usercount: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('adminstats', null, { reload: 'adminstats' });\n                }, function() {\n                    $state.go('adminstats');\n                });\n            }]\n        })\n        .state('adminstats.edit', {\n            parent: 'adminstats',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/adminstats/adminstats-dialog.html',\n                    controller: 'AdminstatsDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Adminstats', function(Adminstats) {\n                            return Adminstats.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('adminstats', null, { reload: 'adminstats' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('adminstats.delete', {\n            parent: 'adminstats',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/adminstats/adminstats-delete-dialog.html',\n                    controller: 'AdminstatsDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Adminstats', function(Adminstats) {\n                            return Adminstats.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('adminstats', null, { reload: 'adminstats' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('cafvalidityV2App')\n        .factory('Adminstats', Adminstats);\n\n    Adminstats.$inject = ['$resource'];\n\n    function Adminstats ($resource) {\n        var resourceUrl =  'api/adminstats/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('AdminstatsSearch', AdminstatsSearch);\n\n    AdminstatsSearch.$inject = ['$resource'];\n\n    function AdminstatsSearch($resource) {\n        var resourceUrl =  'api/_search/adminstats/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('AdminstatsController', AdminstatsController);\n\n    AdminstatsController.$inject = ['$state', 'Adminstats', 'AdminstatsSearch', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function AdminstatsController($state, Adminstats, AdminstatsSearch, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.clear = clear;\n        vm.search = search;\n        vm.loadAll = loadAll;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n\n        loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                AdminstatsSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                Adminstats.query({\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.adminstats = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search(searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear() {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .filter('words', words);\n\n    function words() {\n        return wordsFilter;\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n            return input;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .filter('characters', characters);\n\n    function characters () {\n        return charactersFilter;\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length-1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .directive('jhSortBy', jhSortBy);\n\n    function jhSortBy() {\n        var directive = {\n            restrict: 'A',\n            scope: false,\n            require: '^jhSort',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs, parentCtrl) {\n            element.bind('click', function () {\n                parentCtrl.sort(attrs.jhSortBy);\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .directive('jhSort', jhSort);\n\n    function jhSort () {\n        var directive = {\n            restrict: 'A',\n            scope: {\n                predicate: '=jhSort',\n                ascending: '=',\n                callback: '&'\n            },\n            controller: SortController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n    }\n\n    SortController.$inject = ['$scope', '$element'];\n\n    function SortController ($scope, $element) {\n        var vm = this;\n\n        vm.applyClass = applyClass;\n        vm.resetClasses = resetClasses;\n        vm.sort = sort;\n        vm.triggerApply = triggerApply;\n\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\n        vm.triggerApply();\n\n        function applyClass (element) {\n            var thisIcon = element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\n                remove = sortIcon + ' ' + sortDesc,\n                add = sortAsc;\n            if (!vm.ascending) {\n                remove = sortIcon + ' ' + sortAsc;\n                add = sortDesc;\n            }\n            vm.resetClasses();\n            thisIcon.removeClass(remove);\n            thisIcon.addClass(add);\n        }\n\n        function resetClasses () {\n            var allThIcons = $element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\n            allThIcons.addClass(sortIcon);\n        }\n\n        function sort (field) {\n            if (field !== vm.predicate) {\n                vm.ascending = true;\n            } else {\n                vm.ascending = !vm.ascending;\n            }\n            vm.predicate = field;\n            $scope.$apply();\n            vm.callback();\n        }\n\n        function triggerApply (values)  {\n            vm.resetClasses();\n            if (values && values[0] !== '_score') {\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\n            }\n        }\n    }\n})();\n","(function(){\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('ParseLinks', ParseLinks);\n\n    function ParseLinks () {\n\n        var service = {\n            parse : parse\n        };\n\n        return service;\n\n        function parse(header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, function(p) {\n                var section = p.split('>;');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \">;\"');\n                }\n                var url = section[0].replace(/<(.*)/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\n                );\n                var page = queryString.page;\n                if (angular.isString(page)) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            });\n            return links;\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('PaginationUtil', PaginationUtil);\n\n    function PaginationUtil () {\n\n        var service = {\n            parseAscending : parseAscending,\n            parsePage : parsePage,\n            parsePredicate : parsePredicate\n        };\n\n        return service;\n\n        function parseAscending (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                return sort.split(',').slice(-1)[0] === 'asc';\n            } else {\n                // default to true if no sort defined\n                return true;\n            }\n        }\n\n        // query params are strings, and need to be parsed\n        function parsePage (page) {\n            return parseInt(page);\n        }\n\n        // sort can be in the format `id,asc` or `id`\n        function parsePredicate (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                sortArray.pop();\n            }\n            return sortArray.join(',');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    var jhiItemCount = {\n        template: '<div class=\"info\" data-translate=\"global.item-count\" ' +\n        'translate-value-first=\"{{(($ctrl.page - 1) * $ctrl.itemsPerPage) == 0 ? 1 : (($ctrl.page - 1) * $ctrl.itemsPerPage + 1)}}\" ' +\n        'translate-value-second=\"{{($ctrl.page * $ctrl.itemsPerPage) < $ctrl.queryCount ? ($ctrl.page * $ctrl.itemsPerPage) : $ctrl.queryCount}}\" ' +\n        'translate-value-total=\"{{$ctrl.queryCount}}\">' +\n        'Showing {{(($ctrl.page - 1) * $ctrl.itemsPerPage) == 0 ? 1 : (($ctrl.page - 1) * $ctrl.itemsPerPage + 1)}} - ' +\n        '{{($ctrl.page * $ctrl.itemsPerPage) < $ctrl.queryCount ? ($ctrl.page * $ctrl.itemsPerPage) : $ctrl.queryCount}} ' +\n        'of {{$ctrl.queryCount}} items.' +\n        '</div>',\n        bindings: {\n            page: '<',\n            queryCount: '<total',\n            itemsPerPage: '<'\n        }\n    };\n\n    angular\n        .module('cafvalidityV2App')\n        .component('jhiItemCount', jhiItemCount);\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('DateUtils', DateUtils);\n\n    DateUtils.$inject = ['$filter'];\n\n    function DateUtils($filter) {\n\n        var service = {\n            convertDateTimeFromServer: convertDateTimeFromServer,\n            convertLocalDateFromServer: convertLocalDateFromServer,\n            convertLocalDateToServer: convertLocalDateToServer,\n            dateformat: dateformat\n        };\n\n        return service;\n\n        function convertDateTimeFromServer(date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function convertLocalDateFromServer(date) {\n            if (date) {\n                var dateString = date.split('-');\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\n            }\n            return null;\n        }\n\n        function convertLocalDateToServer(date) {\n            if (date) {\n                return $filter('date')(date, 'yyyy-MM-dd');\n            } else {\n                return null;\n            }\n        }\n\n        function dateformat() {\n            return 'yyyy-MM-dd';\n        }\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('DataUtils', DataUtils);\n\n    DataUtils.$inject = ['$window'];\n\n    function DataUtils ($window) {\n\n        var service = {\n            abbreviate: abbreviate,\n            byteSize: byteSize,\n            openFile: openFile,\n            toBase64: toBase64\n        };\n\n        return service;\n\n        function abbreviate (text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize (base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile (type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64 (file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = function (e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            };\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .filter('capitalize', capitalize);\n\n    function capitalize() {\n        return capitalizeFilter;\n\n        function capitalizeFilter (input) {\n            if (input !== null) {\n                input = input.toLowerCase();\n                input = input.substring(0, 1).toUpperCase() + input.substring(1);\n            }\n            return input;\n        }\n    }\n})();\n","(function() {\n    /*jshint bitwise: false*/\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('Base64', Base64);\n\n    function Base64 () {\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\n            'QRSTUVWXYZabcdef' +\n            'ghijklmnopqrstuv' +\n            'wxyz0123456789+/' +\n            '=';\n\n        var service = {\n            decode : decode,\n            encode : encode\n        };\n\n        return service;\n\n        function encode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n            }\n\n            return output;\n        }\n\n        function decode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n            }\n\n            return output;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('LoginService', LoginService);\n\n    LoginService.$inject = ['$uibModal'];\n\n    function LoginService ($uibModal) {\n        var service = {\n            open: open\n        };\n\n        var modalInstance = null;\n        var resetModal = function () {\n            modalInstance = null;\n        };\n\n        return service;\n\n        function open () {\n            if (modalInstance !== null) return;\n            modalInstance = $uibModal.open({\n                animation: true,\n                templateUrl: 'app/components/login/login.html',\n                controller: 'LoginController',\n                controllerAs: 'vm'\n            });\n            modalInstance.result.then(\n                resetModal,\n                resetModal\n            );\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('LoginController', LoginController);\n\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth', '$uibModalInstance'];\n\n    function LoginController ($rootScope, $state, $timeout, Auth, $uibModalInstance) {\n        var vm = this;\n\n        vm.authenticationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {};\n        vm.login = login;\n        vm.password = null;\n        vm.register = register;\n        vm.rememberMe = true;\n        vm.requestResetPassword = requestResetPassword;\n        vm.username = null;\n\n        $timeout(function (){angular.element('#username').focus();});\n\n        function cancel () {\n            vm.credentials = {\n                username: null,\n                password: null,\n                rememberMe: true\n            };\n            vm.authenticationError = false;\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function login (event) {\n            event.preventDefault();\n            Auth.login({\n                username: vm.username,\n                password: vm.password,\n                rememberMe: vm.rememberMe\n            }).then(function () {\n                vm.authenticationError = false;\n                $uibModalInstance.close();\n                if ($state.current.name === 'register' || $state.current.name === 'activate' ||\n                    $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {\n                    $state.go('home');\n                }\n\n                $rootScope.$broadcast('authenticationSuccess');\n\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\n                // since login is successful, go to stored previousState and clear previousState\n                if (Auth.getPreviousState()) {\n                    var previousState = Auth.getPreviousState();\n                    Auth.resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n            }).catch(function () {\n                vm.authenticationError = true;\n            });\n        }\n\n        function register () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('register');\n        }\n\n        function requestResetPassword () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('requestReset');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .directive('showValidation', showValidation);\n\n    function showValidation () {\n        var directive = {\n            restrict: 'A',\n            require: 'form',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, formCtrl) {\n            element.find('.form-group').each(function() {\n                var $formGroup = angular.element(this);\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\n\n                if ($inputs.length > 0) {\n                    $inputs.each(function() {\n                        var $input = angular.element(this);\n                        var inputName = $input.attr('name');\n                        scope.$watch(function() {\n                            return formCtrl[inputName].$invalid && formCtrl[inputName].$dirty;\n                        }, function(isInvalid) {\n                            $formGroup.toggleClass('has-error', isInvalid);\n                        });\n                    });\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .constant('paginationConstants', {\n            'itemsPerPage': 20\n        });\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .directive('minbytes', minbytes);\n\n    function minbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .directive('maxbytes', maxbytes);\n\n    function maxbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    var jhiAlertError = {\n        template: '<div class=\"alerts\" ng-cloak=\"\" role=\"alert\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertErrorController\n    };\n\n    angular\n        .module('cafvalidityV2App')\n        .component('jhiAlertError', jhiAlertError);\n\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope'];\n\n    function jhiAlertErrorController ($scope, AlertService, $rootScope) {\n        var vm = this;\n\n        vm.alerts = [];\n\n        function addErrorAlert (message, key, data) {\n            vm.alerts.push(\n                AlertService.add(\n                    {\n                        type: 'danger',\n                        msg: message,\n                        timeout: 5000,\n                        toast: AlertService.isToast(),\n                        scoped: true\n                    },\n                    vm.alerts\n                )\n            );\n        }\n\n        var cleanHttpErrorListener = $rootScope.$on('cafvalidityV2App.httpError', function (event, httpResponse) {\n            var i;\n            event.stopPropagation();\n            switch (httpResponse.status) {\n            // connection refused, server not reachable\n            case 0:\n                addErrorAlert('Server not reachable','error.server.not.reachable');\n                break;\n\n            case 400:\n                var headers = Object.keys(httpResponse.headers()).filter(function (header) {\n                    return header.indexOf('app-error', header.length - 'app-error'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n                }).sort();\n                var errorHeader = httpResponse.headers(headers[0]);\n                var entityKey = httpResponse.headers(headers[1]);\n                if (angular.isString(errorHeader)) {\n                    var entityName = entityKey;\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\n                        var fieldError = httpResponse.data.fieldErrors[i];\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                        var fieldName = convertedField.charAt(0).toUpperCase() + convertedField.slice(1);\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\n                    }\n                } else if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\n                } else {\n                    addErrorAlert(httpResponse.data);\n                }\n                break;\n\n            case 404:\n                addErrorAlert('Not found','error.url.not.found');\n                break;\n\n            default:\n                if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message);\n                } else {\n                    addErrorAlert(angular.toJson(httpResponse));\n                }\n            }\n        });\n\n        $scope.$on('$destroy', function () {\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\n                cleanHttpErrorListener();\n                vm.alerts = [];\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .provider('AlertService', AlertService);\n\n    function AlertService () {\n        this.toast = false;\n        /*jshint validthis: true */\n        this.$get = getService;\n\n        this.showAsToast = function(isToast) {\n            this.toast = isToast;\n        };\n\n        getService.$inject = ['$timeout', '$sce'];\n\n        function getService ($timeout, $sce) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                timeout = 5000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                clear: clear,\n                get: get,\n                success: success,\n                error: error,\n                info: info,\n                warning : warning\n            };\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts = [];\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function success(msg, params, position) {\n                return this.add({\n                    type: 'success',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function error(msg, params, position) {\n                return this.add({\n                    type: 'danger',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function warning(msg, params, position) {\n                return this.add({\n                    type: 'warning',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function info(msg, params, position) {\n                return this.add({\n                    type: 'info',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if(!alert.scoped) {\n                    alerts.push(alert);\n                }\n                return alert;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                alertOptions.alertId = alertId++;\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(function () {\n                        that.closeAlert(alertOptions.alertId, extAlerts);\n                    }, alertOptions.timeout);\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    var jhiAlert = {\n        template: '<div class=\"alerts\" ng-cloak=\"\" role=\"alert\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre ng-bind-html=\"alert.msg\"></pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertController\n    };\n\n    angular\n        .module('cafvalidityV2App')\n        .component('jhiAlert', jhiAlert);\n\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\n\n    function jhiAlertController($scope, AlertService) {\n        var vm = this;\n\n        vm.alerts = AlertService.get();\n        $scope.$on('$destroy', function () {\n            vm.alerts = [];\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('notificationInterceptor', notificationInterceptor);\n\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\n\n    function notificationInterceptor ($q, AlertService) {\n        var service = {\n            response: response\n        };\n\n        return service;\n\n        function response (response) {\n            var headers = Object.keys(response.headers()).filter(function (header) {\n                return header.indexOf('app-alert', header.length - 'app-alert'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n            }).sort();\n            var alertKey = response.headers(headers[0]);\n            if (angular.isString(alertKey)) {\n                AlertService.success(alertKey, { param : response.headers(headers[1])});\n            }\n            return response;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\n\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\n\n    function errorHandlerInterceptor ($q, $rootScope) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError (response) {\n            if (!(response.status === 401 && (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account') === 0 )))) {\n                $rootScope.$emit('cafvalidityV2App.httpError', response);\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\n\n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector', '$localStorage', '$sessionStorage'];\n\n    function authExpiredInterceptor($rootScope, $q, $injector, $localStorage, $sessionStorage) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError(response) {\n            if (response.status === 401) {\n                delete $localStorage.authenticationToken;\n                delete $sessionStorage.authenticationToken;\n                var Principal = $injector.get('Principal');\n                if (Principal.isAuthenticated()) {\n                    var Auth = $injector.get('Auth');\n                    Auth.authorize(true);\n                }\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('authInterceptor', authInterceptor);\n\n    authInterceptor.$inject = ['$rootScope', '$q', '$location', '$localStorage', '$sessionStorage'];\n\n    function authInterceptor ($rootScope, $q, $location, $localStorage, $sessionStorage) {\n        var service = {\n            request: request\n        };\n\n        return service;\n\n        function request (config) {\n            /*jshint camelcase: false */\n            config.headers = config.headers || {};\n            var token = $localStorage.authenticationToken || $sessionStorage.authenticationToken;\n            if (token) {\n                config.headers.Authorization = 'Bearer ' + token;\n            }\n            return config;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('stateHandler', stateHandler);\n\n    stateHandler.$inject = ['$rootScope', '$state', '$sessionStorage',  '$window',\n        'Auth', 'Principal', 'VERSION'];\n\n    function stateHandler($rootScope, $state, $sessionStorage,  $window,\n        Auth, Principal, VERSION) {\n        return {\n            initialize: initialize\n        };\n\n        function initialize() {\n            $rootScope.VERSION = VERSION;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams, fromState) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n                $rootScope.fromState = fromState;\n\n                // Redirect to a state with an external URL (http://stackoverflow.com/a/30221248/1098564)\n                if (toState.external) {\n                    event.preventDefault();\n                    $window.open(toState.url, '_self');\n                }\n\n                if (Principal.isIdentityResolved()) {\n                    Auth.authorize();\n                }\n\n            });\n\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'cafvalidity_v2' ;\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                $window.document.title = titleKey;\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\n                    stateChangeSuccess();\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(paginationConfig);\n\n    paginationConfig.$inject = ['uibPaginationConfig', 'paginationConstants'];\n\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPaginationConfig.maxSize = 5;\n        uibPaginationConfig.boundaryLinks = true;\n        uibPaginationConfig.firstText = '«';\n        uibPaginationConfig.previousText = '‹';\n        uibPaginationConfig.nextText = '›';\n        uibPaginationConfig.lastText = '»';\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(pagerConfig);\n\n    pagerConfig.$inject = ['uibPagerConfig', 'paginationConstants'];\n\n    function pagerConfig(uibPagerConfig, paginationConstants) {\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPagerConfig.previousText = '«';\n        uibPagerConfig.nextText = '»';\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = ['$localStorageProvider', '$sessionStorageProvider'];\n\n    function localStorageConfig($localStorageProvider, $sessionStorageProvider) {\n        $localStorageProvider.setKeyPrefix('jhi-');\n        $sessionStorageProvider.setKeyPrefix('jhi-');\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(httpConfig);\n\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\n\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('authExpiredInterceptor');\n        $httpProvider.interceptors.push('authInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\n\n        $urlMatcherFactoryProvider.type('boolean', {\n            name : 'boolean',\n            decode: function(val) { return val === true || val === 'true'; },\n            encode: function(val) { return val ? 1 : 0; },\n            equals: function(a, b) { return this.is(a) && a === b; },\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\n            pattern: /bool|true|0|1/\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(compileServiceConfig);\n\n    compileServiceConfig.$inject = ['$compileProvider','DEBUG_INFO_ENABLED'];\n\n    function compileServiceConfig($compileProvider,DEBUG_INFO_ENABLED) {\n        // disable debug data on prod profile to improve performance\n        $compileProvider.debugInfoEnabled(DEBUG_INFO_ENABLED);\n\n        /*\n        If you wish to debug an application with this information\n        then you should open up a debug console in the browser\n        then call this method directly in this console:\n\n\t\tangular.reloadWithDebugInfo();\n\t\t*/\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(alertServiceConfig);\n\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\n\n    function alertServiceConfig(AlertServiceProvider) {\n        // set below to true to make alerts look like toast\n        AlertServiceProvider.showAsToast(false);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                authorize: ['Auth',\n                    function (Auth) {\n                        return Auth.authorize();\n                    }\n                ]\n            }\n        });\n    }\n})();\n","(function () {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('cafvalidityV2App')\n        .constant('VERSION', \"0.0.1-SNAPSHOT\")\n        .constant('DEBUG_INFO_ENABLED', false)\n        .constant('BUILD_TIMESTAMP', 1518557892966)\n;\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('UserManagementDialogController',UserManagementDialogController);\n\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDialogController ($stateParams, $uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.languages = null;\n        vm.save = save;\n        vm.user = entity;\n\n\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function onSaveSuccess (result) {\n            vm.isSaving = false;\n            $uibModalInstance.close(result);\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.user.id !== null) {\n                User.update(vm.user, onSaveSuccess, onSaveError);\n            } else {\n                vm.user.langKey = 'en';\n                User.save(vm.user, onSaveSuccess, onSaveError);\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('UserManagementDetailController', UserManagementDetailController);\n\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\n\n    function UserManagementDetailController($stateParams, User) {\n        var vm = this;\n\n        vm.load = load;\n        vm.user = {};\n\n        vm.load($stateParams.login);\n\n        function load(login) {\n            User.get({login: login}, function(result) {\n                vm.user = result;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\n\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.user = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (login) {\n            User.delete({login: login},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('user-management', {\n            parent: 'admin',\n            url: '/user-management?page&sort',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Users'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management.html',\n                    controller: 'UserManagementController',\n                    controllerAs: 'vm'\n                }\n            },            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                }\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort)\n                    };\n                }]\n            }        })\n        .state('user-management.new', {\n            url: '/new',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                id: null, login: null, firstName: null, lastName: null, email: null,\n                                activated: true, langKey: null, createdBy: null, createdDate: null,\n                                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                                resetKey: null, authorities: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('user-management');\n                });\n            }]\n        })\n        .state('user-management.edit', {\n            url: '/{login}/edit',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('user-management-detail', {\n            parent: 'user-management',\n            url: '/{login}',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'cafvalidity_v2'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management-detail.html',\n                    controller: 'UserManagementDetailController',\n                    controllerAs: 'vm'\n                }\n            }\n        })\n        .state('user-management.delete', {\n            url: '/{login}/delete',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\n                    controller: 'UserManagementDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('UserManagementController', UserManagementController);\n\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'AlertService', '$state', 'pagingParams', 'paginationConstants'];\n\n    function UserManagementController(Principal, User, ParseLinks, AlertService, $state, pagingParams, paginationConstants) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.currentAccount = null;\n        vm.languages = null;\n        vm.loadAll = loadAll;\n        vm.setActive = setActive;\n        vm.users = [];\n        vm.page = 1;\n        vm.totalItems = null;\n        vm.clear = clear;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.transition = transition;\n\n        vm.loadAll();\n        Principal.identity().then(function(account) {\n            vm.currentAccount = account;\n        });\n\n        function setActive (user, isActivated) {\n            user.activated = isActivated;\n            User.update(user, function () {\n                vm.loadAll();\n                vm.clear();\n            });\n        }\n\n        function loadAll () {\n            User.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n        }\n\n        function onSuccess(data, headers) {\n            vm.links = ParseLinks.parse(headers('link'));\n            vm.totalItems = headers('X-Total-Count');\n            vm.queryCount = vm.totalItems;\n            vm.page = pagingParams.page;\n            vm.users = data;\n        }\n\n        function onError(error) {\n            AlertService.error(error.data.message);\n        }\n\n        function clear () {\n            vm.user = {\n                id: null, login: null, firstName: null, lastName: null, email: null,\n                activated: null, langKey: null, createdBy: null, createdDate: null,\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                resetKey: null, authorities: null\n            };\n        }\n\n        function sort () {\n            var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n            if (vm.predicate !== 'id') {\n                result.push('id');\n            }\n            return result;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-metrics', {\n            parent: 'admin',\n            url: '/metrics',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Application Metrics'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/metrics/metrics.html',\n                    controller: 'JhiMetricsMonitoringController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('JhiMetricsService', JhiMetricsService);\n\n    JhiMetricsService.$inject = ['$rootScope', '$http'];\n\n    function JhiMetricsService ($rootScope, $http) {\n        var service = {\n            getMetrics: getMetrics,\n            threadDump: threadDump\n        };\n\n        return service;\n\n        function getMetrics () {\n            return $http.get('management/metrics').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function threadDump () {\n            return $http.get('management/dump').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('JhiMetricsMonitoringModalController', JhiMetricsMonitoringModalController);\n\n    JhiMetricsMonitoringModalController.$inject = ['$uibModalInstance', 'threadDump'];\n\n    function JhiMetricsMonitoringModalController ($uibModalInstance, threadDump) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.getLabelClass = getLabelClass;\n        vm.threadDump = threadDump;\n        vm.threadDumpAll = 0;\n        vm.threadDumpBlocked = 0;\n        vm.threadDumpRunnable = 0;\n        vm.threadDumpTimedWaiting = 0;\n        vm.threadDumpWaiting = 0;\n\n        angular.forEach(threadDump, function(value) {\n            if (value.threadState === 'RUNNABLE') {\n                vm.threadDumpRunnable += 1;\n            } else if (value.threadState === 'WAITING') {\n                vm.threadDumpWaiting += 1;\n            } else if (value.threadState === 'TIMED_WAITING') {\n                vm.threadDumpTimedWaiting += 1;\n            } else if (value.threadState === 'BLOCKED') {\n                vm.threadDumpBlocked += 1;\n            }\n        });\n\n        vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +\n            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;\n\n        function cancel () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function getLabelClass (threadState) {\n            if (threadState === 'RUNNABLE') {\n                return 'label-success';\n            } else if (threadState === 'WAITING') {\n                return 'label-info';\n            } else if (threadState === 'TIMED_WAITING') {\n                return 'label-warning';\n            } else if (threadState === 'BLOCKED') {\n                return 'label-danger';\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('JhiMetricsMonitoringController', JhiMetricsMonitoringController);\n\n    JhiMetricsMonitoringController.$inject = ['$scope','JhiMetricsService', '$uibModal'];\n\n    function JhiMetricsMonitoringController ($scope, JhiMetricsService, $uibModal) {\n        var vm = this;\n\n        vm.cachesStats = {};\n        vm.metrics = {};\n        vm.refresh = refresh;\n        vm.refreshThreadDumpData = refreshThreadDumpData;\n        vm.servicesStats = {};\n        vm.updatingMetrics = true;\n\n        vm.refresh();\n\n        $scope.$watch('vm.metrics', function (newValue) {\n            vm.servicesStats = {};\n            angular.forEach(newValue.timers, function (value, key) {\n                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                    vm.servicesStats[key] = value;\n                }\n            });\n\n            vm.cachesStats = {};\n            angular.forEach(newValue.gauges, function (value, key) {\n                if (key.indexOf('jcache.statistics') !== -1) {\n                    // remove gets or puts\n                    var index = key.lastIndexOf('.');\n                    var newKey = key.substr(0, index);\n\n                    // Keep the name of the domain\n                    vm.cachesStats[newKey] = {\n                        'name': newKey.substr(18),\n                        'value': value\n                    };\n                }\n            });\n        });\n\n        function refresh () {\n            vm.updatingMetrics = true;\n            JhiMetricsService.getMetrics().then(function (promise) {\n                vm.metrics = promise;\n                vm.updatingMetrics = false;\n            }, function (promise) {\n                vm.metrics = promise.data;\n                vm.updatingMetrics = false;\n            });\n        }\n\n        function refreshThreadDumpData () {\n            JhiMetricsService.threadDump().then(function(data) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/metrics/metrics.modal.html',\n                    controller: 'JhiMetricsMonitoringModalController',\n                    controllerAs: 'vm',\n                    size: 'lg',\n                    resolve: {\n                        threadDump: function() {\n                            return data;\n                        }\n\n                    }\n                });\n            });\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('logs', {\n            parent: 'admin',\n            url: '/logs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Logs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/logs/logs.html',\n                    controller: 'LogsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('LogsService', LogsService);\n\n    LogsService.$inject = ['$resource'];\n\n    function LogsService ($resource) {\n        var service = $resource('management/logs', {}, {\n            'findAll': { method: 'GET', isArray: true},\n            'changeLevel': { method: 'PUT'}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('LogsController', LogsController);\n\n    LogsController.$inject = ['LogsService'];\n\n    function LogsController (LogsService) {\n        var vm = this;\n\n        vm.changeLevel = changeLevel;\n        vm.loggers = LogsService.findAll();\n\n        function changeLevel (name, level) {\n            LogsService.changeLevel({name: name, level: level}, function () {\n                vm.loggers = LogsService.findAll();\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-health', {\n            parent: 'admin',\n            url: '/health',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Health Checks'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/health/health.html',\n                    controller: 'JhiHealthCheckController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('JhiHealthService', JhiHealthService);\n\n    JhiHealthService.$inject = ['$rootScope', '$http'];\n\n    function JhiHealthService ($rootScope, $http) {\n        var separator = '.';\n        var service = {\n            checkHealth: checkHealth,\n            transformHealthData: transformHealthData,\n            getBaseName: getBaseName,\n            getSubSystemName: getSubSystemName\n        };\n\n        return service;\n\n        function checkHealth () {\n            return $http.get('management/health').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function transformHealthData (data) {\n            var response = [];\n            flattenHealthData(response, null, data);\n            return response;\n        }\n\n        function getBaseName (name) {\n            if (name) {\n                var split = name.split('.');\n                return split[0];\n            }\n        }\n\n        function getSubSystemName (name) {\n            if (name) {\n                var split = name.split('.');\n                split.splice(0, 1);\n                var remainder = split.join('.');\n                return remainder ? ' - ' + remainder : '';\n            }\n        }\n\n        /* private methods */\n        function flattenHealthData (result, path, data) {\n            angular.forEach(data, function (value, key) {\n                if (isHealthObject(value)) {\n                    if (hasSubSystem(value)) {\n                        addHealthObject(result, false, value, getModuleName(path, key));\n                        flattenHealthData(result, getModuleName(path, key), value);\n                    } else {\n                        addHealthObject(result, true, value, getModuleName(path, key));\n                    }\n                }\n            });\n            return result;\n        }\n\n        function addHealthObject (result, isLeaf, healthObject, name) {\n\n            var healthData = {\n                'name': name\n            };\n            var details = {};\n            var hasDetails = false;\n\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            });\n\n            // Add the of the details\n            if (hasDetails) {\n                angular.extend(healthData, { 'details': details});\n            }\n\n            // Only add nodes if they provide additional information\n            if (isLeaf || hasDetails || healthData.error) {\n                result.push(healthData);\n            }\n            return healthData;\n        }\n\n        function getModuleName (path, name) {\n            var result;\n            if (path && name) {\n                result = path + separator + name;\n            }  else if (path) {\n                result = path;\n            } else if (name) {\n                result = name;\n            } else {\n                result = '';\n            }\n            return result;\n        }\n\n        function hasSubSystem (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value) {\n                if (value && value.status) {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function isHealthObject (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status') {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular.module('cafvalidityV2App')\n        .controller('HealthModalController', HealthModalController);\n\n    HealthModalController.$inject = ['$uibModalInstance', 'currentHealth', 'baseName', 'subSystemName'];\n\n    function HealthModalController ($uibModalInstance, currentHealth, baseName, subSystemName) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.currentHealth = currentHealth;\n        vm.baseName = baseName;\n        vm.subSystemName = subSystemName;\n\n        function cancel() {\n            $uibModalInstance.dismiss('cancel');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('JhiHealthCheckController', JhiHealthCheckController);\n\n    JhiHealthCheckController.$inject = ['JhiHealthService', '$uibModal'];\n\n    function JhiHealthCheckController (JhiHealthService, $uibModal) {\n        var vm = this;\n\n        vm.updatingHealth = true;\n        vm.getLabelClass = getLabelClass;\n        vm.refresh = refresh;\n        vm.showHealth = showHealth;\n        vm.baseName = JhiHealthService.getBaseName;\n        vm.subSystemName = JhiHealthService.getSubSystemName;\n\n        vm.refresh();\n\n        function getLabelClass (statusState) {\n            if (statusState === 'UP') {\n                return 'label-success';\n            } else {\n                return 'label-danger';\n            }\n        }\n\n        function refresh () {\n            vm.updatingHealth = true;\n            JhiHealthService.checkHealth().then(function (response) {\n                vm.healthData = JhiHealthService.transformHealthData(response);\n                vm.updatingHealth = false;\n            }, function (response) {\n                vm.healthData =  JhiHealthService.transformHealthData(response.data);\n                vm.updatingHealth = false;\n            });\n        }\n\n        function showHealth (health) {\n            $uibModal.open({\n                templateUrl: 'app/admin/health/health.modal.html',\n                controller: 'HealthModalController',\n                controllerAs: 'vm',\n                size: 'lg',\n                resolve: {\n                    currentHealth: function() {\n                        return health;\n                    },\n                    baseName: function() {\n                        return vm.baseName;\n                    },\n                    subSystemName: function() {\n                        return vm.subSystemName;\n                    }\n\n                }\n            });\n        }\n\n    }\n})();\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('cafvalidityV2App')\r\n        .controller('ElasticsearchReindexDialogController', ElasticsearchReindexDialogController);\r\n\r\n    ElasticsearchReindexDialogController.$inject = ['$uibModalInstance', 'ElasticsearchReindex'];\r\n\r\n    function ElasticsearchReindexDialogController($uibModalInstance, ElasticsearchReindex) {\r\n        var vm = this;\r\n\r\n        vm.clear = clear;\r\n        vm.confirmReindex = confirmReindex;\r\n\r\n        function clear() {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmReindex() {\r\n            ElasticsearchReindex.reindex(function () {\r\n                $uibModalInstance.close(true);\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('cafvalidityV2App')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('elasticsearch-reindex', {\r\n            parent: 'admin',\r\n            url: '/elasticsearch-reindex',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'elasticsearch.reindex.title'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/elasticsearch-reindex/elasticsearch-reindex.html',\r\n                    controller: 'ElasticsearchReindexController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\r\n                    $translatePartialLoader.addPart('elasticsearch-reindex');\r\n                    $translatePartialLoader.addPart('global');\r\n                    return $translate.refresh();\r\n                }]\r\n            }\r\n        }).state('elasticsearch-reindex.dialog', {\r\n            parent: 'elasticsearch-reindex',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/admin/elasticsearch-reindex/elasticsearch-reindex-dialog.html',\r\n                    controller: 'ElasticsearchReindexDialogController',\r\n                    controllerAs: 'vm',\r\n                    size: 'sm'\r\n                }).result.finally(function () {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('cafvalidityV2App')\r\n        .factory('ElasticsearchReindex', ElasticsearchReindex);\r\n\r\n    ElasticsearchReindex.$inject = ['$resource'];\r\n\r\n    function ElasticsearchReindex($resource) {\r\n        var service = $resource('api/elasticsearch/index', {}, {\r\n            'reindex': {method: 'POST'}\r\n        });\r\n\r\n        return service;\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('cafvalidityV2App')\r\n        .controller('ElasticsearchReindexController', ElasticsearchReindexController);\r\n\r\n    ElasticsearchReindexController.$inject = [];\r\n\r\n    function ElasticsearchReindexController() {\r\n    }\r\n})();\r\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('docs', {\n            parent: 'admin',\n            url: '/docs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'API'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/docs/docs.html'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-configuration', {\n            parent: 'admin',\n            url: '/configuration',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Configuration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/configuration/configuration.html',\n                    controller: 'JhiConfigurationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('JhiConfigurationService', JhiConfigurationService);\n\n    JhiConfigurationService.$inject = ['$filter', '$http'];\n\n    function JhiConfigurationService ($filter, $http) {\n        var service = {\n            get: get,\n            getEnv: getEnv\n        };\n\n        return service;\n\n        function get () {\n            return $http.get('management/configprops').then(getConfigPropsComplete);\n\n            function getConfigPropsComplete (response) {\n                var properties = [];\n                angular.forEach(response.data, function (data) {\n                    properties.push(data);\n                });\n                var orderBy = $filter('orderBy');\n                return orderBy(properties, 'prefix');\n            }\n        }\n\n        function getEnv () {\n            return $http.get('management/env').then(getEnvComplete);\n\n            function getEnvComplete (response) {\n                var properties = {};\n                angular.forEach(response.data, function (val,key) {\n                    var vals = [];\n                    angular.forEach(val, function (v,k) {\n                        vals.push({ key:k, val:v });\n                    });\n                    properties[key] = vals;\n                });\n                return properties;\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('JhiConfigurationController', JhiConfigurationController);\n\n    JhiConfigurationController.$inject = ['$filter','JhiConfigurationService'];\n\n    function JhiConfigurationController (filter,JhiConfigurationService) {\n        var vm = this;\n\n        vm.allConfiguration = null;\n        vm.configuration = null;\n\n        JhiConfigurationService.get().then(function(configuration) {\n            vm.configuration = configuration;\n        });\n        JhiConfigurationService.getEnv().then(function (configuration) {\n            vm.allConfiguration = configuration;\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('audits', {\n            parent: 'admin',\n            url: '/audits',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Audits'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/audits/audits.html',\n                    controller: 'AuditsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('AuditsService', AuditsService);\n\n    AuditsService.$inject = ['$resource'];\n\n    function AuditsService ($resource) {\n        var service = $resource('management/audits/:id', {}, {\n            'get': {\n                method: 'GET',\n                isArray: true\n            },\n            'query': {\n                method: 'GET',\n                isArray: true,\n                params: {fromDate: null, toDate: null}\n            }\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('AuditsController', AuditsController);\n\n    AuditsController.$inject = ['$filter', 'AuditsService', 'ParseLinks'];\n\n    function AuditsController ($filter, AuditsService, ParseLinks) {\n        var vm = this;\n\n        vm.audits = null;\n        vm.fromDate = null;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.onChangeDate = onChangeDate;\n        vm.page = 1;\n        vm.previousMonth = previousMonth;\n        vm.toDate = null;\n        vm.today = today;\n        vm.totalItems = null;\n\n        vm.today();\n        vm.previousMonth();\n        vm.onChangeDate();\n\n        function onChangeDate () {\n            var dateFormat = 'yyyy-MM-dd';\n            var fromDate = $filter('date')(vm.fromDate, dateFormat);\n            var toDate = $filter('date')(vm.toDate, dateFormat);\n\n            AuditsService.query({page: vm.page -1, size: 20, fromDate: fromDate, toDate: toDate}, function(result, headers){\n                vm.audits = result;\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n            });\n        }\n\n        // Date picker configuration\n        function today () {\n            // Today + 1 day - needed if the current day must be included\n            var today = new Date();\n            vm.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n        }\n\n        function previousMonth () {\n            var fromDate = new Date();\n            if (fromDate.getMonth() === 0) {\n                fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());\n            } else {\n                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());\n            }\n\n            vm.fromDate = fromDate;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.onChangeDate();\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('admin', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('settings', {\n            parent: 'account',\n            url: '/settings',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Settings'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/settings/settings.html',\n                    controller: 'SettingsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SettingsController', SettingsController);\n\n    SettingsController.$inject = ['Principal', 'Auth'];\n\n    function SettingsController (Principal, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.save = save;\n        vm.settingsAccount = null;\n        vm.success = null;\n\n        /**\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\n         */\n        var copyAccount = function (account) {\n            return {\n                activated: account.activated,\n                email: account.email,\n                firstName: account.firstName,\n                langKey: account.langKey,\n                lastName: account.lastName,\n                login: account.login\n            };\n        };\n\n        Principal.identity().then(function(account) {\n            vm.settingsAccount = copyAccount(account);\n        });\n\n        function save () {\n            Auth.updateAccount(vm.settingsAccount).then(function() {\n                vm.error = null;\n                vm.success = 'OK';\n                Principal.identity(true).then(function(account) {\n                    vm.settingsAccount = copyAccount(account);\n                });\n            }).catch(function() {\n                vm.success = null;\n                vm.error = 'ERROR';\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('requestReset', {\n            parent: 'account',\n            url: '/reset/request',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/request/reset.request.html',\n                    controller: 'RequestResetController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('RequestResetController', RequestResetController);\n\n    RequestResetController.$inject = ['$timeout', 'Auth'];\n\n    function RequestResetController ($timeout, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.errorEmailNotExists = null;\n        vm.requestReset = requestReset;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#email').focus();});\n\n        function requestReset () {\n\n            vm.error = null;\n            vm.errorEmailNotExists = null;\n\n            Auth.resetPasswordInit(vm.resetAccount.email).then(function () {\n                vm.success = 'OK';\n            }).catch(function (response) {\n                vm.success = null;\n                if (response.status === 400 && response.data === 'email address not registered') {\n                    vm.errorEmailNotExists = 'ERROR';\n                } else {\n                    vm.error = 'ERROR';\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('finishReset', {\n            parent: 'account',\n            url: '/reset/finish?key',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/finish/reset.finish.html',\n                    controller: 'ResetFinishController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('ResetFinishController', ResetFinishController);\n\n    ResetFinishController.$inject = ['$stateParams', '$timeout', 'Auth', 'LoginService'];\n\n    function ResetFinishController ($stateParams, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.keyMissing = angular.isUndefined($stateParams.key);\n        vm.confirmPassword = null;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.finishReset = finishReset;\n        vm.login = LoginService.open;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#password').focus();});\n\n        function finishReset() {\n            vm.doNotMatch = null;\n            vm.error = null;\n            if (vm.resetAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                Auth.resetPasswordFinish({key: $stateParams.key, newPassword: vm.resetAccount.password}).then(function () {\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('register', {\n            parent: 'account',\n            url: '/register',\n            data: {\n                authorities: [],\n                pageTitle: 'Registration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/register/register.html',\n                    controller: 'RegisterController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('RegisterController', RegisterController);\n\n\n    RegisterController.$inject = [ '$timeout', 'Auth', 'LoginService'];\n\n    function RegisterController ($timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.errorUserExists = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        vm.registerAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#login').focus();});\n\n        function register () {\n            if (vm.registerAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.registerAccount.langKey =  'en' ;\n                vm.doNotMatch = null;\n                vm.error = null;\n                vm.errorUserExists = null;\n                vm.errorEmailExists = null;\n\n                Auth.createAccount(vm.registerAccount).then(function () {\n                    vm.success = 'OK';\n                }).catch(function (response) {\n                    vm.success = null;\n                    if (response.status === 400 && response.data === 'login already in use') {\n                        vm.errorUserExists = 'ERROR';\n                    } else if (response.status === 400 && response.data === 'email address already in use') {\n                        vm.errorEmailExists = 'ERROR';\n                    } else {\n                        vm.error = 'ERROR';\n                    }\n                });\n            }\n        }\n    }\n})();\n","/* globals $ */\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .directive('passwordStrengthBar', passwordStrengthBar);\n\n    function passwordStrengthBar () {\n        var directive = {\n            replace: true,\n            restrict: 'E',\n            template: '<div id=\"strength\">' +\n                '<small>Password strength:</small>' +\n                '<ul id=\"strengthBar\">' +\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\n                '</ul>' +\n                '</div>',\n            scope: {\n                passwordToCheck: '='\n            },\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods*/\n\n        function linkFunc(scope, iElement) {\n            var strength = {\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\n                mesureStrength: function (p) {\n\n                    var _force = 0;\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\n\n                    var _lowerLetters = /[a-z]+/.test(p);\n                    var _upperLetters = /[A-Z]+/.test(p);\n                    var _numbers = /[0-9]+/.test(p);\n                    var _symbols = _regex.test(p);\n\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\n                    var _passedMatches = $.grep(_flags, function (el) {\n                        return el === true;\n                    }).length;\n\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\n                    _force += _passedMatches * 10;\n\n                    // penalty (short password)\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\n\n                    // penalty (poor variety of characters)\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\n\n                    return _force;\n\n                },\n                getColor: function (s) {\n\n                    var idx;\n                    if (s <= 10) {\n                        idx = 0;\n                    }\n                    else if (s <= 20) {\n                        idx = 1;\n                    }\n                    else if (s <= 30) {\n                        idx = 2;\n                    }\n                    else if (s <= 40) {\n                        idx = 3;\n                    }\n                    else {\n                        idx = 4;\n                    }\n\n                    return { idx: idx + 1, col: this.colors[idx] };\n                }\n            };\n            scope.$watch('passwordToCheck', function (password) {\n                if (password) {\n                    var c = strength.getColor(strength.mesureStrength(password));\n                    iElement.removeClass('ng-hide');\n                    iElement.find('ul').children('li')\n                        .css({ 'background-color': '#DDD' })\n                        .slice(0, c.idx)\n                        .css({ 'background-color': c.col });\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('password', {\n            parent: 'account',\n            url: '/password',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Password'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/password/password.html',\n                    controller: 'PasswordController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('PasswordController', PasswordController);\n\n    PasswordController.$inject = ['Auth', 'Principal'];\n\n    function PasswordController (Auth, Principal) {\n        var vm = this;\n\n        vm.changePassword = changePassword;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.success = null;\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function changePassword () {\n            if (vm.password !== vm.confirmPassword) {\n                vm.error = null;\n                vm.success = null;\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.doNotMatch = null;\n                Auth.changePassword(vm.password).then(function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('activate', {\n            parent: 'account',\n            url: '/activate?key',\n            data: {\n                authorities: [],\n                pageTitle: 'Activation'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/activate/activate.html',\n                    controller: 'ActivationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('ActivationController', ActivationController);\n\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\n\n    function ActivationController ($stateParams, Auth, LoginService) {\n        var vm = this;\n\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\n            vm.error = null;\n            vm.success = 'OK';\n        }).catch(function () {\n            vm.success = null;\n            vm.error = 'ERROR';\n        });\n\n        vm.login = LoginService.open;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('account', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App', [\n            'ngStorage',\n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar'\n        ])\n        .run(run);\n\n    run.$inject = ['stateHandler'];\n\n    function run(stateHandler) {\n        stateHandler.initialize();\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('User', User);\n\n    User.$inject = ['$resource'];\n\n    function User ($resource) {\n        var service = $resource('api/users/:login', {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'save': { method:'POST' },\n            'update': { method:'PUT' },\n            'delete':{ method:'DELETE'}\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('ProfileService', ProfileService);\n\n    ProfileService.$inject = ['$http'];\n\n    function ProfileService($http) {\n\n        var dataPromise;\n\n        var service = {\n            getProfileInfo : getProfileInfo\n        };\n\n        return service;\n\n        function getProfileInfo() {\n            if (angular.isUndefined(dataPromise)) {\n                dataPromise = $http.get('api/profile-info').then(function(result) {\n                    if (result.data.activeProfiles) {\n                        var response = {};\n                        response.activeProfiles = result.data.activeProfiles;\n                        response.ribbonEnv = result.data.ribbonEnv;\n                        response.inProduction = result.data.activeProfiles.indexOf(\"prod\") !== -1;\n                        response.swaggerEnabled = result.data.activeProfiles.indexOf(\"swagger\") !== -1;\n                        return response;\n                    }\n                });\n            }\n            return dataPromise;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .directive('pageRibbon', pageRibbon);\n\n    pageRibbon.$inject = ['ProfileService', '$rootScope'];\n\n    function pageRibbon(ProfileService, $rootScope) {\n        var directive = {\n            replace : true,\n            restrict : 'AE',\n            template : '<div class=\"ribbon hidden\"><a href=\"\">{{ribbonEnv}}</a></div>',\n            link : linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            ProfileService.getProfileInfo().then(function(response) {\n                if (response.ribbonEnv) {\n                    scope.ribbonEnv = response.ribbonEnv;\n                    element.addClass(response.ribbonEnv);\n                    element.removeClass('hidden');\n                }\n            });\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('Register', Register);\n\n    Register.$inject = ['$resource'];\n\n    function Register ($resource) {\n        return $resource('api/register', {}, {});\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('Principal', Principal);\n\n    Principal.$inject = ['$q', 'Account'];\n\n    function Principal ($q, Account) {\n        var _identity,\n            _authenticated = false;\n\n        var service = {\n            authenticate: authenticate,\n            hasAnyAuthority: hasAnyAuthority,\n            hasAuthority: hasAuthority,\n            identity: identity,\n            isAuthenticated: isAuthenticated,\n            isIdentityResolved: isIdentityResolved\n        };\n\n        return service;\n\n        function authenticate (identity) {\n            _identity = identity;\n            _authenticated = identity !== null;\n        }\n\n        function hasAnyAuthority (authorities) {\n            if (!_authenticated || !_identity || !_identity.authorities) {\n                return false;\n            }\n\n            for (var i = 0; i < authorities.length; i++) {\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function hasAuthority (authority) {\n            if (!_authenticated) {\n                return $q.when(false);\n            }\n\n            return this.identity().then(function(_id) {\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\n            }, function(){\n                return false;\n            });\n        }\n\n        function identity (force) {\n            var deferred = $q.defer();\n\n            if (force === true) {\n                _identity = undefined;\n            }\n\n            // check and see if we have retrieved the identity data from the server.\n            // if we have, reuse it by immediately resolving\n            if (angular.isDefined(_identity)) {\n                deferred.resolve(_identity);\n\n                return deferred.promise;\n            }\n\n            // retrieve the identity data from the server, update the identity object, and then resolve.\n            Account.get().$promise\n                .then(getAccountThen)\n                .catch(getAccountCatch);\n\n            return deferred.promise;\n\n            function getAccountThen (account) {\n                _identity = account.data;\n                _authenticated = true;\n                deferred.resolve(_identity);\n            }\n\n            function getAccountCatch () {\n                _identity = null;\n                _authenticated = false;\n                deferred.resolve(_identity);\n            }\n        }\n\n        function isAuthenticated () {\n            return _authenticated;\n        }\n\n        function isIdentityResolved () {\n            return angular.isDefined(_identity);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('PasswordResetInit', PasswordResetInit);\n\n    PasswordResetInit.$inject = ['$resource'];\n\n    function PasswordResetInit($resource) {\n        var service = $resource('api/account/reset_password/init', {}, {});\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('PasswordResetFinish', PasswordResetFinish);\n\n    PasswordResetFinish.$inject = ['$resource'];\n\n    function PasswordResetFinish($resource) {\n        var service = $resource('api/account/reset_password/finish', {}, {});\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('Password', Password);\n\n    Password.$inject = ['$resource'];\n\n    function Password($resource) {\n        var service = $resource('api/account/change_password', {}, {});\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .directive('hasAuthority', hasAuthority);\n\n    hasAuthority.$inject = ['Principal'];\n\n    function hasAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    Principal.hasAuthority(authority)\n                        .then(function (result) {\n                            if (result) {\n                                setVisible();\n                            } else {\n                                setHidden();\n                            }\n                        });\n                };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .directive('hasAnyAuthority', hasAnyAuthority);\n\n    hasAnyAuthority.$inject = ['Principal'];\n\n    function hasAnyAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n                    var result;\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    result = Principal.hasAnyAuthority(authorities);\n                    if (result) {\n                        setVisible();\n                    } else {\n                        setHidden();\n                    }\n                };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('Auth', Auth);\n\n    Auth.$inject = ['$rootScope', '$state', '$sessionStorage', '$q', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'PasswordResetInit', 'PasswordResetFinish'];\n\n    function Auth ($rootScope, $state, $sessionStorage, $q, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, PasswordResetInit, PasswordResetFinish) {\n        var service = {\n            activateAccount: activateAccount,\n            authorize: authorize,\n            changePassword: changePassword,\n            createAccount: createAccount,\n            getPreviousState: getPreviousState,\n            login: login,\n            logout: logout,\n            loginWithToken: loginWithToken,\n            resetPasswordFinish: resetPasswordFinish,\n            resetPasswordInit: resetPasswordInit,\n            resetPreviousState: resetPreviousState,\n            storePreviousState: storePreviousState,\n            updateAccount: updateAccount\n        };\n\n        return service;\n\n        function activateAccount (key, callback) {\n            var cb = callback || angular.noop;\n\n            return Activate.get(key,\n                function (response) {\n                    return cb(response);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function authorize (force) {\n            var authReturn = Principal.identity(force).then(authThen);\n\n            return authReturn;\n\n            function authThen () {\n                var isAuthenticated = Principal.isAuthenticated();\n\n                // an authenticated user can't access to login and register pages\n                if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register' || $rootScope.toState.name === 'social-auth')) {\n                    $state.go('home');\n                }\n\n                // recover and clear previousState after external login redirect (e.g. oauth2)\n                if (isAuthenticated && !$rootScope.fromState.name && getPreviousState()) {\n                    var previousState = getPreviousState();\n                    resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\n                    if (isAuthenticated) {\n                        // user is signed in but not authorized for desired state\n                        $state.go('accessdenied');\n                    }\n                    else {\n                        // user is not authenticated. stow the state they wanted before you\n                        // send them to the login service, so you can return them when you're done\n                        storePreviousState($rootScope.toState.name, $rootScope.toStateParams);\n\n                        // now, send them to the signin state so they can log in\n                        $state.go('accessdenied').then(function() {\n                            LoginService.open();\n                        });\n                    }\n                }\n            }\n        }\n\n        function changePassword (newPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return Password.save(newPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function createAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Register.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    this.logout();\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function login (credentials, callback) {\n            var cb = callback || angular.noop;\n            var deferred = $q.defer();\n\n            AuthServerProvider.login(credentials)\n                .then(loginThen)\n                .catch(function (err) {\n                    this.logout();\n                    deferred.reject(err);\n                    return cb(err);\n                }.bind(this));\n\n            function loginThen (data) {\n                Principal.identity(true).then(function(account) {\n                    deferred.resolve(data);\n                });\n                return cb();\n            }\n\n            return deferred.promise;\n        }\n\n        function loginWithToken(jwt, rememberMe) {\n            return AuthServerProvider.loginWithToken(jwt, rememberMe);\n        }\n\n        function logout () {\n            AuthServerProvider.logout();\n            Principal.authenticate(null);\n        }\n\n        function resetPasswordFinish (keyAndPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetFinish.save(keyAndPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function resetPasswordInit (mail, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetInit.save(mail, function() {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function updateAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Account.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function getPreviousState() {\n            var previousState = $sessionStorage.previousState;\n            return previousState;\n        }\n\n        function resetPreviousState() {\n            delete $sessionStorage.previousState;\n        }\n\n        function storePreviousState(previousStateName, previousStateParams) {\n            var previousState = { \"name\": previousStateName, \"params\": previousStateParams };\n            $sessionStorage.previousState = previousState;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('AuthServerProvider', AuthServerProvider);\n\n    AuthServerProvider.$inject = ['$http', '$localStorage', '$sessionStorage', '$q'];\n\n    function AuthServerProvider ($http, $localStorage, $sessionStorage, $q) {\n        var service = {\n            getToken: getToken,\n            login: login,\n            loginWithToken: loginWithToken,\n            storeAuthenticationToken: storeAuthenticationToken,\n            logout: logout\n        };\n\n        return service;\n\n        function getToken () {\n            return $localStorage.authenticationToken || $sessionStorage.authenticationToken;\n        }\n\n        function login (credentials) {\n\n            var data = {\n                username: credentials.username,\n                password: credentials.password,\n                rememberMe: credentials.rememberMe\n            };\n            return $http.post('api/authenticate', data).success(authenticateSuccess);\n\n            function authenticateSuccess (data, status, headers) {\n                var bearerToken = headers('Authorization');\n                if (angular.isDefined(bearerToken) && bearerToken.slice(0, 7) === 'Bearer ') {\n                    var jwt = bearerToken.slice(7, bearerToken.length);\n                    service.storeAuthenticationToken(jwt, credentials.rememberMe);\n                    return jwt;\n                }\n            }\n        }\n\n        function loginWithToken(jwt, rememberMe) {\n            var deferred = $q.defer();\n\n            if (angular.isDefined(jwt)) {\n                this.storeAuthenticationToken(jwt, rememberMe);\n                deferred.resolve(jwt);\n            } else {\n                deferred.reject();\n            }\n\n            return deferred.promise;\n        }\n\n        function storeAuthenticationToken(jwt, rememberMe) {\n            if(rememberMe){\n                $localStorage.authenticationToken = jwt;\n            } else {\n                $sessionStorage.authenticationToken = jwt;\n            }\n        }\n\n        function logout () {\n            delete $localStorage.authenticationToken;\n            delete $sessionStorage.authenticationToken;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('Activate', Activate);\n\n    Activate.$inject = ['$resource'];\n\n    function Activate ($resource) {\n        var service = $resource('api/activate', {}, {\n            'get': { method: 'GET', params: {}, isArray: false}\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('Account', Account);\n\n    Account.$inject = ['$resource'];\n\n    function Account ($resource) {\n        var service = $resource('api/account', {}, {\n            'get': { method: 'GET', params: {}, isArray: false,\n                interceptor: {\n                    response: function(response) {\n                        // expose response\n                        return response;\n                    }\n                }\n            }\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = ['$state', 'Auth', 'Principal', 'ProfileService', 'LoginService'];\n\n    function NavbarController ($state, Auth, Principal, ProfileService, LoginService) {\n        var vm = this;\n\n        vm.isNavbarCollapsed = true;\n        vm.isAuthenticated = Principal.isAuthenticated;\n\n        ProfileService.getProfileInfo().then(function(response) {\n            vm.inProduction = response.inProduction;\n            vm.swaggerEnabled = response.swaggerEnabled;\n        });\n\n        vm.login = login;\n        vm.logout = logout;\n        vm.toggleNavbar = toggleNavbar;\n        vm.collapseNavbar = collapseNavbar;\n        vm.$state = $state;\n\n        function login() {\n            collapseNavbar();\n            LoginService.open();\n        }\n\n        function logout() {\n            collapseNavbar();\n            Auth.logout();\n            $state.go('home');\n        }\n\n        function toggleNavbar() {\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\n        }\n\n        function collapseNavbar() {\n            vm.isNavbarCollapsed = true;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('error', {\n                parent: 'app',\n                url: '/error',\n                data: {\n                    authorities: [],\n                    pageTitle: 'Error page!'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/error.html'\n                    }\n                }\n            })\n            .state('accessdenied', {\n                parent: 'app',\n                url: '/accessdenied',\n                data: {\n                    authorities: []\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/accessdenied.html'\n                    }\n                }\n            });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('home', {\n            parent: 'app',\n            url: '/',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/home/home.html',\n                    controller: 'HomeController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('HomeController', HomeController);\n\n    HomeController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\n\n    function HomeController ($scope, Principal, LoginService, $state) {\n        var vm = this;\n\n        vm.account = null;\n        vm.isAuthenticated = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        $scope.$on('authenticationSuccess', function() {\n            getAccount();\n        });\n\n        getAccount();\n\n        function getAccount() {\n            Principal.identity().then(function(account) {\n                vm.account = account;\n                vm.isAuthenticated = Principal.isAuthenticated;\n            });\n        }\n        function register () {\n            $state.go('register');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SystemDialogController', SystemDialogController);\n\n    SystemDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'System'];\n\n    function SystemDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, System) {\n        var vm = this;\n\n        vm.system = entity;\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.system.id !== null) {\n                System.update(vm.system, onSaveSuccess, onSaveError);\n            } else {\n                System.save(vm.system, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cafvalidityV2App:systemUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.userdate = false;\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SystemDetailController', SystemDetailController);\n\n    SystemDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'System'];\n\n    function SystemDetailController($scope, $rootScope, $stateParams, previousState, entity, System) {\n        var vm = this;\n\n        vm.system = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cafvalidityV2App:systemUpdate', function(event, result) {\n            vm.system = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SystemDeleteController',SystemDeleteController);\n\n    SystemDeleteController.$inject = ['$uibModalInstance', 'entity', 'System'];\n\n    function SystemDeleteController($uibModalInstance, entity, System) {\n        var vm = this;\n\n        vm.system = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            System.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('system', {\n            parent: 'entity',\n            url: '/system',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Systems'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/system/systems.html',\n                    controller: 'SystemController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('system-detail', {\n            parent: 'system',\n            url: '/system/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'System'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/system/system-detail.html',\n                    controller: 'SystemDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'System', function($stateParams, System) {\n                    return System.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'system',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('system-detail.edit', {\n            parent: 'system-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/system/system-dialog.html',\n                    controller: 'SystemDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['System', function(System) {\n                            return System.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('system.new', {\n            parent: 'system',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/system/system-dialog.html',\n                    controller: 'SystemDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                systemname: null,\n                                user: null,\n                                userdate: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('system', null, { reload: 'system' });\n                }, function() {\n                    $state.go('system');\n                });\n            }]\n        })\n        .state('system.edit', {\n            parent: 'system',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/system/system-dialog.html',\n                    controller: 'SystemDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['System', function(System) {\n                            return System.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('system', null, { reload: 'system' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('system.delete', {\n            parent: 'system',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/system/system-delete-dialog.html',\n                    controller: 'SystemDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['System', function(System) {\n                            return System.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('system', null, { reload: 'system' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('cafvalidityV2App')\n        .factory('System', System);\n\n    System.$inject = ['$resource', 'DateUtils'];\n\n    function System ($resource, DateUtils) {\n        var resourceUrl =  'api/systems/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.userdate = DateUtils.convertLocalDateFromServer(data.userdate);\n                    }\n                    return data;\n                }\n            },\n            'update': {\n                method: 'PUT',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            },\n            'save': {\n                method: 'POST',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('SystemSearch', SystemSearch);\n\n    SystemSearch.$inject = ['$resource'];\n\n    function SystemSearch($resource) {\n        var resourceUrl =  'api/_search/systems/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SystemController', SystemController);\n\n    SystemController.$inject = ['System', 'SystemSearch'];\n\n    function SystemController(System, SystemSearch) {\n\n        var vm = this;\n\n        vm.systems = [];\n        vm.clear = clear;\n        vm.search = search;\n        vm.loadAll = loadAll;\n\n        loadAll();\n\n        function loadAll() {\n            System.query(function(result) {\n                vm.systems = result;\n                vm.searchQuery = null;\n            });\n        }\n\n        function search() {\n            if (!vm.searchQuery) {\n                return vm.loadAll();\n            }\n            SystemSearch.query({query: vm.searchQuery}, function(result) {\n                vm.systems = result;\n                vm.currentSearch = vm.searchQuery;\n            });\n        }\n\n        function clear() {\n            vm.searchQuery = null;\n            loadAll();\n        }    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SuspendedusersDialogController', SuspendedusersDialogController);\n\n    SuspendedusersDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Suspendedusers'];\n\n    function SuspendedusersDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Suspendedusers) {\n        var vm = this;\n\n        vm.suspendedusers = entity;\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.suspendedusers.id !== null) {\n                Suspendedusers.update(vm.suspendedusers, onSaveSuccess, onSaveError);\n            } else {\n            \tvm.suspendedusers.count =vm.suspendedusers.count +1;\n                Suspendedusers.save(vm.suspendedusers, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n           if(vm.suspendedusers.count==50||vm.suspendedusers.count==100||vm.suspendedusers.count==150||\n        \t\t   vm.suspendedusers.count==200||vm.suspendedusers.count==250||vm.suspendedusers.count==300){\n        \t   alert('Lot Completed')\n           }\n           if(vm.suspendedusers.count==300){\n        \t   alert('Box Completed')\n        \t   vm.suspendedusers.count =0;\n    \t\t\t  vm.scancaf.centralbarcode= 'SUS'+increment_alphanumeric_str(vm.scancaf.category1.substring(3, 8));\n           }\n           \n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.userdate = false;\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SuspendedusersDetailController', SuspendedusersDetailController);\n\n    SuspendedusersDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Suspendedusers'];\n\n    function SuspendedusersDetailController($scope, $rootScope, $stateParams, previousState, entity, Suspendedusers) {\n        var vm = this;\n\n        vm.suspendedusers = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cafvalidityV2App:suspendedusersUpdate', function(event, result) {\n            vm.suspendedusers = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SuspendedusersDeleteController',SuspendedusersDeleteController);\n\n    SuspendedusersDeleteController.$inject = ['$uibModalInstance', 'entity', 'Suspendedusers'];\n\n    function SuspendedusersDeleteController($uibModalInstance, entity, Suspendedusers) {\n        var vm = this;\n\n        vm.suspendedusers = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Suspendedusers.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('suspendedusers', {\n            parent: 'entity',\n            url: '/suspendedusers?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Suspendedusers'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/suspendedusers/suspendedusers.html',\n                    controller: 'SuspendedusersController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('suspendedusers-detail', {\n            parent: 'suspendedusers',\n            url: '/suspendedusers/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Suspendedusers'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/suspendedusers/suspendedusers-detail.html',\n                    controller: 'SuspendedusersDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Suspendedusers', function($stateParams, Suspendedusers) {\n                    return Suspendedusers.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'suspendedusers',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('suspendedusers-detail.edit', {\n            parent: 'suspendedusers-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/suspendedusers/suspendedusers-dialog.html',\n                    controller: 'SuspendedusersDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Suspendedusers', function(Suspendedusers) {\n                            return Suspendedusers.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('suspendedusers.new', {\n            parent: 'suspendedusers',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/suspendedusers/suspendedusers-dialog.html',\n                    controller: 'SuspendedusersDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                mobilenumber: null,\n                                centralbarcode: null,\n                                count: null,\n                                user: null,\n                                userdate: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('suspendedusers', null, { reload: 'suspendedusers' });\n                }, function() {\n                    $state.go('suspendedusers');\n                });\n            }]\n        })\n        .state('suspendedusers.edit', {\n            parent: 'suspendedusers',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/suspendedusers/suspendedusers-dialog.html',\n                    controller: 'SuspendedusersDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Suspendedusers', function(Suspendedusers) {\n                            return Suspendedusers.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('suspendedusers', null, { reload: 'suspendedusers' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('suspendedusers.delete', {\n            parent: 'suspendedusers',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/suspendedusers/suspendedusers-delete-dialog.html',\n                    controller: 'SuspendedusersDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Suspendedusers', function(Suspendedusers) {\n                            return Suspendedusers.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('suspendedusers', null, { reload: 'suspendedusers' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('cafvalidityV2App')\n        .factory('Suspendedusers', Suspendedusers);\n\n    Suspendedusers.$inject = ['$resource', 'DateUtils'];\n\n    function Suspendedusers ($resource, DateUtils) {\n        var resourceUrl =  'api/suspendedusers/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.userdate = DateUtils.convertDateTimeFromServer(data.userdate);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('SuspendedusersSearch', SuspendedusersSearch);\n\n    SuspendedusersSearch.$inject = ['$resource'];\n\n    function SuspendedusersSearch($resource) {\n        var resourceUrl =  'api/_search/suspendedusers/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SuspendedusersController', SuspendedusersController);\n\n    SuspendedusersController.$inject = ['$state', 'Suspendedusers', 'SuspendedusersSearch', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function SuspendedusersController($state, Suspendedusers, SuspendedusersSearch, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.clear = clear;\n        vm.search = search;\n        vm.loadAll = loadAll;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n\n        loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                SuspendedusersSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                Suspendedusers.query({\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.suspendedusers = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search(searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear() {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SourceboxDialogController', SourceboxDialogController);\n\n    SourceboxDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Sourcebox'];\n\n    function SourceboxDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Sourcebox) {\n        var vm = this;\n\n        vm.sourcebox = entity;\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.sourcebox.id !== null) {\n                Sourcebox.update(vm.sourcebox, onSaveSuccess, onSaveError);\n            } else {\n                Sourcebox.save(vm.sourcebox, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cafvalidityV2App:sourceboxUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.createddate = false;\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SourceboxDetailController', SourceboxDetailController);\n\n    SourceboxDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Sourcebox'];\n\n    function SourceboxDetailController($scope, $rootScope, $stateParams, previousState, entity, Sourcebox) {\n        var vm = this;\n\n        vm.sourcebox = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cafvalidityV2App:sourceboxUpdate', function(event, result) {\n            vm.sourcebox = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SourceboxDeleteController',SourceboxDeleteController);\n\n    SourceboxDeleteController.$inject = ['$uibModalInstance', 'entity', 'Sourcebox'];\n\n    function SourceboxDeleteController($uibModalInstance, entity, Sourcebox) {\n        var vm = this;\n\n        vm.sourcebox = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Sourcebox.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('sourcebox', {\n            parent: 'entity',\n            url: '/sourcebox?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Sourceboxes'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/sourcebox/sourceboxes.html',\n                    controller: 'SourceboxController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('sourcebox-detail', {\n            parent: 'sourcebox',\n            url: '/sourcebox/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Sourcebox'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/sourcebox/sourcebox-detail.html',\n                    controller: 'SourceboxDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Sourcebox', function($stateParams, Sourcebox) {\n                    return Sourcebox.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'sourcebox',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('sourcebox-detail.edit', {\n            parent: 'sourcebox-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/sourcebox/sourcebox-dialog.html',\n                    controller: 'SourceboxDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Sourcebox', function(Sourcebox) {\n                            return Sourcebox.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('sourcebox.new', {\n            parent: 'sourcebox',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/sourcebox/sourcebox-dialog.html',\n                    controller: 'SourceboxDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                sourceboxname: null,\n                                createduser: null,\n                                createddate: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('sourcebox', null, { reload: 'sourcebox' });\n                }, function() {\n                    $state.go('sourcebox');\n                });\n            }]\n        })\n        .state('sourcebox.edit', {\n            parent: 'sourcebox',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/sourcebox/sourcebox-dialog.html',\n                    controller: 'SourceboxDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Sourcebox', function(Sourcebox) {\n                            return Sourcebox.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('sourcebox', null, { reload: 'sourcebox' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('sourcebox.delete', {\n            parent: 'sourcebox',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/sourcebox/sourcebox-delete-dialog.html',\n                    controller: 'SourceboxDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Sourcebox', function(Sourcebox) {\n                            return Sourcebox.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('sourcebox', null, { reload: 'sourcebox' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('cafvalidityV2App')\n        .factory('Sourcebox', Sourcebox);\n\n    Sourcebox.$inject = ['$resource', 'DateUtils'];\n\n    function Sourcebox ($resource, DateUtils) {\n        var resourceUrl =  'api/sourceboxes/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.createddate = DateUtils.convertLocalDateFromServer(data.createddate);\n                    }\n                    return data;\n                }\n            },\n            'update': {\n                method: 'PUT',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.createddate = DateUtils.convertLocalDateToServer(copy.createddate);\n                    return angular.toJson(copy);\n                }\n            },\n            'save': {\n                method: 'POST',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.createddate = DateUtils.convertLocalDateToServer(copy.createddate);\n                    return angular.toJson(copy);\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('SourceboxSearch', SourceboxSearch);\n\n    SourceboxSearch.$inject = ['$resource'];\n\n    function SourceboxSearch($resource) {\n        var resourceUrl =  'api/_search/sourceboxes/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SourceboxController', SourceboxController);\n\n    SourceboxController.$inject = ['$state', 'Sourcebox', 'SourceboxSearch', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function SourceboxController($state, Sourcebox, SourceboxSearch, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.clear = clear;\n        vm.search = search;\n        vm.loadAll = loadAll;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n\n        loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                SourceboxSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                Sourcebox.query({\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.sourceboxes = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search(searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear() {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('ScancafDialogController', ScancafDialogController);\n\n    ScancafDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Scancaf','$cookies','$cookieStore'];\n\n    function ScancafDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Scancaf,$cookies,$cookieStore) {\n        var vm = this;\n        $scope.lastcompletedbox = $cookieStore.get('completed');\n        $scope.lastsourcebox = $cookieStore.get('sourcecompleted')\n        vm.scancaf = entity;\n        vm.cafbarcodecheck = null;\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n        \n        \n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.scancaf.id !== null) {\n                Scancaf.update(vm.scancaf, onSaveSuccess, onSaveError);\n            } else {\n                Scancaf.save(vm.scancaf, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cafvalidityV2App:scancafUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.userdate = false;\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n        \n        function init(){\n        \t\n        \tScancaf.getSystemByName(vm.scancaf,onSuccess,onError);\n        \t function onSuccess(data){\n        \t\tif(data.user != null){\n        \t\t\tvm.scancaf.user=data.user\n        \t\t\t var array =  data.boxassign.split(\",\");\n                 \t \n     \t           \tif(array[0].indexOf('E1A') > -1){\n     \t           \t\tvm.scancaf.category1 = array[0];\n     \t           \t}\n     \t           \tif(array[1].indexOf('EC1') > -1){\n     \t           \t\tvm.scancaf.category2 = array[1];\n     \t           \t}\n     \t           \tif(array[2].indexOf('EC2')  > -1){\n     \t           \t vm.scancaf.category3= array[2]; \n     \t           \t}\n     \t           \tif(array[3].indexOf('EC3')  > -1){\n     \t           \t  vm.scancaf.category4  =  array[3];\n     \t           \t}\n     \t           \tif(array[4].indexOf('EDA')  > -1){\n     \t           \t vm.scancaf.category5 = array[4];\n     \t           \t}\n    \t\t\t\t}\n        \t\t\tScancaf.getDetailsByName(vm.scancaf,onSuccessName);\n        \t\t\tfunction onSuccessName(result){\n        \t\t\t\tif(result != null){\n        \t\t\t\t\tvm.scancaf.sourcebox = result.sourcebox;\n        \t\t\t\t vm.scancaf.countCategory1 = result.countCategory1;\n        \t        \t   vm.scancaf.countCategory2 = result.countCategory2;\n        \t        \t   vm.scancaf.countCategory3 = result.countCategory3;\n        \t        \t   vm.scancaf.countCategory4 = result.countCategory4;\n        \t        \t   vm.scancaf.countCategory5 = result.countCategory5;\n        \t\t           vm.scancaf.category1 = result.category1;\n        \t\t           vm.scancaf.category2 = result.category2;\n        \t\t           vm.scancaf.category3 = result.category3;\n        \t\t           vm.scancaf.category4 = result.category4;\n        \t\t           vm.scancaf.category5 = result.category5;\n        \t\t\t\t}\n        \t\t\t}\n        \t\t\t\t\n        \t\t}\n        \t\t\t\t\n          \t\t\n            function onError(){\n           \t\talert(\"You are not allowed to work on the system, Please check with your Team leader\");\n           \t}\n        }\n        \n       \n       \tinit();\n       \n        //watchCollection\n        $scope.$watch('vm.scancaf.sourcebox', function(){\n        \tif(vm.scancaf.sourcebox.length ===8){\n        \t\tScancaf.getSource(vm.scancaf.sourcebox,onSaveSuccess,onError);\n        \t}\n        \t function onSaveSuccess (result) {\n        \t\t\n\n           \t  Scancaf.getBoxCount(vm.scancaf,onSaveSuccess1);\n           \n           function onSaveSuccess1 (result) {\n        \t   vm.scancaf.countCategory1 = result.countCategory1;\n        \t   vm.scancaf.countCategory2 = result.countCategory2;\n        \t   vm.scancaf.countCategory3 = result.countCategory3;\n        \t   vm.scancaf.countCategory4 = result.countCategory4;\n        \t   vm.scancaf.countCategory5 = result.countCategory5;\n\t           vm.scancaf.category1 = result.category1;\n\t           vm.scancaf.category2 = result.category2;\n\t           vm.scancaf.category3 = result.category3;\n\t           vm.scancaf.category4 = result.category4;\n\t           vm.scancaf.category5 = result.category5;\n\t           \n\t           if(vm.scancaf.countCategory1===300){\n         \t\t\t \n          \t\t\t$cookieStore.put('completed', vm.scancaf.category1);\n          \t\t\t\tvm.scancaf.countCategory1= 0;\n          \t\t\t  vm.scancaf.category1= 'EDA'+increment_alphanumeric_str(vm.scancaf.category1.substring(3, 8));\n          \t\t      $scope.lastcompletedbox = $cookieStore.get('completed')\n\n          \t\t\t  \n          \t\t  }\n          \t\t  \n          \t\t  if(vm.scancaf.countCategory2===300){\n          \t\t\t  $cookieStore.put('completed', vm.scancaf.category2);\n          \t\t\t  vm.scancaf.countCategory2= 0;\n          \t\t\t  vm.scancaf.category2= 'E1A'+increment_alphanumeric_str(vm.scancaf.category2.substring(3, 8));\n          \t\t\t  $scope.lastcompletedbox = $cookieStore.get('completed')\n      \t\t       }\n          \t\t  if(vm.scancaf.countCategory3===300){\n          \t\t\t$cookieStore.put('completed', vm.scancaf.category3);\n        \t\t\t  vm.scancaf.countCategory3= 0;\n        \t\t\t  vm.scancaf.category3= 'EC1'+increment_alphanumeric_str(vm.scancaf.category3.substring(3, 8));\n        \t\t\t  $scope.lastcompletedbox = $cookieStore.get('completed')\n          \t\t  }\n          \t\t  if(vm.scancaf.countCategory4===300){\n          \t\t\t$cookieStore.put('completed', vm.scancaf.category4);\n      \t\t\t  vm.scancaf.countCategory4= 0;\n      \t\t\t  vm.scancaf.category4= 'EC2'+increment_alphanumeric_str(vm.scancaf.category4.substring(3, 8));\n      \t\t\t  $scope.lastcompletedbox = $cookieStore.get('completed')}\n          \t\t  if(vm.scancaf.countCategory5===300){\n          \t\t\t$cookieStore.put('completed', vm.scancaf.category5);\n      \t\t\t  vm.scancaf.countCategory5= 0;\n      \t\t\t  vm.scancaf.category5= 'EC3'+increment_alphanumeric_str(vm.scancaf.category5.substring(3, 8));\n      \t\t\t  $scope.lastcompletedbox = $cookieStore.get('completed')\n          \t\t  }\n\t           }\n        \t\t \n        \t }\n        });\n        \n        $scope.$watch('vm.scancaf.cafbarcode', function(){\n        \tif(vm.scancaf.cafbarcode.length ===13){\n        \t\t vm.scancaf.colorcode ='';\n        \t\t vm.scancaf.mobilenumber='';\n        \t\t  Scancaf.getCaf(vm.scancaf,onSaveSuccess);\n        \t\t\n        \t}\n        \t function onSaveSuccess (result) {\n               //  $scope.$emit('cafvalidityV2App:scancafUpdate', result);\n                 //$uibModalInstance.close(result);\n        \t\t vm.scancaf.centralbarcode =vm.scancaf.cafbarcode;\n        \t\t vm.scancaf.caftype = result.caftype;\n        \t\t if(vm.scancaf.caftype==='G3y'){\n        \t\t\t vm.scancaf.colorcode = 'red';\n        \t\t\t vm.scancaf.countCategory1 =  vm.scancaf.countCategory1+1;\n        \t\t }\n        \t\t if(vm.scancaf.caftype==='Active'){\n        \t\t\t vm.scancaf.colorcode = 'green';\n        \t\t\t vm.scancaf.countCategory2 =  vm.scancaf.countCategory2+1;\n        \t\t }\n        \t\t if(vm.scancaf.caftype==='L1'){\n        \t\t\t vm.scancaf.colorcode = 'white';\n        \t\t\t vm.scancaf.countCategory3 =  vm.scancaf.countCategory3+1;\n        \t\t }\n        \t\t if(vm.scancaf.caftype==='0-1'){\n        \t\t\t vm.scancaf.colorcode = 'yellow';\n        \t\t\t vm.scancaf.countCategory4 =  vm.scancaf.countCategory4+1;\n        \t\t }\n        \t\t if(vm.scancaf.caftype==='1-2'){\n        \t\t\t vm.scancaf.colorcode = 'blue';\n        \t\t\t vm.scancaf.countCategory5 =  vm.scancaf.countCategory5+1;\n        \t\t }\n        \t\t\n        \t\t \n        \t\t vm.scancaf.mobilenumber = result.mobilenumber;\n        \t\t vm.scancaf.cafbarcode = result.cafbarcode;\n        \t\t \n        \t\t\n        \t\t\n        \t\t \n        \t\t if(vm.scancaf.countCategory1===300){\n        \t\t\talert('Category1 Box is completed please ask for another one') ;\n        \t\t\tvm.scancaf.boxstatus='category1-completed'\n        \t\t }\n        \t\t \n        \t\t if(vm.scancaf.countCategory2===300){\n        \talert('Category2 Box is completed please ask for another one') ; \n        \t\t\tif(vm.scancaf.boxstatus!=null){\n        \t\t\t\tvm.scancaf.boxstatus=' ,category2-completed'\n        \t\t\t}else{\n        \t\t\t\tvm.scancaf.boxstatus='category2-completed'\n        \t\t\t}\n        \t\t }\n        \t\t if(vm.scancaf.countCategory3===300){\n        \t alert('Category3 Box is completed please ask for another one') ;\n        \t if(vm.scancaf.boxstatus!=null){\n \t\t\t\tvm.scancaf.boxstatus=' ,category3-completed'\n \t\t\t}else{\n \t\t\t\tvm.scancaf.boxstatus='category3-completed'\n \t\t\t}\n        \t\t }\n        \t\t if(vm.scancaf.countCategory4===300){\n        \t alert('Category4 Box is completed please ask for another one') ;\n        \t if(vm.scancaf.boxstatus!=null){\n \t\t\t\tvm.scancaf.boxstatus=' ,category4-completed'\n \t\t\t}else{\n \t\t\t\tvm.scancaf.boxstatus='category4-completed'\n \t\t\t}\n        \t\t }\n        \t\t if(vm.scancaf.countCategory5===300){\n        \t\t alert('Category5 Box is completed please ask for another one') ;\n\t\t        \t if(vm.scancaf.boxstatus!=null){\n\t\t \t\t\t\tvm.scancaf.boxstatus=' ,category5-completed'\n\t\t \t\t\t}else{\n\t\t \t\t\t\tvm.scancaf.boxstatus='category5-completed'\n\t\t \t\t\t}\n        \t\t }\n        \t\t if(vm.scancaf.countCategory1===50|| vm.scancaf.countCategory1===100||vm.scancaf.countCategory1===150||\n        \t\t\t\t vm.scancaf.countCategory1===200|| vm.scancaf.countCategory1===250){\n         \t\t\talert('For Category1 : Lot is completed') ;\n         \t\t }\n         \t\t \n        \t\t if(vm.scancaf.countCategory2===50|| vm.scancaf.countCategory2===100||vm.scancaf.countCategory2===150||\n        \t\t\t\t vm.scancaf.countCategory2===200|| vm.scancaf.countCategory2===250){\n        \t\t\t alert('For Category2 : Lot is completed') ;\n         \t\t }\n        \t\t if(vm.scancaf.countCategory3===50|| vm.scancaf.countCategory3===100||vm.scancaf.countCategory3===150||\n        \t\t\t\t vm.scancaf.countCategory3===200|| vm.scancaf.countCategory3===250){\n         \t\t\talert('For Category3 : Lot is completed') ;\t \n         \t\t }\n        \t\t if(vm.scancaf.countCategory4===50|| vm.scancaf.countCategory4===100||vm.scancaf.countCategory4===150||\n        \t\t\t\t vm.scancaf.countCategory4===200|| vm.scancaf.countCategory4===250){\n         \t\t\talert('For Category4 : Lot is completed') ;\n        \t\t }\n        \t\t if(vm.scancaf.countCategory5===50|| vm.scancaf.countCategory5===100||vm.scancaf.countCategory5===150||\n        \t\t\t\t vm.scancaf.countCategory5===200|| vm.scancaf.countCategory5===250){\n         \t\t\talert('For Category5 : Lot is completed') ;\n        \t\t }\n        \t\t // save functionality is being called\n        \t\t Scancaf.save(vm.scancaf,onSaveSuccessFinal);\n        \t\t \n        \t\t function onSaveSuccessFinal() {\n        \t\t\t vm.scancaf.cafbarcode ='';\n           \t\t  if(vm.scancaf.countCategory1===300){\n           \t\t\t \n           \t\t\t$cookieStore.put('completed', vm.scancaf.category1);\n           \t\t\t\tvm.scancaf.countCategory1= 0;\n           \t\t\t  vm.scancaf.category1= 'EDA'+increment_alphanumeric_str(vm.scancaf.category1.substring(3, 8));\n           \t\t      $scope.lastcompletedbox = $cookieStore.get('completed')\n\n           \t\t\t  \n           \t\t  }\n           \t\t  \n           \t\t  if(vm.scancaf.countCategory2===300){\n           \t\t\t  $cookieStore.put('completed', vm.scancaf.category2);\n           \t\t\t  vm.scancaf.countCategory2= 0;\n           \t\t\t  vm.scancaf.category2= 'E1A'+increment_alphanumeric_str(vm.scancaf.category2.substring(3, 8));\n           \t\t\t  $scope.lastcompletedbox = $cookieStore.get('completed')\n       \t\t       }\n           \t\t  if(vm.scancaf.countCategory3===300){\n           \t\t\t$cookieStore.put('completed', vm.scancaf.category3);\n         \t\t\t  vm.scancaf.countCategory3= 0;\n         \t\t\t  vm.scancaf.category3= 'EC1'+increment_alphanumeric_str(vm.scancaf.category3.substring(3, 8));\n         \t\t\t  $scope.lastcompletedbox = $cookieStore.get('completed')\n           \t\t  }\n           \t\t  if(vm.scancaf.countCategory4===300){\n           \t\t\t$cookieStore.put('completed', vm.scancaf.category4);\n       \t\t\t  vm.scancaf.countCategory4= 0;\n       \t\t\t  vm.scancaf.category4= 'EC2'+increment_alphanumeric_str(vm.scancaf.category4.substring(3, 8));\n       \t\t\t  $scope.lastcompletedbox = $cookieStore.get('completed')}\n           \t\t  if(vm.scancaf.countCategory5===300){\n           \t\t\t$cookieStore.put('completed', vm.scancaf.category5);\n       \t\t\t  vm.scancaf.countCategory5= 0;\n       \t\t\t  vm.scancaf.category5= 'EC3'+increment_alphanumeric_str(vm.scancaf.category5.substring(3, 8));\n       \t\t\t  $scope.lastcompletedbox = $cookieStore.get('completed')\n           \t\t  }\n                }\n\n        \t\t \n             }\n\n        \t         });\n        \n        $scope.cat1 = function(){\n        \t\n            if(vm.scancaf.category1.length===12){\n            \t  Scancaf.getBoxCount(vm.scancaf,onSaveSuccess);\n            }\n            function onSaveSuccess (result) {\n            vm.scancaf.countCategory1 = result.countCategory1;\n            }\n            }\n        \n  $scope.validate1 = function(){\n        \t\n            if(vm.scancaf.category1.length===8){\n            \t  if(vm.scancaf.category1.substring(0,3)!='EDA'){\n            \t\t alert('Assigned Box in Category 1 is not correct !!! Please Check') \n            \t  }\n            }\n            if(vm.scancaf.category2.length===8){\n          \t  if(vm.scancaf.category2.substring(0,3)!='E1A'){\n          \t\t alert('Assigned Box in Category 2 is not correct !!! Please Check') \n          \t  }\n          }\n            if(vm.scancaf.category3.length===8){\n          \t  if(vm.scancaf.category3.substring(0,3)!='EC1'){\n          \t\t alert('Assigned Box in Category 3 is not correct !!! Please Check') \n          \t  }\n          }\n            if(vm.scancaf.category4.length===8){\n          \t  if(vm.scancaf.category4.substring(0,3)!='EC2'){\n          \t\t alert('Assigned Box in Category 4 is not correct !!! Please Check') \n          \t  }\n          }\n            if(vm.scancaf.category5.length===8){\n          \t  if(vm.scancaf.category5.substring(0,3)!='EC3'){\n          \t\t alert('Assigned Box in Category 5 is not correct !!! Please Check') \n          \t  }\n          }\n\n            function onSaveSuccess (result) {\n            vm.scancaf.countCategory1 = result.countCategory1;\n            }\n            }\n        \t\n        $scope.custom = true;\n        $scope.toggleCustom = function() {\n            $scope.custom = $scope.custom === false ? true: false;\n        };\n        \n        function increment_alphanumeric_str(str){\n            var numeric = str.match(/\\d+$/)[0];\n            var prefix = str.split(numeric)[0];\n\n            function increment_string_num(str){\n                var inc = String(parseInt(str)+1);\n                return str.slice(0, str.length-inc.length)+inc;\n            }\n\n            return prefix+increment_string_num(numeric);\n        }\n        $scope.sourceBoxComplete = function() {\n        \t\n        \t$cookieStore.put('sourcecompleted', vm.scancaf.sourcebox);\n    \t\t  $scope.lastsourcebox = $cookieStore.get('sourcecompleted')\n        \t\n        };\n        \n        $scope.cafcheck = function(){\n        \tif(vm.scancaf.boxstatus.length ===13){\n        \t\t  Scancaf.getBox(vm.scancaf,successCaf,errorcaf);\n        \t\t function successCaf (result) {\n        \t\t\t vm.scancaf = result;\n        \t\t\t vm.scancaf.boxstatus ='SECOND_LEVEL';\n        \t\t\t Scancaf.update(vm.scancaf, updatesucess); \n        \t\t\t function updatesucess (result) {\n        \t\t\t\t vm.scancaf.boxstatus ='';\n        \t\t\t }\n        \t\t }\n        \t\t function errorcaf (result) {\n        \t\t\t vm.scancaf= result;\n        \t\t }\n        \t}\n        }\n        \n        \n        $scope.BoxComplete = function() {\n        \t\n        \tif (vm.scancaf.sourceboxstaus.indexOf('EDA') > -1)\n        \t{\n        \t  vm.scancaf.caftype ='category_1'\n        \t}\n        \tif (vm.scancaf.sourceboxstaus.indexOf('E1A') > -1)\n        \t{\n        \t  vm.scancaf.caftype ='category_2'\n        \t}\n        \tif (vm.scancaf.sourceboxstaus.indexOf('EC1') > -1)\n        \t{\n        \t  vm.scancaf.caftype ='category_3'\n        \t}\n        \tif (vm.scancaf.sourceboxstaus.indexOf('EC2') > -1)\n        \t{\n        \t  vm.scancaf.caftype ='category_4'\n        \t}\n        \tif (vm.scancaf.sourceboxstaus.indexOf('EC3') > -1)\n        \t{\n        \t  vm.scancaf.caftype ='category_5'\n        \t}\n        \t\n        \t Scancaf.getOutBox(vm.scancaf,getoutbox,geterrorbox);\n        \t \n        \t function getoutbox (result) {\n        \t\t $scope.item = result;\n    \t\t\t// alert(result.boxstatus);\n        \t\t \n    \t\t\t var blob = new Blob([result.boxstatus], {\n    \t\t            type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8\"\n    \t\t        });\n    \t\t\t \n    \t\t        saveAs(blob, \"Report.xls\");\n    \t\t\t\n    \t\t }\n    \t\t function geterrorbox (result) {\n    \t\t\t alert(result.boxstatus);\n    \t\t }\n        \t\n        };\n        \n        \n        // end of scope\n    }\n    \n    \n    \n    \n   \n   \n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('ScancafDetailController', ScancafDetailController);\n\n    ScancafDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Scancaf'];\n\n    function ScancafDetailController($scope, $rootScope, $stateParams, previousState, entity, Scancaf) {\n        var vm = this;\n\n        vm.scancaf = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cafvalidityV2App:scancafUpdate', function(event, result) {\n            vm.scancaf = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('ScancafDeleteController',ScancafDeleteController);\n\n    ScancafDeleteController.$inject = ['$uibModalInstance', 'entity', 'Scancaf'];\n\n    function ScancafDeleteController($uibModalInstance, entity, Scancaf) {\n        var vm = this;\n\n        vm.scancaf = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Scancaf.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('scancaf', {\n            parent: 'entity',\n            url: '/scancaf?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Scancafs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/scancaf/scancafs.html',\n                    controller: 'ScancafController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('scancaf-detail', {\n            parent: 'scancaf',\n            url: '/scancaf/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Scancaf'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/scancaf/scancaf-detail.html',\n                    controller: 'ScancafDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Scancaf', function($stateParams, Scancaf) {\n                    return Scancaf.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'scancaf',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('scancaf-detail.edit', {\n            parent: 'scancaf-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/scancaf/scancaf-dialog.html',\n                    controller: 'ScancafDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Scancaf', function(Scancaf) {\n                            return Scancaf.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('scancaf.new', {\n            parent: 'scancaf',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/scancaf/scancaf-dialog.html',\n                    controller: 'ScancafDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                sourcebox: null,\n                                category1: null,\n                                category2: null,\n                                category3: null,\n                                category4: null,\n                                category5: null,\n                                countCategory1: 0,\n                                countCategory2: 0,\n                                countCategory3: 0,\n                                countCategory4: 0,\n                                countCategory5: 0,\n                                cafbarcode: null,\n                                colorcode: null,\n                                user: null,\n                                userdate: null,\n                                boxstatus: null,\n                                sourceboxstaus: null,\n                                mobilenumber: null,\n                                centralbarcode: null,\n                                caftype: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('scancaf', null, { reload: 'scancaf' });\n                }, function() {\n                    $state.go('scancaf');\n                });\n            }]\n        })\n        .state('scancaf.edit', {\n            parent: 'scancaf',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/scancaf/scancaf-dialog.html',\n                    controller: 'ScancafDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Scancaf', function(Scancaf) {\n                            return Scancaf.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('scancaf', null, { reload: 'scancaf' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('scancaf.delete', {\n            parent: 'scancaf',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/scancaf/scancaf-delete-dialog.html',\n                    controller: 'ScancafDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Scancaf', function(Scancaf) {\n                            return Scancaf.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('scancaf', null, { reload: 'scancaf' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        }).state('scancaf.second', {\n            parent: 'scancaf',\n            url: '/second',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/scancaf/scancaf-dialog_second.html',\n                    controller: 'ScancafDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                sourcebox: null,\n                                category1: null,\n                                category2: null,\n                                category3: null,\n                                category4: null,\n                                category5: null,\n                                countCategory1: 0,\n                                countCategory2: 0,\n                                countCategory3: 0,\n                                countCategory4: 0,\n                                countCategory5: 0,\n                                cafbarcode: null,\n                                colorcode: null,\n                                user: null,\n                                userdate: null,\n                                boxstatus: null,\n                                sourceboxstaus: null,\n                                mobilenumber: null,\n                                centralbarcode: null,\n                                caftype: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('scancaf', null, { reload: 'scancaf' });\n                }, function() {\n                    $state.go('scancaf');\n                });\n            }]\n        })\n        ;\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('cafvalidityV2App')\n        .factory('Scancaf', Scancaf);\n\n    Scancaf.$inject = ['$resource', 'DateUtils'];\n\n    function Scancaf ($resource, DateUtils) {\n        var resourceUrl =  'api/scancafs/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.userdate = DateUtils.convertLocalDateFromServer(data.userdate);\n                    }\n                    return data;\n                }\n            },\n            'update': {\n                method: 'PUT',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            },\n            'save': {\n                method: 'POST',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            },'getSource': {\n                method: 'POST',\n                url: 'api/sourceboxes/getSource',\n                transformResponse: function (data) {\n                    var copy = angular.copy(data);\n                   // copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            },'getCaf': {\n                method: 'POST',\n                url: 'api/scancafs/getCaf',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                   // copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            },'getBoxCount': {\n                method: 'POST',\n                url: 'api/scancafs/getBoxCount',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                   // copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            },'getBox': {\n                method: 'POST',\n                url: 'api/scancafs/getBox',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                   // copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            },'getOutBox': {\n                method: 'POST',\n                url: 'api/scancafs/getOutBox',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                   // copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            },'getSystemByName': {\n                method: 'GET',\n                url: 'api/boxassigns/getSystemName',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                   // copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            },'getDetailsByName': {\n                method: 'POST',\n                url: 'api/scancafs/getDetailsByName',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                   // copy.userdate = DateUtils.convertLocalDateToServer(copy.userdate);\n                    return angular.toJson(copy);\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('ScancafSearch', ScancafSearch);\n\n    ScancafSearch.$inject = ['$resource'];\n\n    function ScancafSearch($resource) {\n        var resourceUrl =  'api/_search/scancafs/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('ScancafController', ScancafController);\n\n    ScancafController.$inject = ['$state', '$scope','Scancaf', 'ScancafSearch', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function ScancafController($state,$scope, Scancaf, ScancafSearch, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.clear = clear;\n        vm.search = search;\n        vm.loadAll = loadAll;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n\n        loadAll();\n        \n         $scope.initTest = function(){\n        \t Scancaf.getSystemByName(null,onSuccess,onError);\n        \t function onSuccess(data){\n        \t\t if(data.boxassign!= null){\n        \t\t $state.go(\"scancaf.new\");\n        \t\t }else{\n        \t\t\t alert(\"You are not assingned to any system, Please check with your Team leader\");\n        \t\t }\n        \t }\n        \tfunction onError(){\n        \t\talert(\"You are not allowed to work on the system, Please check with your Team leader\");\n        \t}\n        }\n     ///  init();\n        \n\n        function loadAll () {\n            if (pagingParams.search) {\n                ScancafSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                Scancaf.query({\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.scancafs = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search(searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear() {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('MobileValidationDialogController', MobileValidationDialogController);\n\n    MobileValidationDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'MobileValidation'];\n\n    function MobileValidationDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, MobileValidation) {\n        var vm = this;\n\n        vm.mobileValidation = entity;\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.save = save;\n        vm.search =search;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.mobileValidation.id !== null) {\n                MobileValidation.update(vm.mobileValidation, onSaveSuccess, onSaveError);\n            } else {\n                MobileValidation.save(vm.mobileValidation, onSaveSuccess, onSaveError);\n            }\n        }\n        \n        function search (){\n        \talert('hello con');\n        }\n        \n    \n\n        function onSaveSuccess (result) {\n            $scope.$emit('cafvalidityV2App:mobileValidationUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.userDate = false;\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('MobileValidationDetailController', MobileValidationDetailController);\n\n    MobileValidationDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'MobileValidation'];\n\n    function MobileValidationDetailController($scope, $rootScope, $stateParams, previousState, entity, MobileValidation) {\n        var vm = this;\n\n        vm.mobileValidation = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cafvalidityV2App:mobileValidationUpdate', function(event, result) {\n            vm.mobileValidation = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('MobileValidationDeleteController',MobileValidationDeleteController);\n\n    MobileValidationDeleteController.$inject = ['$uibModalInstance', 'entity', 'MobileValidation'];\n\n    function MobileValidationDeleteController($uibModalInstance, entity, MobileValidation) {\n        var vm = this;\n\n        vm.mobileValidation = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            MobileValidation.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('mobile-validation', {\n            parent: 'entity',\n            url: '/mobile-validation?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'MobileValidations'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/mobile-validation/mobile-validations.html',\n                    controller: 'MobileValidationController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('mobile-validation-detail', {\n            parent: 'mobile-validation',\n            url: '/mobile-validation/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'MobileValidation'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/mobile-validation/mobile-validation-detail.html',\n                    controller: 'MobileValidationDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'MobileValidation', function($stateParams, MobileValidation) {\n                    return MobileValidation.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'mobile-validation',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('mobile-validation-detail.edit', {\n            parent: 'mobile-validation-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/mobile-validation/mobile-validation-dialog.html',\n                    controller: 'MobileValidationDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['MobileValidation', function(MobileValidation) {\n                            return MobileValidation.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('mobile-validation.new', {\n            parent: 'mobile-validation',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/mobile-validation/mobile-validation-dialog.html',\n                    controller: 'MobileValidationDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                mobilenumber: null,\n                                activationDate: null,\n                                customerName: null,\n                                colorCode: null,\n                                user: null,\n                                userDate: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('mobile-validation', null, { reload: 'mobile-validation' });\n                }, function() {\n                    $state.go('mobile-validation');\n                });\n            }]\n        })\n        .state('mobile-validation.edit', {\n            parent: 'mobile-validation',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/mobile-validation/mobile-validation-dialog.html',\n                    controller: 'MobileValidationDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['MobileValidation', function(MobileValidation) {\n                            return MobileValidation.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('mobile-validation', null, { reload: 'mobile-validation' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('mobile-validation.delete', {\n            parent: 'mobile-validation',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/mobile-validation/mobile-validation-delete-dialog.html',\n                    controller: 'MobileValidationDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['MobileValidation', function(MobileValidation) {\n                            return MobileValidation.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('mobile-validation', null, { reload: 'mobile-validation' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('cafvalidityV2App')\n        .factory('MobileValidation', MobileValidation);\n\n    MobileValidation.$inject = ['$resource', 'DateUtils'];\n\n    function MobileValidation ($resource, DateUtils) {\n        var resourceUrl =  'api/mobile-validations/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.userDate = DateUtils.convertLocalDateFromServer(data.userDate);\n                    }\n                    return data;\n                }\n            },\n            'update': {\n                method: 'PUT',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.userDate = DateUtils.convertLocalDateToServer(copy.userDate);\n                    return angular.toJson(copy);\n                }\n            },\n            'save': {\n                method: 'POST',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.userDate = DateUtils.convertLocalDateToServer(copy.userDate);\n                    return angular.toJson(copy);\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('MobileValidationSearch', MobileValidationSearch);\n\n    MobileValidationSearch.$inject = ['$resource'];\n\n    function MobileValidationSearch($resource) {\n        var resourceUrl =  'api/_search/mobile-validations/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('MobileValidationController', MobileValidationController);\n\n    MobileValidationController.$inject = ['$state', 'MobileValidation', 'MobileValidationSearch', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function MobileValidationController($state, MobileValidation, MobileValidationSearch, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.clear = clear;\n        vm.search = search;\n        vm.loadAll = loadAll;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n\n        loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                MobileValidationSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                MobileValidation.query({\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.mobileValidations = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search(searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear() {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('BoxassignDialogController', BoxassignDialogController);\n\n    BoxassignDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Boxassign'];\n\n    function BoxassignDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Boxassign) {\n        var vm = this;\n\n        vm.boxassign = entity;\n        vm.clear = clear;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.boxassign.id !== null) {\n                Boxassign.update(vm.boxassign, onSaveSuccess, onSaveError);\n            } else {\n                Boxassign.save(vm.boxassign, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cafvalidityV2App:boxassignUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n        $scope.users = Boxassign.users();\n        $scope.system = Boxassign.system();\n        \n        $scope.catChange = function(){\n        \t\n        \tBoxassign.getCatLatest(onSave);\n        \t\n        \t function onSave(result){\n           \t\t var boxassign = result;\n           \t\t \n           \tif(vm.boxassign.churntype==='category_1'){\n           \t\tvm.boxassign.boxassign = 'E1A'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \tif(vm.boxassign.churntype==='category_2'){\n           \t\tvm.boxassign.boxassign = 'EC1'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \tif(vm.boxassign.churntype==='category_3'){\n           \t\tvm.boxassign.boxassign = 'EC2'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \tif(vm.boxassign.churntype==='category_4'){\n           \t\tvm.boxassign.boxassign = 'EC3'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \tif(vm.boxassign.churntype==='category_5'){\n           \t\tvm.boxassign.boxassign = 'EDA'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \tvm.boxassign.boxassign = result.boxassign;\n           \t\n           \tif(vm.boxassign.churntype===null){\n           \t var array = result.boxassign.split(',');\n           \t \n           \tif(array[0].indexOf('E1A') > -1){\n           \t\tvm.boxassign.boxassign = 'E1A'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \tif(array[1].indexOf('EC1') > -1){\n           \t\tvm.boxassign.boxassign = vm.boxassign.boxassign+\",\"+ 'EC1'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \tif(array[2].indexOf('EC2')  > -1){\n           \t\tvm.boxassign.boxassign = vm.boxassign.boxassign+\",\"+'EC2'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \tif(array[3].indexOf('EC3')  > -1){\n           \t\tvm.boxassign.boxassign = vm.boxassign.boxassign+\",\"+'EC3'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \tif(array[4].indexOf('EDA')  > -1){\n           \t\tvm.boxassign.boxassign = vm.boxassign.boxassign+\",\"+'EDA'+increment_alphanumeric_str(boxassign.boxassign.substring(3, 8)); \n           \t}\n           \t \n           \t\t\n           \t}\n           \t\n         }\n        \t\n        }\n        \n        function increment_alphanumeric_str(str){\n            var numeric = str.match(/\\d+$/)[0];\n            var prefix = str.split(numeric)[0];\n\n            function increment_string_num(str){\n                var inc = String(parseInt(str)+1);\n                return str.slice(0, str.length-inc.length)+inc;\n            }\n\n            return prefix+increment_string_num(numeric);\n        }\n\n       \n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('BoxassignDetailController', BoxassignDetailController);\n\n    BoxassignDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Boxassign'];\n\n    function BoxassignDetailController($scope, $rootScope, $stateParams, previousState, entity, Boxassign) {\n        var vm = this;\n\n        vm.boxassign = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cafvalidityV2App:boxassignUpdate', function(event, result) {\n            vm.boxassign = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('BoxassignDeleteController',BoxassignDeleteController);\n\n    BoxassignDeleteController.$inject = ['$uibModalInstance', 'entity', 'Boxassign'];\n\n    function BoxassignDeleteController($uibModalInstance, entity, Boxassign) {\n        var vm = this;\n\n        vm.boxassign = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Boxassign.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('boxassign', {\n            parent: 'entity',\n            url: '/boxassign?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Boxassigns'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/boxassign/boxassigns.html',\n                    controller: 'BoxassignController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('boxassign-detail', {\n            parent: 'boxassign',\n            url: '/boxassign/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Boxassign'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/boxassign/boxassign-detail.html',\n                    controller: 'BoxassignDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Boxassign', function($stateParams, Boxassign) {\n                    return Boxassign.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'boxassign',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('boxassign-detail.edit', {\n            parent: 'boxassign-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/boxassign/boxassign-dialog.html',\n                    controller: 'BoxassignDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Boxassign', function(Boxassign) {\n                            return Boxassign.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('boxassign.new', {\n            parent: 'boxassign',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/boxassign/boxassign-dialog.html',\n                    controller: 'BoxassignDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                user: null,\n                                boxassign: null,\n                                churntype: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('boxassign', null, { reload: 'boxassign' });\n                }, function() {\n                    $state.go('boxassign');\n                });\n            }]\n        })\n        .state('boxassign.edit', {\n            parent: 'boxassign',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/boxassign/boxassign-dialog.html',\n                    controller: 'BoxassignDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Boxassign', function(Boxassign) {\n                            return Boxassign.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('boxassign', null, { reload: 'boxassign' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('boxassign.delete', {\n            parent: 'boxassign',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/boxassign/boxassign-delete-dialog.html',\n                    controller: 'BoxassignDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Boxassign', function(Boxassign) {\n                            return Boxassign.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('boxassign', null, { reload: 'boxassign' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('cafvalidityV2App')\n        .factory('Boxassign', Boxassign);\n\n    Boxassign.$inject = ['$resource'];\n\n    function Boxassign ($resource) {\n        var resourceUrl =  'api/boxassigns/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n            , 'users': {\n                method: 'GET',\n                url: 'api/users',\n                isArray: true,\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },'getCatLatest' :{\n                method: 'POST',\n                url: 'api/boxassigns/getCatLatest',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            \t\n            },\n            'system': {\n                method: 'GET',\n                url: 'api/systems',\n                isArray: true,\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('BoxassignSearch', BoxassignSearch);\n\n    BoxassignSearch.$inject = ['$resource'];\n\n    function BoxassignSearch($resource) {\n        var resourceUrl =  'api/_search/boxassigns/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('BoxassignController', BoxassignController);\n\n    BoxassignController.$inject = ['$state', 'Boxassign', 'BoxassignSearch', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function BoxassignController($state, Boxassign, BoxassignSearch, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.clear = clear;\n        vm.search = search;\n        vm.loadAll = loadAll;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n\n        loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                BoxassignSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                Boxassign.query({\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.boxassigns = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search(searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear() {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('AdminstatsDialogController', AdminstatsDialogController);\n\n    AdminstatsDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Adminstats'];\n\n    function AdminstatsDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Adminstats) {\n        var vm = this;\n\n        vm.adminstats = entity;\n        vm.clear = clear;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.adminstats.id !== null) {\n                Adminstats.update(vm.adminstats, onSaveSuccess, onSaveError);\n            } else {\n                Adminstats.save(vm.adminstats, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('cafvalidityV2App:adminstatsUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('AdminstatsDetailController', AdminstatsDetailController);\n\n    AdminstatsDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Adminstats'];\n\n    function AdminstatsDetailController($scope, $rootScope, $stateParams, previousState, entity, Adminstats) {\n        var vm = this;\n\n        vm.adminstats = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('cafvalidityV2App:adminstatsUpdate', function(event, result) {\n            vm.adminstats = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('AdminstatsDeleteController',AdminstatsDeleteController);\n\n    AdminstatsDeleteController.$inject = ['$uibModalInstance', 'entity', 'Adminstats'];\n\n    function AdminstatsDeleteController($uibModalInstance, entity, Adminstats) {\n        var vm = this;\n\n        vm.adminstats = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Adminstats.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('adminstats', {\n            parent: 'entity',\n            url: '/adminstats?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Adminstats'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/adminstats/adminstats.html',\n                    controller: 'AdminstatsController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('adminstats-detail', {\n            parent: 'adminstats',\n            url: '/adminstats/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Adminstats'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/adminstats/adminstats-detail.html',\n                    controller: 'AdminstatsDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Adminstats', function($stateParams, Adminstats) {\n                    return Adminstats.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'adminstats',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('adminstats-detail.edit', {\n            parent: 'adminstats-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/adminstats/adminstats-dialog.html',\n                    controller: 'AdminstatsDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Adminstats', function(Adminstats) {\n                            return Adminstats.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('adminstats.new', {\n            parent: 'adminstats',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/adminstats/adminstats-dialog.html',\n                    controller: 'AdminstatsDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                user: null,\n                                usercount: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('adminstats', null, { reload: 'adminstats' });\n                }, function() {\n                    $state.go('adminstats');\n                });\n            }]\n        })\n        .state('adminstats.edit', {\n            parent: 'adminstats',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/adminstats/adminstats-dialog.html',\n                    controller: 'AdminstatsDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Adminstats', function(Adminstats) {\n                            return Adminstats.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('adminstats', null, { reload: 'adminstats' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('adminstats.delete', {\n            parent: 'adminstats',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/adminstats/adminstats-delete-dialog.html',\n                    controller: 'AdminstatsDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Adminstats', function(Adminstats) {\n                            return Adminstats.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('adminstats', null, { reload: 'adminstats' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('cafvalidityV2App')\n        .factory('Adminstats', Adminstats);\n\n    Adminstats.$inject = ['$resource'];\n\n    function Adminstats ($resource) {\n        var resourceUrl =  'api/adminstats/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('AdminstatsSearch', AdminstatsSearch);\n\n    AdminstatsSearch.$inject = ['$resource'];\n\n    function AdminstatsSearch($resource) {\n        var resourceUrl =  'api/_search/adminstats/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('AdminstatsController', AdminstatsController);\n\n    AdminstatsController.$inject = ['$state', 'Adminstats', 'AdminstatsSearch', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function AdminstatsController($state, Adminstats, AdminstatsSearch, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.clear = clear;\n        vm.search = search;\n        vm.loadAll = loadAll;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n\n        loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                AdminstatsSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                Adminstats.query({\n                    page: pagingParams.page - 1,\n                    size: vm.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.adminstats = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search(searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear() {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .filter('words', words);\n\n    function words() {\n        return wordsFilter;\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n            return input;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .filter('characters', characters);\n\n    function characters () {\n        return charactersFilter;\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length-1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .directive('jhSortBy', jhSortBy);\n\n    function jhSortBy() {\n        var directive = {\n            restrict: 'A',\n            scope: false,\n            require: '^jhSort',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs, parentCtrl) {\n            element.bind('click', function () {\n                parentCtrl.sort(attrs.jhSortBy);\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .directive('jhSort', jhSort);\n\n    function jhSort () {\n        var directive = {\n            restrict: 'A',\n            scope: {\n                predicate: '=jhSort',\n                ascending: '=',\n                callback: '&'\n            },\n            controller: SortController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n    }\n\n    SortController.$inject = ['$scope', '$element'];\n\n    function SortController ($scope, $element) {\n        var vm = this;\n\n        vm.applyClass = applyClass;\n        vm.resetClasses = resetClasses;\n        vm.sort = sort;\n        vm.triggerApply = triggerApply;\n\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\n        vm.triggerApply();\n\n        function applyClass (element) {\n            var thisIcon = element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\n                remove = sortIcon + ' ' + sortDesc,\n                add = sortAsc;\n            if (!vm.ascending) {\n                remove = sortIcon + ' ' + sortAsc;\n                add = sortDesc;\n            }\n            vm.resetClasses();\n            thisIcon.removeClass(remove);\n            thisIcon.addClass(add);\n        }\n\n        function resetClasses () {\n            var allThIcons = $element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\n            allThIcons.addClass(sortIcon);\n        }\n\n        function sort (field) {\n            if (field !== vm.predicate) {\n                vm.ascending = true;\n            } else {\n                vm.ascending = !vm.ascending;\n            }\n            vm.predicate = field;\n            $scope.$apply();\n            vm.callback();\n        }\n\n        function triggerApply (values)  {\n            vm.resetClasses();\n            if (values && values[0] !== '_score') {\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\n            }\n        }\n    }\n})();\n\n(function(){\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('ParseLinks', ParseLinks);\n\n    function ParseLinks () {\n\n        var service = {\n            parse : parse\n        };\n\n        return service;\n\n        function parse(header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, function(p) {\n                var section = p.split('>;');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \">;\"');\n                }\n                var url = section[0].replace(/<(.*)/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\n                );\n                var page = queryString.page;\n                if (angular.isString(page)) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            });\n            return links;\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('PaginationUtil', PaginationUtil);\n\n    function PaginationUtil () {\n\n        var service = {\n            parseAscending : parseAscending,\n            parsePage : parsePage,\n            parsePredicate : parsePredicate\n        };\n\n        return service;\n\n        function parseAscending (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                return sort.split(',').slice(-1)[0] === 'asc';\n            } else {\n                // default to true if no sort defined\n                return true;\n            }\n        }\n\n        // query params are strings, and need to be parsed\n        function parsePage (page) {\n            return parseInt(page);\n        }\n\n        // sort can be in the format `id,asc` or `id`\n        function parsePredicate (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                sortArray.pop();\n            }\n            return sortArray.join(',');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    var jhiItemCount = {\n        template: '<div class=\"info\" data-translate=\"global.item-count\" ' +\n        'translate-value-first=\"{{(($ctrl.page - 1) * $ctrl.itemsPerPage) == 0 ? 1 : (($ctrl.page - 1) * $ctrl.itemsPerPage + 1)}}\" ' +\n        'translate-value-second=\"{{($ctrl.page * $ctrl.itemsPerPage) < $ctrl.queryCount ? ($ctrl.page * $ctrl.itemsPerPage) : $ctrl.queryCount}}\" ' +\n        'translate-value-total=\"{{$ctrl.queryCount}}\">' +\n        'Showing {{(($ctrl.page - 1) * $ctrl.itemsPerPage) == 0 ? 1 : (($ctrl.page - 1) * $ctrl.itemsPerPage + 1)}} - ' +\n        '{{($ctrl.page * $ctrl.itemsPerPage) < $ctrl.queryCount ? ($ctrl.page * $ctrl.itemsPerPage) : $ctrl.queryCount}} ' +\n        'of {{$ctrl.queryCount}} items.' +\n        '</div>',\n        bindings: {\n            page: '<',\n            queryCount: '<total',\n            itemsPerPage: '<'\n        }\n    };\n\n    angular\n        .module('cafvalidityV2App')\n        .component('jhiItemCount', jhiItemCount);\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('DateUtils', DateUtils);\n\n    DateUtils.$inject = ['$filter'];\n\n    function DateUtils($filter) {\n\n        var service = {\n            convertDateTimeFromServer: convertDateTimeFromServer,\n            convertLocalDateFromServer: convertLocalDateFromServer,\n            convertLocalDateToServer: convertLocalDateToServer,\n            dateformat: dateformat\n        };\n\n        return service;\n\n        function convertDateTimeFromServer(date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function convertLocalDateFromServer(date) {\n            if (date) {\n                var dateString = date.split('-');\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\n            }\n            return null;\n        }\n\n        function convertLocalDateToServer(date) {\n            if (date) {\n                return $filter('date')(date, 'yyyy-MM-dd');\n            } else {\n                return null;\n            }\n        }\n\n        function dateformat() {\n            return 'yyyy-MM-dd';\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('DataUtils', DataUtils);\n\n    DataUtils.$inject = ['$window'];\n\n    function DataUtils ($window) {\n\n        var service = {\n            abbreviate: abbreviate,\n            byteSize: byteSize,\n            openFile: openFile,\n            toBase64: toBase64\n        };\n\n        return service;\n\n        function abbreviate (text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize (base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile (type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64 (file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = function (e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            };\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .filter('capitalize', capitalize);\n\n    function capitalize() {\n        return capitalizeFilter;\n\n        function capitalizeFilter (input) {\n            if (input !== null) {\n                input = input.toLowerCase();\n                input = input.substring(0, 1).toUpperCase() + input.substring(1);\n            }\n            return input;\n        }\n    }\n})();\n\n(function() {\n    /*jshint bitwise: false*/\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('Base64', Base64);\n\n    function Base64 () {\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\n            'QRSTUVWXYZabcdef' +\n            'ghijklmnopqrstuv' +\n            'wxyz0123456789+/' +\n            '=';\n\n        var service = {\n            decode : decode,\n            encode : encode\n        };\n\n        return service;\n\n        function encode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n            }\n\n            return output;\n        }\n\n        function decode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n            }\n\n            return output;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('LoginService', LoginService);\n\n    LoginService.$inject = ['$uibModal'];\n\n    function LoginService ($uibModal) {\n        var service = {\n            open: open\n        };\n\n        var modalInstance = null;\n        var resetModal = function () {\n            modalInstance = null;\n        };\n\n        return service;\n\n        function open () {\n            if (modalInstance !== null) return;\n            modalInstance = $uibModal.open({\n                animation: true,\n                templateUrl: 'app/components/login/login.html',\n                controller: 'LoginController',\n                controllerAs: 'vm'\n            });\n            modalInstance.result.then(\n                resetModal,\n                resetModal\n            );\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('LoginController', LoginController);\n\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth', '$uibModalInstance'];\n\n    function LoginController ($rootScope, $state, $timeout, Auth, $uibModalInstance) {\n        var vm = this;\n\n        vm.authenticationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {};\n        vm.login = login;\n        vm.password = null;\n        vm.register = register;\n        vm.rememberMe = true;\n        vm.requestResetPassword = requestResetPassword;\n        vm.username = null;\n\n        $timeout(function (){angular.element('#username').focus();});\n\n        function cancel () {\n            vm.credentials = {\n                username: null,\n                password: null,\n                rememberMe: true\n            };\n            vm.authenticationError = false;\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function login (event) {\n            event.preventDefault();\n            Auth.login({\n                username: vm.username,\n                password: vm.password,\n                rememberMe: vm.rememberMe\n            }).then(function () {\n                vm.authenticationError = false;\n                $uibModalInstance.close();\n                if ($state.current.name === 'register' || $state.current.name === 'activate' ||\n                    $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {\n                    $state.go('home');\n                }\n\n                $rootScope.$broadcast('authenticationSuccess');\n\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\n                // since login is successful, go to stored previousState and clear previousState\n                if (Auth.getPreviousState()) {\n                    var previousState = Auth.getPreviousState();\n                    Auth.resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n            }).catch(function () {\n                vm.authenticationError = true;\n            });\n        }\n\n        function register () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('register');\n        }\n\n        function requestResetPassword () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('requestReset');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .directive('showValidation', showValidation);\n\n    function showValidation () {\n        var directive = {\n            restrict: 'A',\n            require: 'form',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, formCtrl) {\n            element.find('.form-group').each(function() {\n                var $formGroup = angular.element(this);\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\n\n                if ($inputs.length > 0) {\n                    $inputs.each(function() {\n                        var $input = angular.element(this);\n                        var inputName = $input.attr('name');\n                        scope.$watch(function() {\n                            return formCtrl[inputName].$invalid && formCtrl[inputName].$dirty;\n                        }, function(isInvalid) {\n                            $formGroup.toggleClass('has-error', isInvalid);\n                        });\n                    });\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .constant('paginationConstants', {\n            'itemsPerPage': 20\n        });\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .directive('minbytes', minbytes);\n\n    function minbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .directive('maxbytes', maxbytes);\n\n    function maxbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    var jhiAlertError = {\n        template: '<div class=\"alerts\" ng-cloak=\"\" role=\"alert\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertErrorController\n    };\n\n    angular\n        .module('cafvalidityV2App')\n        .component('jhiAlertError', jhiAlertError);\n\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope'];\n\n    function jhiAlertErrorController ($scope, AlertService, $rootScope) {\n        var vm = this;\n\n        vm.alerts = [];\n\n        function addErrorAlert (message, key, data) {\n            vm.alerts.push(\n                AlertService.add(\n                    {\n                        type: 'danger',\n                        msg: message,\n                        timeout: 5000,\n                        toast: AlertService.isToast(),\n                        scoped: true\n                    },\n                    vm.alerts\n                )\n            );\n        }\n\n        var cleanHttpErrorListener = $rootScope.$on('cafvalidityV2App.httpError', function (event, httpResponse) {\n            var i;\n            event.stopPropagation();\n            switch (httpResponse.status) {\n            // connection refused, server not reachable\n            case 0:\n                addErrorAlert('Server not reachable','error.server.not.reachable');\n                break;\n\n            case 400:\n                var headers = Object.keys(httpResponse.headers()).filter(function (header) {\n                    return header.indexOf('app-error', header.length - 'app-error'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n                }).sort();\n                var errorHeader = httpResponse.headers(headers[0]);\n                var entityKey = httpResponse.headers(headers[1]);\n                if (angular.isString(errorHeader)) {\n                    var entityName = entityKey;\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\n                        var fieldError = httpResponse.data.fieldErrors[i];\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                        var fieldName = convertedField.charAt(0).toUpperCase() + convertedField.slice(1);\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\n                    }\n                } else if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\n                } else {\n                    addErrorAlert(httpResponse.data);\n                }\n                break;\n\n            case 404:\n                addErrorAlert('Not found','error.url.not.found');\n                break;\n\n            default:\n                if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message);\n                } else {\n                    addErrorAlert(angular.toJson(httpResponse));\n                }\n            }\n        });\n\n        $scope.$on('$destroy', function () {\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\n                cleanHttpErrorListener();\n                vm.alerts = [];\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .provider('AlertService', AlertService);\n\n    function AlertService () {\n        this.toast = false;\n        /*jshint validthis: true */\n        this.$get = getService;\n\n        this.showAsToast = function(isToast) {\n            this.toast = isToast;\n        };\n\n        getService.$inject = ['$timeout', '$sce'];\n\n        function getService ($timeout, $sce) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                timeout = 5000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                clear: clear,\n                get: get,\n                success: success,\n                error: error,\n                info: info,\n                warning : warning\n            };\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts = [];\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function success(msg, params, position) {\n                return this.add({\n                    type: 'success',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function error(msg, params, position) {\n                return this.add({\n                    type: 'danger',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function warning(msg, params, position) {\n                return this.add({\n                    type: 'warning',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function info(msg, params, position) {\n                return this.add({\n                    type: 'info',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if(!alert.scoped) {\n                    alerts.push(alert);\n                }\n                return alert;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                alertOptions.alertId = alertId++;\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(function () {\n                        that.closeAlert(alertOptions.alertId, extAlerts);\n                    }, alertOptions.timeout);\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    var jhiAlert = {\n        template: '<div class=\"alerts\" ng-cloak=\"\" role=\"alert\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre ng-bind-html=\"alert.msg\"></pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertController\n    };\n\n    angular\n        .module('cafvalidityV2App')\n        .component('jhiAlert', jhiAlert);\n\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\n\n    function jhiAlertController($scope, AlertService) {\n        var vm = this;\n\n        vm.alerts = AlertService.get();\n        $scope.$on('$destroy', function () {\n            vm.alerts = [];\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('notificationInterceptor', notificationInterceptor);\n\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\n\n    function notificationInterceptor ($q, AlertService) {\n        var service = {\n            response: response\n        };\n\n        return service;\n\n        function response (response) {\n            var headers = Object.keys(response.headers()).filter(function (header) {\n                return header.indexOf('app-alert', header.length - 'app-alert'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n            }).sort();\n            var alertKey = response.headers(headers[0]);\n            if (angular.isString(alertKey)) {\n                AlertService.success(alertKey, { param : response.headers(headers[1])});\n            }\n            return response;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\n\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\n\n    function errorHandlerInterceptor ($q, $rootScope) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError (response) {\n            if (!(response.status === 401 && (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account') === 0 )))) {\n                $rootScope.$emit('cafvalidityV2App.httpError', response);\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\n\n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector', '$localStorage', '$sessionStorage'];\n\n    function authExpiredInterceptor($rootScope, $q, $injector, $localStorage, $sessionStorage) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError(response) {\n            if (response.status === 401) {\n                delete $localStorage.authenticationToken;\n                delete $sessionStorage.authenticationToken;\n                var Principal = $injector.get('Principal');\n                if (Principal.isAuthenticated()) {\n                    var Auth = $injector.get('Auth');\n                    Auth.authorize(true);\n                }\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('authInterceptor', authInterceptor);\n\n    authInterceptor.$inject = ['$rootScope', '$q', '$location', '$localStorage', '$sessionStorage'];\n\n    function authInterceptor ($rootScope, $q, $location, $localStorage, $sessionStorage) {\n        var service = {\n            request: request\n        };\n\n        return service;\n\n        function request (config) {\n            /*jshint camelcase: false */\n            config.headers = config.headers || {};\n            var token = $localStorage.authenticationToken || $sessionStorage.authenticationToken;\n            if (token) {\n                config.headers.Authorization = 'Bearer ' + token;\n            }\n            return config;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('stateHandler', stateHandler);\n\n    stateHandler.$inject = ['$rootScope', '$state', '$sessionStorage',  '$window',\n        'Auth', 'Principal', 'VERSION'];\n\n    function stateHandler($rootScope, $state, $sessionStorage,  $window,\n        Auth, Principal, VERSION) {\n        return {\n            initialize: initialize\n        };\n\n        function initialize() {\n            $rootScope.VERSION = VERSION;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams, fromState) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n                $rootScope.fromState = fromState;\n\n                // Redirect to a state with an external URL (http://stackoverflow.com/a/30221248/1098564)\n                if (toState.external) {\n                    event.preventDefault();\n                    $window.open(toState.url, '_self');\n                }\n\n                if (Principal.isIdentityResolved()) {\n                    Auth.authorize();\n                }\n\n            });\n\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'cafvalidity_v2' ;\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                $window.document.title = titleKey;\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\n                    stateChangeSuccess();\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(paginationConfig);\n\n    paginationConfig.$inject = ['uibPaginationConfig', 'paginationConstants'];\n\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPaginationConfig.maxSize = 5;\n        uibPaginationConfig.boundaryLinks = true;\n        uibPaginationConfig.firstText = '«';\n        uibPaginationConfig.previousText = '‹';\n        uibPaginationConfig.nextText = '›';\n        uibPaginationConfig.lastText = '»';\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(pagerConfig);\n\n    pagerConfig.$inject = ['uibPagerConfig', 'paginationConstants'];\n\n    function pagerConfig(uibPagerConfig, paginationConstants) {\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPagerConfig.previousText = '«';\n        uibPagerConfig.nextText = '»';\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = ['$localStorageProvider', '$sessionStorageProvider'];\n\n    function localStorageConfig($localStorageProvider, $sessionStorageProvider) {\n        $localStorageProvider.setKeyPrefix('jhi-');\n        $sessionStorageProvider.setKeyPrefix('jhi-');\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(httpConfig);\n\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\n\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('authExpiredInterceptor');\n        $httpProvider.interceptors.push('authInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\n\n        $urlMatcherFactoryProvider.type('boolean', {\n            name : 'boolean',\n            decode: function(val) { return val === true || val === 'true'; },\n            encode: function(val) { return val ? 1 : 0; },\n            equals: function(a, b) { return this.is(a) && a === b; },\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\n            pattern: /bool|true|0|1/\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(compileServiceConfig);\n\n    compileServiceConfig.$inject = ['$compileProvider','DEBUG_INFO_ENABLED'];\n\n    function compileServiceConfig($compileProvider,DEBUG_INFO_ENABLED) {\n        // disable debug data on prod profile to improve performance\n        $compileProvider.debugInfoEnabled(DEBUG_INFO_ENABLED);\n\n        /*\n        If you wish to debug an application with this information\n        then you should open up a debug console in the browser\n        then call this method directly in this console:\n\n\t\tangular.reloadWithDebugInfo();\n\t\t*/\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(alertServiceConfig);\n\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\n\n    function alertServiceConfig(AlertServiceProvider) {\n        // set below to true to make alerts look like toast\n        AlertServiceProvider.showAsToast(false);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                authorize: ['Auth',\n                    function (Auth) {\n                        return Auth.authorize();\n                    }\n                ]\n            }\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('cafvalidityV2App')\n        .constant('VERSION', \"0.0.1-SNAPSHOT\")\n        .constant('DEBUG_INFO_ENABLED', false)\n        .constant('BUILD_TIMESTAMP', 1518557892966)\n;\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('UserManagementDialogController',UserManagementDialogController);\n\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDialogController ($stateParams, $uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.languages = null;\n        vm.save = save;\n        vm.user = entity;\n\n\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function onSaveSuccess (result) {\n            vm.isSaving = false;\n            $uibModalInstance.close(result);\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.user.id !== null) {\n                User.update(vm.user, onSaveSuccess, onSaveError);\n            } else {\n                vm.user.langKey = 'en';\n                User.save(vm.user, onSaveSuccess, onSaveError);\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('UserManagementDetailController', UserManagementDetailController);\n\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\n\n    function UserManagementDetailController($stateParams, User) {\n        var vm = this;\n\n        vm.load = load;\n        vm.user = {};\n\n        vm.load($stateParams.login);\n\n        function load(login) {\n            User.get({login: login}, function(result) {\n                vm.user = result;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\n\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.user = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (login) {\n            User.delete({login: login},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('user-management', {\n            parent: 'admin',\n            url: '/user-management?page&sort',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Users'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management.html',\n                    controller: 'UserManagementController',\n                    controllerAs: 'vm'\n                }\n            },            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                }\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort)\n                    };\n                }]\n            }        })\n        .state('user-management.new', {\n            url: '/new',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                id: null, login: null, firstName: null, lastName: null, email: null,\n                                activated: true, langKey: null, createdBy: null, createdDate: null,\n                                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                                resetKey: null, authorities: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('user-management');\n                });\n            }]\n        })\n        .state('user-management.edit', {\n            url: '/{login}/edit',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('user-management-detail', {\n            parent: 'user-management',\n            url: '/{login}',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'cafvalidity_v2'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management-detail.html',\n                    controller: 'UserManagementDetailController',\n                    controllerAs: 'vm'\n                }\n            }\n        })\n        .state('user-management.delete', {\n            url: '/{login}/delete',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\n                    controller: 'UserManagementDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('UserManagementController', UserManagementController);\n\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'AlertService', '$state', 'pagingParams', 'paginationConstants'];\n\n    function UserManagementController(Principal, User, ParseLinks, AlertService, $state, pagingParams, paginationConstants) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.currentAccount = null;\n        vm.languages = null;\n        vm.loadAll = loadAll;\n        vm.setActive = setActive;\n        vm.users = [];\n        vm.page = 1;\n        vm.totalItems = null;\n        vm.clear = clear;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.transition = transition;\n\n        vm.loadAll();\n        Principal.identity().then(function(account) {\n            vm.currentAccount = account;\n        });\n\n        function setActive (user, isActivated) {\n            user.activated = isActivated;\n            User.update(user, function () {\n                vm.loadAll();\n                vm.clear();\n            });\n        }\n\n        function loadAll () {\n            User.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n        }\n\n        function onSuccess(data, headers) {\n            vm.links = ParseLinks.parse(headers('link'));\n            vm.totalItems = headers('X-Total-Count');\n            vm.queryCount = vm.totalItems;\n            vm.page = pagingParams.page;\n            vm.users = data;\n        }\n\n        function onError(error) {\n            AlertService.error(error.data.message);\n        }\n\n        function clear () {\n            vm.user = {\n                id: null, login: null, firstName: null, lastName: null, email: null,\n                activated: null, langKey: null, createdBy: null, createdDate: null,\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                resetKey: null, authorities: null\n            };\n        }\n\n        function sort () {\n            var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n            if (vm.predicate !== 'id') {\n                result.push('id');\n            }\n            return result;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-metrics', {\n            parent: 'admin',\n            url: '/metrics',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Application Metrics'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/metrics/metrics.html',\n                    controller: 'JhiMetricsMonitoringController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('JhiMetricsService', JhiMetricsService);\n\n    JhiMetricsService.$inject = ['$rootScope', '$http'];\n\n    function JhiMetricsService ($rootScope, $http) {\n        var service = {\n            getMetrics: getMetrics,\n            threadDump: threadDump\n        };\n\n        return service;\n\n        function getMetrics () {\n            return $http.get('management/metrics').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function threadDump () {\n            return $http.get('management/dump').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('JhiMetricsMonitoringModalController', JhiMetricsMonitoringModalController);\n\n    JhiMetricsMonitoringModalController.$inject = ['$uibModalInstance', 'threadDump'];\n\n    function JhiMetricsMonitoringModalController ($uibModalInstance, threadDump) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.getLabelClass = getLabelClass;\n        vm.threadDump = threadDump;\n        vm.threadDumpAll = 0;\n        vm.threadDumpBlocked = 0;\n        vm.threadDumpRunnable = 0;\n        vm.threadDumpTimedWaiting = 0;\n        vm.threadDumpWaiting = 0;\n\n        angular.forEach(threadDump, function(value) {\n            if (value.threadState === 'RUNNABLE') {\n                vm.threadDumpRunnable += 1;\n            } else if (value.threadState === 'WAITING') {\n                vm.threadDumpWaiting += 1;\n            } else if (value.threadState === 'TIMED_WAITING') {\n                vm.threadDumpTimedWaiting += 1;\n            } else if (value.threadState === 'BLOCKED') {\n                vm.threadDumpBlocked += 1;\n            }\n        });\n\n        vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +\n            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;\n\n        function cancel () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function getLabelClass (threadState) {\n            if (threadState === 'RUNNABLE') {\n                return 'label-success';\n            } else if (threadState === 'WAITING') {\n                return 'label-info';\n            } else if (threadState === 'TIMED_WAITING') {\n                return 'label-warning';\n            } else if (threadState === 'BLOCKED') {\n                return 'label-danger';\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('JhiMetricsMonitoringController', JhiMetricsMonitoringController);\n\n    JhiMetricsMonitoringController.$inject = ['$scope','JhiMetricsService', '$uibModal'];\n\n    function JhiMetricsMonitoringController ($scope, JhiMetricsService, $uibModal) {\n        var vm = this;\n\n        vm.cachesStats = {};\n        vm.metrics = {};\n        vm.refresh = refresh;\n        vm.refreshThreadDumpData = refreshThreadDumpData;\n        vm.servicesStats = {};\n        vm.updatingMetrics = true;\n\n        vm.refresh();\n\n        $scope.$watch('vm.metrics', function (newValue) {\n            vm.servicesStats = {};\n            angular.forEach(newValue.timers, function (value, key) {\n                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                    vm.servicesStats[key] = value;\n                }\n            });\n\n            vm.cachesStats = {};\n            angular.forEach(newValue.gauges, function (value, key) {\n                if (key.indexOf('jcache.statistics') !== -1) {\n                    // remove gets or puts\n                    var index = key.lastIndexOf('.');\n                    var newKey = key.substr(0, index);\n\n                    // Keep the name of the domain\n                    vm.cachesStats[newKey] = {\n                        'name': newKey.substr(18),\n                        'value': value\n                    };\n                }\n            });\n        });\n\n        function refresh () {\n            vm.updatingMetrics = true;\n            JhiMetricsService.getMetrics().then(function (promise) {\n                vm.metrics = promise;\n                vm.updatingMetrics = false;\n            }, function (promise) {\n                vm.metrics = promise.data;\n                vm.updatingMetrics = false;\n            });\n        }\n\n        function refreshThreadDumpData () {\n            JhiMetricsService.threadDump().then(function(data) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/metrics/metrics.modal.html',\n                    controller: 'JhiMetricsMonitoringModalController',\n                    controllerAs: 'vm',\n                    size: 'lg',\n                    resolve: {\n                        threadDump: function() {\n                            return data;\n                        }\n\n                    }\n                });\n            });\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('logs', {\n            parent: 'admin',\n            url: '/logs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Logs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/logs/logs.html',\n                    controller: 'LogsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('LogsService', LogsService);\n\n    LogsService.$inject = ['$resource'];\n\n    function LogsService ($resource) {\n        var service = $resource('management/logs', {}, {\n            'findAll': { method: 'GET', isArray: true},\n            'changeLevel': { method: 'PUT'}\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('LogsController', LogsController);\n\n    LogsController.$inject = ['LogsService'];\n\n    function LogsController (LogsService) {\n        var vm = this;\n\n        vm.changeLevel = changeLevel;\n        vm.loggers = LogsService.findAll();\n\n        function changeLevel (name, level) {\n            LogsService.changeLevel({name: name, level: level}, function () {\n                vm.loggers = LogsService.findAll();\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-health', {\n            parent: 'admin',\n            url: '/health',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Health Checks'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/health/health.html',\n                    controller: 'JhiHealthCheckController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('JhiHealthService', JhiHealthService);\n\n    JhiHealthService.$inject = ['$rootScope', '$http'];\n\n    function JhiHealthService ($rootScope, $http) {\n        var separator = '.';\n        var service = {\n            checkHealth: checkHealth,\n            transformHealthData: transformHealthData,\n            getBaseName: getBaseName,\n            getSubSystemName: getSubSystemName\n        };\n\n        return service;\n\n        function checkHealth () {\n            return $http.get('management/health').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function transformHealthData (data) {\n            var response = [];\n            flattenHealthData(response, null, data);\n            return response;\n        }\n\n        function getBaseName (name) {\n            if (name) {\n                var split = name.split('.');\n                return split[0];\n            }\n        }\n\n        function getSubSystemName (name) {\n            if (name) {\n                var split = name.split('.');\n                split.splice(0, 1);\n                var remainder = split.join('.');\n                return remainder ? ' - ' + remainder : '';\n            }\n        }\n\n        /* private methods */\n        function flattenHealthData (result, path, data) {\n            angular.forEach(data, function (value, key) {\n                if (isHealthObject(value)) {\n                    if (hasSubSystem(value)) {\n                        addHealthObject(result, false, value, getModuleName(path, key));\n                        flattenHealthData(result, getModuleName(path, key), value);\n                    } else {\n                        addHealthObject(result, true, value, getModuleName(path, key));\n                    }\n                }\n            });\n            return result;\n        }\n\n        function addHealthObject (result, isLeaf, healthObject, name) {\n\n            var healthData = {\n                'name': name\n            };\n            var details = {};\n            var hasDetails = false;\n\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            });\n\n            // Add the of the details\n            if (hasDetails) {\n                angular.extend(healthData, { 'details': details});\n            }\n\n            // Only add nodes if they provide additional information\n            if (isLeaf || hasDetails || healthData.error) {\n                result.push(healthData);\n            }\n            return healthData;\n        }\n\n        function getModuleName (path, name) {\n            var result;\n            if (path && name) {\n                result = path + separator + name;\n            }  else if (path) {\n                result = path;\n            } else if (name) {\n                result = name;\n            } else {\n                result = '';\n            }\n            return result;\n        }\n\n        function hasSubSystem (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value) {\n                if (value && value.status) {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function isHealthObject (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status') {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular.module('cafvalidityV2App')\n        .controller('HealthModalController', HealthModalController);\n\n    HealthModalController.$inject = ['$uibModalInstance', 'currentHealth', 'baseName', 'subSystemName'];\n\n    function HealthModalController ($uibModalInstance, currentHealth, baseName, subSystemName) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.currentHealth = currentHealth;\n        vm.baseName = baseName;\n        vm.subSystemName = subSystemName;\n\n        function cancel() {\n            $uibModalInstance.dismiss('cancel');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('JhiHealthCheckController', JhiHealthCheckController);\n\n    JhiHealthCheckController.$inject = ['JhiHealthService', '$uibModal'];\n\n    function JhiHealthCheckController (JhiHealthService, $uibModal) {\n        var vm = this;\n\n        vm.updatingHealth = true;\n        vm.getLabelClass = getLabelClass;\n        vm.refresh = refresh;\n        vm.showHealth = showHealth;\n        vm.baseName = JhiHealthService.getBaseName;\n        vm.subSystemName = JhiHealthService.getSubSystemName;\n\n        vm.refresh();\n\n        function getLabelClass (statusState) {\n            if (statusState === 'UP') {\n                return 'label-success';\n            } else {\n                return 'label-danger';\n            }\n        }\n\n        function refresh () {\n            vm.updatingHealth = true;\n            JhiHealthService.checkHealth().then(function (response) {\n                vm.healthData = JhiHealthService.transformHealthData(response);\n                vm.updatingHealth = false;\n            }, function (response) {\n                vm.healthData =  JhiHealthService.transformHealthData(response.data);\n                vm.updatingHealth = false;\n            });\n        }\n\n        function showHealth (health) {\n            $uibModal.open({\n                templateUrl: 'app/admin/health/health.modal.html',\n                controller: 'HealthModalController',\n                controllerAs: 'vm',\n                size: 'lg',\n                resolve: {\n                    currentHealth: function() {\n                        return health;\n                    },\n                    baseName: function() {\n                        return vm.baseName;\n                    },\n                    subSystemName: function() {\n                        return vm.subSystemName;\n                    }\n\n                }\n            });\n        }\n\n    }\n})();\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('cafvalidityV2App')\r\n        .controller('ElasticsearchReindexDialogController', ElasticsearchReindexDialogController);\r\n\r\n    ElasticsearchReindexDialogController.$inject = ['$uibModalInstance', 'ElasticsearchReindex'];\r\n\r\n    function ElasticsearchReindexDialogController($uibModalInstance, ElasticsearchReindex) {\r\n        var vm = this;\r\n\r\n        vm.clear = clear;\r\n        vm.confirmReindex = confirmReindex;\r\n\r\n        function clear() {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function confirmReindex() {\r\n            ElasticsearchReindex.reindex(function () {\r\n                $uibModalInstance.close(true);\r\n            });\r\n        }\r\n    }\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('cafvalidityV2App')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('elasticsearch-reindex', {\r\n            parent: 'admin',\r\n            url: '/elasticsearch-reindex',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'elasticsearch.reindex.title'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/elasticsearch-reindex/elasticsearch-reindex.html',\r\n                    controller: 'ElasticsearchReindexController',\r\n                    controllerAs: 'vm'\r\n                }\r\n            },\r\n            resolve: {\r\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\r\n                    $translatePartialLoader.addPart('elasticsearch-reindex');\r\n                    $translatePartialLoader.addPart('global');\r\n                    return $translate.refresh();\r\n                }]\r\n            }\r\n        }).state('elasticsearch-reindex.dialog', {\r\n            parent: 'elasticsearch-reindex',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            },\r\n            onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\r\n                $uibModal.open({\r\n                    templateUrl: 'app/admin/elasticsearch-reindex/elasticsearch-reindex-dialog.html',\r\n                    controller: 'ElasticsearchReindexDialogController',\r\n                    controllerAs: 'vm',\r\n                    size: 'sm'\r\n                }).result.finally(function () {\r\n                    $state.go('^');\r\n                });\r\n            }]\r\n        });\r\n    }\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('cafvalidityV2App')\r\n        .factory('ElasticsearchReindex', ElasticsearchReindex);\r\n\r\n    ElasticsearchReindex.$inject = ['$resource'];\r\n\r\n    function ElasticsearchReindex($resource) {\r\n        var service = $resource('api/elasticsearch/index', {}, {\r\n            'reindex': {method: 'POST'}\r\n        });\r\n\r\n        return service;\r\n    }\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('cafvalidityV2App')\r\n        .controller('ElasticsearchReindexController', ElasticsearchReindexController);\r\n\r\n    ElasticsearchReindexController.$inject = [];\r\n\r\n    function ElasticsearchReindexController() {\r\n    }\r\n})();\r\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('docs', {\n            parent: 'admin',\n            url: '/docs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'API'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/docs/docs.html'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-configuration', {\n            parent: 'admin',\n            url: '/configuration',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Configuration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/configuration/configuration.html',\n                    controller: 'JhiConfigurationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('JhiConfigurationService', JhiConfigurationService);\n\n    JhiConfigurationService.$inject = ['$filter', '$http'];\n\n    function JhiConfigurationService ($filter, $http) {\n        var service = {\n            get: get,\n            getEnv: getEnv\n        };\n\n        return service;\n\n        function get () {\n            return $http.get('management/configprops').then(getConfigPropsComplete);\n\n            function getConfigPropsComplete (response) {\n                var properties = [];\n                angular.forEach(response.data, function (data) {\n                    properties.push(data);\n                });\n                var orderBy = $filter('orderBy');\n                return orderBy(properties, 'prefix');\n            }\n        }\n\n        function getEnv () {\n            return $http.get('management/env').then(getEnvComplete);\n\n            function getEnvComplete (response) {\n                var properties = {};\n                angular.forEach(response.data, function (val,key) {\n                    var vals = [];\n                    angular.forEach(val, function (v,k) {\n                        vals.push({ key:k, val:v });\n                    });\n                    properties[key] = vals;\n                });\n                return properties;\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('JhiConfigurationController', JhiConfigurationController);\n\n    JhiConfigurationController.$inject = ['$filter','JhiConfigurationService'];\n\n    function JhiConfigurationController (filter,JhiConfigurationService) {\n        var vm = this;\n\n        vm.allConfiguration = null;\n        vm.configuration = null;\n\n        JhiConfigurationService.get().then(function(configuration) {\n            vm.configuration = configuration;\n        });\n        JhiConfigurationService.getEnv().then(function (configuration) {\n            vm.allConfiguration = configuration;\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('audits', {\n            parent: 'admin',\n            url: '/audits',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Audits'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/audits/audits.html',\n                    controller: 'AuditsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .factory('AuditsService', AuditsService);\n\n    AuditsService.$inject = ['$resource'];\n\n    function AuditsService ($resource) {\n        var service = $resource('management/audits/:id', {}, {\n            'get': {\n                method: 'GET',\n                isArray: true\n            },\n            'query': {\n                method: 'GET',\n                isArray: true,\n                params: {fromDate: null, toDate: null}\n            }\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('AuditsController', AuditsController);\n\n    AuditsController.$inject = ['$filter', 'AuditsService', 'ParseLinks'];\n\n    function AuditsController ($filter, AuditsService, ParseLinks) {\n        var vm = this;\n\n        vm.audits = null;\n        vm.fromDate = null;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.onChangeDate = onChangeDate;\n        vm.page = 1;\n        vm.previousMonth = previousMonth;\n        vm.toDate = null;\n        vm.today = today;\n        vm.totalItems = null;\n\n        vm.today();\n        vm.previousMonth();\n        vm.onChangeDate();\n\n        function onChangeDate () {\n            var dateFormat = 'yyyy-MM-dd';\n            var fromDate = $filter('date')(vm.fromDate, dateFormat);\n            var toDate = $filter('date')(vm.toDate, dateFormat);\n\n            AuditsService.query({page: vm.page -1, size: 20, fromDate: fromDate, toDate: toDate}, function(result, headers){\n                vm.audits = result;\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n            });\n        }\n\n        // Date picker configuration\n        function today () {\n            // Today + 1 day - needed if the current day must be included\n            var today = new Date();\n            vm.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n        }\n\n        function previousMonth () {\n            var fromDate = new Date();\n            if (fromDate.getMonth() === 0) {\n                fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());\n            } else {\n                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());\n            }\n\n            vm.fromDate = fromDate;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.onChangeDate();\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('admin', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('settings', {\n            parent: 'account',\n            url: '/settings',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Settings'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/settings/settings.html',\n                    controller: 'SettingsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('SettingsController', SettingsController);\n\n    SettingsController.$inject = ['Principal', 'Auth'];\n\n    function SettingsController (Principal, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.save = save;\n        vm.settingsAccount = null;\n        vm.success = null;\n\n        /**\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\n         */\n        var copyAccount = function (account) {\n            return {\n                activated: account.activated,\n                email: account.email,\n                firstName: account.firstName,\n                langKey: account.langKey,\n                lastName: account.lastName,\n                login: account.login\n            };\n        };\n\n        Principal.identity().then(function(account) {\n            vm.settingsAccount = copyAccount(account);\n        });\n\n        function save () {\n            Auth.updateAccount(vm.settingsAccount).then(function() {\n                vm.error = null;\n                vm.success = 'OK';\n                Principal.identity(true).then(function(account) {\n                    vm.settingsAccount = copyAccount(account);\n                });\n            }).catch(function() {\n                vm.success = null;\n                vm.error = 'ERROR';\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('requestReset', {\n            parent: 'account',\n            url: '/reset/request',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/request/reset.request.html',\n                    controller: 'RequestResetController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('RequestResetController', RequestResetController);\n\n    RequestResetController.$inject = ['$timeout', 'Auth'];\n\n    function RequestResetController ($timeout, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.errorEmailNotExists = null;\n        vm.requestReset = requestReset;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#email').focus();});\n\n        function requestReset () {\n\n            vm.error = null;\n            vm.errorEmailNotExists = null;\n\n            Auth.resetPasswordInit(vm.resetAccount.email).then(function () {\n                vm.success = 'OK';\n            }).catch(function (response) {\n                vm.success = null;\n                if (response.status === 400 && response.data === 'email address not registered') {\n                    vm.errorEmailNotExists = 'ERROR';\n                } else {\n                    vm.error = 'ERROR';\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('finishReset', {\n            parent: 'account',\n            url: '/reset/finish?key',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/finish/reset.finish.html',\n                    controller: 'ResetFinishController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('ResetFinishController', ResetFinishController);\n\n    ResetFinishController.$inject = ['$stateParams', '$timeout', 'Auth', 'LoginService'];\n\n    function ResetFinishController ($stateParams, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.keyMissing = angular.isUndefined($stateParams.key);\n        vm.confirmPassword = null;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.finishReset = finishReset;\n        vm.login = LoginService.open;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#password').focus();});\n\n        function finishReset() {\n            vm.doNotMatch = null;\n            vm.error = null;\n            if (vm.resetAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                Auth.resetPasswordFinish({key: $stateParams.key, newPassword: vm.resetAccount.password}).then(function () {\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('register', {\n            parent: 'account',\n            url: '/register',\n            data: {\n                authorities: [],\n                pageTitle: 'Registration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/register/register.html',\n                    controller: 'RegisterController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('RegisterController', RegisterController);\n\n\n    RegisterController.$inject = [ '$timeout', 'Auth', 'LoginService'];\n\n    function RegisterController ($timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.errorUserExists = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        vm.registerAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#login').focus();});\n\n        function register () {\n            if (vm.registerAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.registerAccount.langKey =  'en' ;\n                vm.doNotMatch = null;\n                vm.error = null;\n                vm.errorUserExists = null;\n                vm.errorEmailExists = null;\n\n                Auth.createAccount(vm.registerAccount).then(function () {\n                    vm.success = 'OK';\n                }).catch(function (response) {\n                    vm.success = null;\n                    if (response.status === 400 && response.data === 'login already in use') {\n                        vm.errorUserExists = 'ERROR';\n                    } else if (response.status === 400 && response.data === 'email address already in use') {\n                        vm.errorEmailExists = 'ERROR';\n                    } else {\n                        vm.error = 'ERROR';\n                    }\n                });\n            }\n        }\n    }\n})();\n\n/* globals $ */\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .directive('passwordStrengthBar', passwordStrengthBar);\n\n    function passwordStrengthBar () {\n        var directive = {\n            replace: true,\n            restrict: 'E',\n            template: '<div id=\"strength\">' +\n                '<small>Password strength:</small>' +\n                '<ul id=\"strengthBar\">' +\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\n                '</ul>' +\n                '</div>',\n            scope: {\n                passwordToCheck: '='\n            },\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods*/\n\n        function linkFunc(scope, iElement) {\n            var strength = {\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\n                mesureStrength: function (p) {\n\n                    var _force = 0;\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\n\n                    var _lowerLetters = /[a-z]+/.test(p);\n                    var _upperLetters = /[A-Z]+/.test(p);\n                    var _numbers = /[0-9]+/.test(p);\n                    var _symbols = _regex.test(p);\n\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\n                    var _passedMatches = $.grep(_flags, function (el) {\n                        return el === true;\n                    }).length;\n\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\n                    _force += _passedMatches * 10;\n\n                    // penalty (short password)\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\n\n                    // penalty (poor variety of characters)\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\n\n                    return _force;\n\n                },\n                getColor: function (s) {\n\n                    var idx;\n                    if (s <= 10) {\n                        idx = 0;\n                    }\n                    else if (s <= 20) {\n                        idx = 1;\n                    }\n                    else if (s <= 30) {\n                        idx = 2;\n                    }\n                    else if (s <= 40) {\n                        idx = 3;\n                    }\n                    else {\n                        idx = 4;\n                    }\n\n                    return { idx: idx + 1, col: this.colors[idx] };\n                }\n            };\n            scope.$watch('passwordToCheck', function (password) {\n                if (password) {\n                    var c = strength.getColor(strength.mesureStrength(password));\n                    iElement.removeClass('ng-hide');\n                    iElement.find('ul').children('li')\n                        .css({ 'background-color': '#DDD' })\n                        .slice(0, c.idx)\n                        .css({ 'background-color': c.col });\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('password', {\n            parent: 'account',\n            url: '/password',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Password'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/password/password.html',\n                    controller: 'PasswordController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('PasswordController', PasswordController);\n\n    PasswordController.$inject = ['Auth', 'Principal'];\n\n    function PasswordController (Auth, Principal) {\n        var vm = this;\n\n        vm.changePassword = changePassword;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.success = null;\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function changePassword () {\n            if (vm.password !== vm.confirmPassword) {\n                vm.error = null;\n                vm.success = null;\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.doNotMatch = null;\n                Auth.changePassword(vm.password).then(function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('activate', {\n            parent: 'account',\n            url: '/activate?key',\n            data: {\n                authorities: [],\n                pageTitle: 'Activation'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/activate/activate.html',\n                    controller: 'ActivationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .controller('ActivationController', ActivationController);\n\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\n\n    function ActivationController ($stateParams, Auth, LoginService) {\n        var vm = this;\n\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\n            vm.error = null;\n            vm.success = 'OK';\n        }).catch(function () {\n            vm.success = null;\n            vm.error = 'ERROR';\n        });\n\n        vm.login = LoginService.open;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('cafvalidityV2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('account', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n(function(){angular.module('cafvalidityV2App').run(['$templateCache', function($templateCache) {$templateCache.put('app/home/home.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-4\"><span class=\"hipster img-responsive img-rounded\"></span></div><div class=\"col-md-8\"><h1>Welcome, Java Hipster!</h1><p class=\"lead\">This is your homepage</p><div ng-switch=\"vm.isAuthenticated()\"><div class=\"alert alert-success\" ng-switch-when=\"true\">You are logged in as user \"{{vm.account.login}}\".</div><div class=\"alert alert-warning\" ng-switch-when=\"false\">If you want to <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>, you can try the default accounts:<br>- Administrator (login=\"admin\" and password=\"admin\")<br>- User (login=\"user\" and password=\"user\").</div><div class=\"alert alert-warning\" ng-switch-when=\"false\">You don\\'t have an account yet? <a class=\"alert-link\" ui-sref=\"register\">Register a new account</a></div></div><p>If you have any question on JHipster:</p><ul><li><a href=\"https://jhipster.github.io/\" target=\"_blank\" rel=\"noopener\">JHipster homepage</a></li><li><a href=\"http://stackoverflow.com/tags/jhipster/info\" target=\"_blank\" rel=\"noopener\">JHipster on Stack Overflow</a></li><li><a href=\"https://github.com/jhipster/generator-jhipster/issues?state=open\" target=\"_blank\" rel=\"noopener\">JHipster bug tracker</a></li><li><a href=\"https://gitter.im/jhipster/generator-jhipster\" target=\"_blank\" rel=\"noopener\">JHipster public chat room</a></li><li><a href=\"https://twitter.com/java_hipster\" target=\"_blank\" rel=\"noopener\">follow @java_hipster on Twitter</a></li></ul><p><span>If you like JHipster, don\\'t forget to give us a star on </span>&nbsp;<a href=\"https://github.com/jhipster/generator-jhipster\" target=\"_blank\" rel=\"noopener\">GitHub</a>!</p></div></div></div>');\n$templateCache.put('app/account/activate/activate.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1>Activation</h1><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Your user has been activated.</strong> Please <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>.</div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><strong>Your user could not be activated.</strong> Please use the registration form to sign up.</div></div></div></div>');\n$templateCache.put('app/account/password/password.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h2>Password for [<b>{{vm.account.login}}</b>]</h2><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Password changed!</strong></div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><strong>An error has occurred!</strong> The password could not be changed.</div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\">The password and its confirmation do not match!</div><form name=\"form\" role=\"form\" novalidate ng-submit=\"vm.changePassword()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"password\">New password</label><input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"New password\" ng-model=\"vm.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\">New password confirmation</label><input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"Confirm the new password\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\">Your confirmation password is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\">Your confirmation password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Save</button></form></div></div></div>');\n$templateCache.put('app/account/register/register.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1>Registration</h1><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Registration saved!</strong> Please check your email for confirmation.</div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><strong>Registration failed!</strong> Please try again later.</div><div class=\"alert alert-danger\" ng-show=\"vm.errorUserExists\"><strong>Login name already registered!</strong> Please choose another one.</div><div class=\"alert alert-danger\" ng-show=\"vm.errorEmailExists\"><strong>Email is already in use!</strong> Please choose another one.</div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\">The password and its confirmation do not match!</div></div><div class=\"col-md-8 col-md-offset-2\"><form ng-show=\"!vm.success\" name=\"form\" role=\"form\" novalidate ng-submit=\"vm.register()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"login\">Username</label><input type=\"text\" class=\"form-control\" id=\"login\" name=\"login\" placeholder=\"Your username\" ng-model=\"vm.registerAccount.login\" ng-minlength=\"1\" ng-maxlength=\"50\" ng-pattern=\"/^[_\\'.@A-Za-z0-9-]*$/\" required><div ng-show=\"form.login.$dirty && form.login.$invalid\"><p class=\"help-block\" ng-show=\"form.login.$error.required\">Your username is required.</p><p class=\"help-block\" ng-show=\"form.login.$error.minlength\">Your username is required to be at least 1 character.</p><p class=\"help-block\" ng-show=\"form.login.$error.maxlength\">Your username cannot be longer than 50 characters.</p><p class=\"help-block\" ng-show=\"form.login.$error.pattern\">Your username can only contain lower-case letters and digits.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"email\">Email</label><input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"Your email\" ng-model=\"vm.registerAccount.email\" ng-minlength=\"5\" ng-maxlength=\"100\" required><div ng-show=\"form.email.$dirty && form.email.$invalid\"><p class=\"help-block\" ng-show=\"form.email.$error.required\">Your email is required.</p><p class=\"help-block\" ng-show=\"form.email.$error.email\">Your email is invalid.</p><p class=\"help-block\" ng-show=\"form.email.$error.minlength\">Your email is required to be at least 5 characters.</p><p class=\"help-block\" ng-show=\"form.email.$error.maxlength\">Your email cannot be longer than 100 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"password\">New password</label><input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"New password\" ng-model=\"vm.registerAccount.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.registerAccount.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\">New password confirmation</label><input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"Confirm the new password\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\">Your confirmation password is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\">Your confirmation password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Register</button></form><p></p><div class=\"alert alert-warning\">If you want to <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>, you can try the default accounts:<br>- Administrator (login=\"admin\" and password=\"admin\")<br>- User (login=\"user\" and password=\"user\").</div></div></div></div>');\n$templateCache.put('app/account/settings/settings.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h2>User settings for [<b>{{vm.settingsAccount.login}}</b>]</h2><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Settings saved!</strong></div><jhi-alert-error></jhi-alert-error><form name=\"form\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"firstName\">First Name</label><input type=\"text\" class=\"form-control\" id=\"firstName\" name=\"firstName\" placeholder=\"Your first name\" ng-model=\"vm.settingsAccount.firstName\" ng-minlength=\"1\" ng-maxlength=\"50\" required maxlength=\"50\"><div ng-show=\"form.firstName.$dirty && form.firstName.$invalid\"><p class=\"help-block\" ng-show=\"form.firstName.$error.required\">Your first name is required.</p><p class=\"help-block\" ng-show=\"form.firstName.$error.minlength\">Your first name is required to be at least 1 character.</p><p class=\"help-block\" ng-show=\"form.firstName.$error.maxlength\">Your first name cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"lastName\">Last Name</label><input type=\"text\" class=\"form-control\" id=\"lastName\" name=\"lastName\" placeholder=\"Your last name\" ng-model=\"vm.settingsAccount.lastName\" ng-minlength=\"1\" ng-maxlength=\"50\" required maxlength=\"50\"><div ng-show=\"form.lastName.$dirty && form.lastName.$invalid\"><p class=\"help-block\" ng-show=\"form.lastName.$error.required\">Your last name is required.</p><p class=\"help-block\" ng-show=\"form.lastName.$error.minlength\">Your last name is required to be at least 1 character.</p><p class=\"help-block\" ng-show=\"form.lastName.$error.maxlength\">Your last name cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"email\">Email</label><input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"Your email\" ng-model=\"vm.settingsAccount.email\" ng-minlength=\"5\" ng-maxlength=\"100\" required maxlength=\"100\"><div ng-show=\"form.email.$dirty && form.email.$invalid\"><p class=\"help-block\" ng-show=\"form.email.$error.required\">Your email is required.</p><p class=\"help-block\" ng-show=\"form.email.$error.email\">Your email is invalid.</p><p class=\"help-block\" ng-show=\"form.email.$error.minlength\">Your email is required to be at least 5 characters.</p><p class=\"help-block\" ng-show=\"form.email.$error.maxlength\">Your email cannot be longer than 100 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Save</button></form></div></div></div>');\n$templateCache.put('app/admin/audits/audits.html','<div><h2>Audits</h2><div class=\"row\"><div class=\"col-md-5\"><h4>Filter by date</h4><p class=\"input-group\"><span class=\"input-group-addon\">from</span> <input type=\"date\" class=\"input-sm form-control\" name=\"start\" ng-model=\"vm.fromDate\" ng-change=\"vm.onChangeDate()\" required> <span class=\"input-group-addon\">to</span> <input type=\"date\" class=\"input-sm form-control\" name=\"end\" ng-model=\"vm.toDate\" ng-change=\"vm.onChangeDate()\" required></p></div></div><table class=\"table table-condensed table-striped table-bordered table-responsive\"><thead><tr><th ng-click=\"predicate = \\'timestamp\\'; reverse=!reverse\"><span>Date</span></th><th ng-click=\"predicate = \\'principal\\'; reverse=!reverse\"><span>User</span></th><th ng-click=\"predicate = \\'type\\'; reverse=!reverse\"><span>State</span></th><th ng-click=\"predicate = \\'data.message\\'; reverse=!reverse\"><span>Extra data</span></th></tr></thead><tr ng-repeat=\"audit in vm.audits | filter:filter | orderBy:predicate:reverse\" ng-hide=\"audit.filtered\"><td><span>{{audit.timestamp| date:\\'medium\\'}}</span></td><td><small>{{audit.principal}}</small></td><td>{{audit.type}}</td><td><span ng-show=\"audit.data.message\">{{audit.data.message}}</span> <span ng-show=\"audit.data.remoteAddress\"><span>Remote Address</span> {{audit.data.remoteAddress}}</span></td></tr></table><div class=\"text-center\"><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.loadPage(vm.page)\"></uib-pagination></div></div>');\n$templateCache.put('app/admin/configuration/configuration.html','<div><h2>Configuration</h2><span>Filter (by prefix)</span> <input type=\"text\" ng-model=\"filter\" class=\"form-control\"><label ng-hide=\"filteredConfig.length === 0\">Spring configuration</label><table class=\"table table-condensed table-striped table-bordered table-responsive\" style=\"table-layout:fixed\" ng-hide=\"filteredConfig.length === 0\"><thead><tr><th ng-click=\"predicate = \\'prefix\\'; reverse=!reverse\" class=\"col-sm-4\"><span>Prefix</span></th><th class=\"col-sm-8\">Properties</th></tr></thead><tr ng-repeat=\"entry in filtered = (vm.configuration | filter:filter | orderBy:predicate:reverse)\"><td><span>{{entry.prefix}}</span></td><td><div class=\"row\" ng-repeat=\"(key, value) in entry.properties\"><div class=\"col-md-4\">{{key}}</div><div class=\"col-md-8\"><span class=\"pull-right label label-default break\">{{value}}</span></div></div></td></tr></table><div ng-repeat=\"(key, value) in vm.allConfiguration\"><label ng-hide=\"filtered.length === 0\"><span>{{key}}</span></label><table class=\"table table-condensed table-striped table-bordered table-responsive\" style=\"table-layout:fixed\" ng-hide=\"filtered.length === 0\"><thead><tr><th class=\"col-sm-4\">Property</th><th class=\"col-sm-8\">Value</th></tr></thead><tbody><tr ng-repeat=\"item in filtered = (value | filter:filter)\"><td class=\"break\">{{item.key}}</td><td class=\"break\"><span class=\"pull-right label label-default break\">{{item.val}}</span></td></tr></tbody></table></div></div>');\n$templateCache.put('app/admin/docs/docs.html','<iframe src=\"swagger-ui/index.html\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\" width=\"100%\" height=\"900\" scrolling=\"auto\" target=\"_top\" title=\"Swagger UI\"></iframe>');\n$templateCache.put('app/admin/elasticsearch-reindex/elasticsearch-reindex-dialog.html','<form name=\"reindexForm\" ng-submit=\"vm.confirmReindex()\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm reindex operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to reindex Elasticsearch? This could take a while!</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp; <span>Cancel</span></button> <button type=\"submit\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-exclamation-sign\"></span>&nbsp; <span>Reindex</span></button></div></form>');\n$templateCache.put('app/admin/elasticsearch-reindex/elasticsearch-reindex.html','<div class=\"clearfix\"><h1>Reindex Elasticsearch</h1><jhi-alert></jhi-alert><p>This will send a request to reindex all data from your primary datasource into Elasticsearch. This will fix missing data and mapping issues, however you will lose any ES data and mapping that was defined outside of your application. This request will return immediately and the reindexing will run in the background. You will see \"Elasticsearch: Successfully performed reindexing\" in your logs when this is complete.</p><p>This can take a long time and is susceptible to concurrency issues so it should be performed when the number of users is low.</p><button type=\"button\" class=\"btn btn-primary pull-right\" ui-sref=\"elasticsearch-reindex.dialog\"><span class=\"glyphicon glyphicon-exclamation-sign\"></span> <span>Go</span></button></div>');\n$templateCache.put('app/admin/health/health.html','<div><h2>Health Checks</h2><p><button type=\"button\" class=\"btn btn-primary\" ng-click=\"vm.refresh()\"><span class=\"glyphicon glyphicon-refresh\"></span>&nbsp;<span>Refresh</span></button></p><table id=\"healthCheck\" class=\"table table-striped\"><thead><tr><th class=\"col-md-7\">Service Name</th><th class=\"col-md-2 text-center\">Status</th><th class=\"col-md-2 text-center\">Details</th></tr></thead><tbody><tr ng-repeat=\"health in vm.healthData\"><td><span class=\"text-capitalize\">{{ vm.baseName(health.name) }}</span> {{vm.subSystemName(health.name)}}</td><td class=\"text-center\"><span class=\"label\" ng-class=\"vm.getLabelClass(health.status)\">{{ health.status }}</span></td><td class=\"text-center\"><a class=\"hand\" ng-click=\"vm.showHealth(health)\" ng-show=\"health.details || health.error\"><i class=\"glyphicon glyphicon-eye-open\"></i></a></td></tr></tbody></table></div>');\n$templateCache.put('app/admin/health/health.modal.html','<div class=\"modal-header\"><button aria-label=\"Close\" data-dismiss=\"modal\" class=\"close\" type=\"button\" ng-click=\"vm.cancel()\"><span aria-hidden=\"true\">&times;</span></button><h4 class=\"modal-title\" id=\"showHealthLabel\"><span class=\"text-capitalize\">{{ vm.baseName(vm.currentHealth.name) }}</span> {{vm.subSystemName(vm.currentHealth.name)}}</h4></div><div class=\"modal-body pad\"><div ng-show=\"vm.currentHealth.details\"><h4>Properties</h4><table class=\"table table-striped\"><thead><tr><th class=\"col-md-6 text-left\">Name</th><th class=\"col-md-6 text-left\">Value</th></tr></thead><tbody><tr ng-repeat=\"(k,v) in vm.currentHealth.details\"><td class=\"col-md-6 text-left\">{{k}}</td><td class=\"col-md-6 text-left\">{{v}}</td></tr></tbody></table></div><div ng-show=\"vm.currentHealth.error\"><h4>Error</h4><pre>{{vm.currentHealth.error}}</pre></div></div><div class=\"modal-footer\"><button data-dismiss=\"modal\" class=\"btn btn-default pull-left\" type=\"button\" ng-click=\"vm.cancel()\">Done</button></div>');\n$templateCache.put('app/admin/logs/logs.html','<div class=\"table-responsive\"><h2>Logs</h2><p>There are {{ vm.loggers.length }} loggers.</p><span>Filter</span> <input type=\"text\" ng-model=\"filter\" class=\"form-control\"><table class=\"table table-condensed table-striped table-bordered\"><thead><tr title=\"click to order\"><th ng-click=\"predicate = \\'name\\'; reverse=!reverse\"><span>Name</span></th><th ng-click=\"predicate = \\'level\\'; reverse=!reverse\"><span>Level</span></th></tr></thead><tr ng-repeat=\"logger in vm.loggers | filter:filter | orderBy:predicate:reverse\"><td><small>{{logger.name | characters:140}}</small></td><td><button ng-click=\"vm.changeLevel(logger.name, \\'TRACE\\')\" ng-class=\"(logger.level==\\'TRACE\\') ? \\'btn-danger\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">TRACE</button> <button ng-click=\"vm.changeLevel(logger.name, \\'DEBUG\\')\" ng-class=\"(logger.level==\\'DEBUG\\') ? \\'btn-warning\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">DEBUG</button> <button ng-click=\"vm.changeLevel(logger.name, \\'INFO\\')\" ng-class=\"(logger.level==\\'INFO\\') ? \\'btn-info\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">INFO</button> <button ng-click=\"vm.changeLevel(logger.name, \\'WARN\\')\" ng-class=\"(logger.level==\\'WARN\\') ? \\'btn-success\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">WARN</button> <button ng-click=\"vm.changeLevel(logger.name, \\'ERROR\\')\" ng-class=\"(logger.level==\\'ERROR\\') ? \\'btn-primary\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">ERROR</button></td></tr></table></div>');\n$templateCache.put('app/admin/metrics/metrics.html','<div><h2>Application Metrics</h2><p><button type=\"button\" class=\"btn btn-primary\" ng-click=\"vm.refresh()\"><span class=\"glyphicon glyphicon-refresh\"></span>&nbsp;<span>Refresh</span></button></p><h3>JVM Metrics</h3><div class=\"row\" ng-hide=\"vm.updatingMetrics\"><div class=\"col-md-4\"><b>Memory</b><p><span>Total Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.total.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.total.max\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'jvm.memory.total.max\\'].value\" value=\"vm.metrics.gauges[\\'jvm.memory.total.used\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.memory.total.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.total.max\\'].value | number:0}}%</span></uib-progressbar><p><span>Heap Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value\" value=\"vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value | number:0}}%</span></uib-progressbar><p><span>Non-Heap Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value\" value=\"vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value | number:0}}%</span></uib-progressbar></div><div class=\"col-md-4\"><b>Threads</b> (Total: {{vm.metrics.gauges[\\'jvm.threads.count\\'].value}}) <a class=\"hand\" ng-click=\"vm.refreshThreadDumpData()\" data-toggle=\"modal\" data-target=\"#threadDump\"><i class=\"glyphicon glyphicon-eye-open\"></i></a><p><span>Runnable</span> {{vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value}}</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span>Timed Waiting</span> ({{vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value}})</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"warning\"><span>{{vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span>Waiting</span> ({{vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value}})</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"warning\"><span>{{vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span>Blocked</span> ({{vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value}})</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar></div><div class=\"col-md-4\"><b>Garbage collections</b><div class=\"row\"><div class=\"col-md-9\">Mark Sweep count</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-MarkSweep.count\\'].value}}</div></div><div class=\"row\"><div class=\"col-md-9\">Mark Sweep time</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-MarkSweep.time\\'].value}}ms</div></div><div class=\"row\"><div class=\"col-md-9\">Scavenge count</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-Scavenge.count\\'].value}}</div></div><div class=\"row\"><div class=\"col-md-9\">Scavenge time</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-Scavenge.time\\'].value}}ms</div></div></div></div><div class=\"well well-lg\" ng-show=\"vm.updatingMetrics\">Updating...</div><h3>HTTP requests (events per second)</h3><p><span>Active requests</span> <b>{{vm.metrics.counters[\\'com.codahale.metrics.servlet.InstrumentedFilter.activeRequests\\'].count | number:0}}</b> - <span>Total requests</span> <b>{{vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count | number:0}}</b></p><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th>Code</th><th>Count</th><th class=\"text-right\">Mean</th><th class=\"text-right\"><span>Average</span> (1 min)</th><th class=\"text-right\"><span>Average</span> (5 min)</th><th class=\"text-right\"><span>Average</span> (15 min)</th></tr></thead><tbody><tr><td>OK</td><td><uib-progressbar min=\"0\" max=\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\" value=\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].count\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].count}}</span></uib-progressbar></td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].mean_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m1_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m5_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m15_rate | number:2}}</td></tr><tr><td>Not Found</td><td><uib-progressbar min=\"0\" max=\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\" value=\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].count\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].count}}</span></uib-progressbar></td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].mean_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m1_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m5_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m15_rate | number:2}}</td></tr><tr><td>Server error</td><td><uib-progressbar min=\"0\" max=\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\" value=\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].count\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].count}}</span></uib-progressbar></td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].mean_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m1_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m5_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m15_rate | number:2}}</td></tr></tbody></table></div><h3>Services statistics (time in millisecond)</h3><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th>Service name</th><th class=\"text-right\">Count</th><th class=\"text-right\">Mean</th><th class=\"text-right\">Min</th><th class=\"text-right\">p50</th><th class=\"text-right\">p75</th><th class=\"text-right\">p95</th><th class=\"text-right\">p99</th><th class=\"text-right\">Max</th></tr></thead><tbody><tr ng-repeat=\"(k, v) in vm.servicesStats\"><td>{{k}}</td><td class=\"text-right\">{{v.count}}</td><td class=\"text-right\">{{v.mean * 1000 | number:0}}</td><td class=\"text-right\">{{v.min * 1000 | number:0}}</td><td class=\"text-right\">{{v.p50 * 1000 | number:0}}</td><td class=\"text-right\">{{v.p75 * 1000 | number:0}}</td><td class=\"text-right\">{{v.p95 * 1000 | number:0}}</td><td class=\"text-right\">{{v.p99 * 1000 | number:0}}</td><td class=\"text-right\">{{v.max * 1000 | number:0}}</td></tr></tbody></table></div><h3>Cache statistics</h3><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th>Cache name</th><th class=\"text-right\">Cache Hits</th><th class=\"text-right\">Cache Misses</th><th class=\"text-right\">Cache Gets</th><th class=\"text-right\">Cache Puts</th><th class=\"text-right\">Cache Removals</th><th class=\"text-right\">Cache Evictions</th><th class=\"text-right\">Cache Hit %</th><th class=\"text-right\">Cache Miss %</th><th class=\"text-right\">Average get time (\\xB5s)</th><th class=\"text-right\">Average put time (\\xB5s)</th><th class=\"text-right\">Average remove time (\\xB5s)</th></tr></thead><tbody><tr ng-repeat=\"(k, v) in vm.cachesStats\" ng-once><td>{{v.name}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-hits\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-misses\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-gets\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-puts\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-removals\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-evictions\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-hit-percentage\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-miss-percentage\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.average-get-time\\'].value | number:2}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.average-put-time\\'].value | number:2}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.average-remove-time\\'].value | number:2}}</td></tr></tbody></table></div><h3 ng-show=\"vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value > 0\">DataSource statistics (time in millisecond)</h3><div class=\"table-responsive\" ng-show=\"vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value > 0\"><table class=\"table table-striped\"><thead><tr><th><span>Usage</span> ({{vm.metrics.gauges[\\'HikariPool-1.pool.ActiveConnections\\'].value}} / {{vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value}})</th><th class=\"text-right\">Count</th><th class=\"text-right\">Mean</th><th class=\"text-right\">Min</th><th class=\"text-right\">p50</th><th class=\"text-right\">p75</th><th class=\"text-right\">p95</th><th class=\"text-right\">p99</th><th class=\"text-right\">Max</th></tr></thead><tbody><tr><td><div class=\"progress progress-striped\"><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value\" value=\"vm.metrics.gauges[\\'HikariPool-1.pool.ActiveConnections\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'HikariPool-1.pool.ActiveConnections\\'].value * 100 / vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value | number:0}}%</span></uib-progressbar></div></td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].count}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].mean | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].min | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p50 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p75 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p95 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p99 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].max | number:2}}</td></tr></tbody></table></div></div>');\n$templateCache.put('app/admin/metrics/metrics.modal.html','<!-- Modal used to display the threads dump --><div class=\"modal-header\"><button type=\"button\" class=\"close\" ng-click=\"vm.cancel()\">&times;</button><h4 class=\"modal-title\">Threads dump</h4></div><div class=\"modal-body pad\"><span class=\"label label-primary\" ng-click=\"threadDumpFilter = {}\">All&nbsp;<span class=\"badge\">{{vm.threadDumpAll}}</span></span>&nbsp; <span class=\"label label-success\" ng-click=\"threadDumpFilter = {threadState: \\'RUNNABLE\\'}\">Runnable&nbsp;<span class=\"badge\">{{vm.threadDumpRunnable}}</span></span>&nbsp; <span class=\"label label-info\" ng-click=\"threadDumpFilter = {threadState: \\'WAITING\\'}\">Waiting&nbsp;<span class=\"badge\">{{vm.threadDumpWaiting}}</span></span>&nbsp; <span class=\"label label-warning\" ng-click=\"threadDumpFilter = {threadState: \\'TIMED_WAITING\\'}\">Timed Waiting&nbsp;<span class=\"badge\">{{vm.threadDumpTimedWaiting}}</span></span>&nbsp; <span class=\"label label-danger\" ng-click=\"threadDumpFilter = {threadState: \\'BLOCKED\\'}\">Blocked&nbsp;<span class=\"badge\">{{vm.threadDumpBlocked}}</span></span>&nbsp;<div class=\"voffset2\">&nbsp;</div>Filter <input type=\"text\" ng-model=\"threadDumpFilter\" class=\"form-control\"><div class=\"row pad\" ng-repeat=\"(k, v) in vm.threadDump | filter:threadDumpFilter\"><h5><span class=\"label\" ng-class=\"vm.getLabelClass(v.threadState)\">{{v.threadState}}</span>&nbsp;{{v.threadName}} (ID {{v.threadId}}) <a ng-click=\"show = !show\"><span ng-show=\"!show\">Show StackTrace</span> <span ng-show=\"show\">Hide StackTrace</span></a></h5><div class=\"well\" ng-show=\"show\"><div ng-repeat=\"(stK, stV) in v.stackTrace\">{{stV.className}}.{{stV.methodName}}({{stV.fileName}}:{{stV.lineNumber}}) <span class=\"voffset1\"></span></div></div><table class=\"table table-condensed\"><thead><tr><th class=\"text-right\">Blocked Time</th><th class=\"text-right\">Blocked Count</th><th class=\"text-right\">Waited Time</th><th class=\"text-right\">Waited Count</th><th>Lock Name</th></tr></thead><tbody><tr><td>{{v.blockedTime}}</td><td>{{v.blockedCount}}</td><td>{{v.waitedTime}}</td><td>{{v.waitedCount}}</td><td>{{v.lockName}}</td></tr></tbody></table></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default pull-left\" data-dismiss=\"modal\" ng-click=\"vm.cancel()\">Done</button></div>');\n$templateCache.put('app/admin/user-management/user-management-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.user.login)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this User?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/admin/user-management/user-management-detail.html','<div><h2><span>User</span> [<b>{{vm.user.login}}</b>]</h2><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Login</span></dt><dd><span>{{vm.user.login}}</span> <span class=\"label label-danger\" ng-show=\"!vm.user.activated\">Deactivated</span> <span class=\"label label-success\" ng-show=\"vm.user.activated\">Activated</span></dd><dt><span>First Name</span></dt><dd>{{vm.user.firstName}}</dd><dt><span>Last Name</span></dt><dd>{{vm.user.lastName}}</dd><dt><span>Email</span></dt><dd>{{vm.user.email}}</dd><dt><span>Created By</span></dt><dd>{{vm.user.createdBy}}</dd><dt><span>Created Date</span></dt><dd>{{vm.user.createdDate | date:\\'dd/MM/yy HH:mm\\' }}</dd><dt><span>Last Modified By</span></dt><dd>{{vm.user.lastModifiedBy}}</dd><dt><span>Last Modified Date</span></dt><dd>{{vm.user.lastModifiedDate | date:\\'dd/MM/yy HH:mm\\'}}</dd><dt><span>Profiles</span></dt><dd><ul class=\"list-unstyled\"><li ng-repeat=\"authority in vm.user.authorities\"><span class=\"label label-info\">{{authority}}</span></li></ul></dd></dl><button type=\"submit\" ui-sref=\"user-management\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button></div>');\n$templateCache.put('app/admin/user-management/user-management-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myUserLabel\">Create or edit a User</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.user.id\"><label>ID</label><input type=\"text\" class=\"form-control\" name=\"id\" ng-model=\"vm.user.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\">Login</label><input type=\"text\" class=\"form-control\" name=\"login\" ng-model=\"vm.user.login\" required ng-minlength=\"1\" ng-maxlength=\"50\" ng-pattern=\"/^[_\\'.@A-Za-z0-9-]*$/\"><div ng-show=\"editForm.login.$invalid\"><p class=\"help-block\" ng-show=\"editForm.login.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.login.$error.maxlength\">This field cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\">First Name</label><input type=\"text\" class=\"form-control\" name=\"firstName\" ng-model=\"vm.user.firstName\" ng-maxlength=\"50\"><div ng-show=\"editForm.firstName.$invalid\"><p class=\"help-block\" ng-show=\"editForm.firstName.$error.maxlength\">This field cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label>Last Name</label><input type=\"text\" class=\"form-control\" name=\"lastName\" ng-model=\"vm.user.lastName\" ng-maxlength=\"50\"><div ng-show=\"editForm.lastName.$invalid\"><p class=\"help-block\" ng-show=\"editForm.lastName.$error.maxlength\">This field cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\">Email</label><input type=\"email\" class=\"form-control\" name=\"email\" ng-model=\"vm.user.email\" required ng-maxlength=\"100\"><div ng-show=\"editForm.email.$invalid\"><p class=\"help-block\" ng-show=\"editForm.email.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.email.$error.maxlength\">This field cannot be longer than 100 characters.</p><p class=\"help-block\" ng-show=\"editForm.email.$error.email\">Your email is invalid.</p></div></div><div class=\"form-group\"><label for=\"activated\"><input ng-disabled=\"vm.user.id === null\" type=\"checkbox\" id=\"activated\" name=\"activated\" ng-model=\"vm.user.activated\"> <span>Activated</span></label></div><div class=\"form-group\"><label>Profiles</label><select class=\"form-control\" multiple=\"multiple\" name=\"authority\" ng-model=\"vm.user.authorities\" ng-options=\"authority for authority in vm.authorities\"></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/admin/user-management/user-management.html','<div><h2>Users</h2><jhi-alert></jhi-alert><div class=\"row\"><div class=\"col-md-4\"><button class=\"btn btn-primary\" ui-sref=\"user-management.new\"><span class=\"glyphicon glyphicon-flash\"></span> <span>Create a new User</span></button></div></div><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span><span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"login\"><span>Login</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"email\"><span>Email</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th><th><span>Profiles</span></th><th jh-sort-by=\"createdDate\"><span>Created Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"lastModifiedBy\"><span>Last Modified By</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"lastModifiedDate\"><span>Last Modified Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"user in vm.users track by user.id\"><td><a ui-sref=\"user-management-detail({login:user.login})\">{{user.id}}</a></td><td>{{user.login}}</td><td>{{user.email}}</td><td><button class=\"btn btn-danger btn-xs\" ng-click=\"vm.setActive(user, true)\" ng-show=\"!user.activated\">Deactivated</button> <button class=\"btn btn-success btn-xs\" ng-click=\"vm.setActive(user, false)\" ng-show=\"user.activated\" ng-disabled=\"vm.currentAccount.login === user.login\">Activated</button></td><td><div ng-repeat=\"authority in user.authorities\"><span class=\"label label-info\">{{ authority }}</span></div></td><td>{{user.createdDate | date:\\'dd/MM/yy HH:mm\\'}}</td><td>{{user.lastModifiedBy}}</td><td>{{user.lastModifiedDate | date:\\'dd/MM/yy HH:mm\\'}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"user-management-detail({login:user.login})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"user-management.edit({login:user.login})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"user-management.delete({login:user.login})\" class=\"btn btn-danger btn-sm\" ng-disabled=\"vm.currentAccount.login === user.login\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/components/login/login.html','<div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.cancel()\">&times;</button><h4 class=\"modal-title\">Sign in</h4></div><div class=\"modal-body\"><div class=\"row\"><div class=\"col-md-4 col-md-offset-4\"><h1>Sign in</h1></div><div class=\"col-md-8 col-md-offset-2\"><div class=\"alert alert-danger\" ng-show=\"vm.authenticationError\"><strong>Failed to sign in!</strong> Please check your credentials and try again.</div></div><div class=\"col-md-8 col-md-offset-2\"><form class=\"form\" role=\"form\" ng-submit=\"vm.login($event)\"><div class=\"form-group\"><label for=\"username\">Login</label><input type=\"text\" class=\"form-control\" id=\"username\" placeholder=\"Your username\" ng-model=\"vm.username\"></div><div class=\"form-group\"><label for=\"password\">Password</label><input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"Your password\" ng-model=\"vm.password\"></div><div class=\"form-group\"><label for=\"rememberMe\"><input type=\"checkbox\" id=\"rememberMe\" ng-model=\"vm.rememberMe\" checked=\"checked\"> <span>Remember me</span></label></div><button type=\"submit\" class=\"btn btn-primary\">Sign in</button></form><p></p><div class=\"alert alert-warning\"><a class=\"alert-link\" href=\"\" ng-click=\"vm.requestResetPassword()\">Did you forget your password?</a></div><div class=\"alert alert-warning\">You don\\'t have an account yet? <a class=\"alert-link\" href=\"\" ng-click=\"vm.register()\">Register a new account</a></div></div></div></div>');\n$templateCache.put('app/entities/adminstats/adminstats-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.adminstats.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Adminstats?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/adminstats/adminstats-detail.html','<div><h2><span>Adminstats</span> {{vm.adminstats.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>User</span></dt><dd><span>{{vm.adminstats.user}}</span></dd><dt><span>Usercount</span></dt><dd><span>{{vm.adminstats.usercount}}</span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"adminstats-detail.edit({id:vm.adminstats.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/adminstats/adminstats-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myAdminstatsLabel\">Create or edit a Adminstats</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.adminstats.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.adminstats.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_user\">User</label><input type=\"text\" class=\"form-control\" name=\"user\" id=\"field_user\" ng-model=\"vm.adminstats.user\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_usercount\">Usercount</label><input type=\"number\" class=\"form-control\" name=\"usercount\" id=\"field_usercount\" ng-model=\"vm.adminstats.usercount\"></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/adminstats/adminstats.html','<div><h2>Adminstats</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"adminstats.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span class=\"hidden-xs-down\">Create new Adminstats</span></button></div><div class=\"col-xs-8 no-padding-right\"><form name=\"searchForm\" class=\"form-inline\"><div class=\"input-group pull-right\"><input type=\"text\" class=\"form-control\" ng-model=\"vm.searchQuery\" id=\"searchQuery\" placeholder=\"Query\"> <span class=\"input-group-btn width-min\"><button class=\"btn btn-info\" ng-click=\"vm.search(vm.searchQuery)\"><span class=\"glyphicon glyphicon-search\"></span></button> </span><span class=\"input-group-btn width-min\" ng-if=\"vm.currentSearch\"><button class=\"btn btn-info\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-trash\"></span></button></span></div></form></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"user\"><span>User</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"usercount\"><span>Usercount</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"adminstats in vm.adminstats track by adminstats.id\"><td><a ui-sref=\"adminstats-detail({id:adminstats.id})\">{{adminstats.id}}</a></td><td>{{adminstats.user}}</td><td>{{adminstats.usercount}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"adminstats-detail({id:adminstats.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"adminstats.edit({id:adminstats.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"adminstats.delete({id:adminstats.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" items-per-page=\"vm.itemsPerPage\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/entities/boxassign/boxassign-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.boxassign.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Boxassign?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/boxassign/boxassign-detail.html','<div><h2><span>Boxassign</span> {{vm.boxassign.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>User</span></dt><dd><span>{{vm.boxassign.user}}</span></dd><dt><span>Boxassign</span></dt><dd><span>{{vm.boxassign.boxassign}}</span></dd><dt><span>Churntype</span></dt><dd><span>{{vm.boxassign.churntype}}</span></dd><dt><span>System</span></dt><dd><span>{{vm.boxassign.system}}</span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"boxassign-detail.edit({id:vm.boxassign.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/boxassign/boxassign-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myBoxassignLabel\">Create or edit a Boxassign</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.boxassign.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.boxassign.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_user\">User Assigned</label><select ng-model=\"vm.boxassign.user\" id=\"field_podno\"><option ng-repeat=\"x in users\" value=\"{{x.login}}\">{{x.login}}</option></select></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_churntype\">System</label><select ng-model=\"vm.boxassign.system\" id=\"field_churntype\"><option ng-repeat=\"x in system\" value=\"{{x.systemname}}\">{{x.systemname}}</option></select><input type=\"button\" class=\"btn btn-primary\" ng-click=\"catChange()\" value=\"Assign Box\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_boxassign\">Boxassign</label><input type=\"text\" class=\"form-control\" name=\"boxassign\" id=\"field_boxassign\" ng-model=\"vm.boxassign.boxassign\"></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></div></form>');\n$templateCache.put('app/entities/boxassign/boxassigns.html','<div><h2>Boxassigns</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"boxassign.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span class=\"hidden-xs-down\">Create new Boxassign</span></button></div><div class=\"col-xs-8 no-padding-right\"><form name=\"searchForm\" class=\"form-inline\"><div class=\"input-group pull-right\"><input type=\"text\" class=\"form-control\" ng-model=\"vm.searchQuery\" id=\"searchQuery\" placeholder=\"Query\"> <span class=\"input-group-btn width-min\"><button class=\"btn btn-info\" ng-click=\"vm.search(vm.searchQuery)\"><span class=\"glyphicon glyphicon-search\"></span></button> </span><span class=\"input-group-btn width-min\" ng-if=\"vm.currentSearch\"><button class=\"btn btn-info\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-trash\"></span></button></span></div></form></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"user\"><span>User</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"boxassign\"><span>Boxassign</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"churntype\"><span>Churntype</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"system\"><span>System</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"boxassign in vm.boxassigns track by boxassign.id\"><td><a ui-sref=\"boxassign-detail({id:boxassign.id})\">{{boxassign.id}}</a></td><td>{{boxassign.user}}</td><td>{{boxassign.boxassign}}</td><td>{{boxassign.churntype}}</td><td>{{boxassign.system}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"boxassign-detail({id:boxassign.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"boxassign.edit({id:boxassign.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"boxassign.delete({id:boxassign.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" items-per-page=\"vm.itemsPerPage\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/entities/mobile-validation/mobile-validation-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.mobileValidation.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Mobile Validation?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/mobile-validation/mobile-validation-detail.html','<div><h2><span>Mobile Validation</span> {{vm.mobileValidation.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Mobilenumber</span></dt><dd><span>{{vm.mobileValidation.mobilenumber}}</span></dd><dt><span>Activation Date</span></dt><dd><span>{{vm.mobileValidation.activationDate}}</span></dd><dt><span>Customer Name</span></dt><dd><span>{{vm.mobileValidation.customerName}}</span></dd><dt><span>Color Code</span></dt><dd><span>{{vm.mobileValidation.colorCode}}</span></dd><dt><span>User</span></dt><dd><span>{{vm.mobileValidation.user}}</span></dd><dt><span>User Date</span></dt><dd><span>{{vm.mobileValidation.userDate | date:\\'mediumDate\\'}}</span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"mobile-validation-detail.edit({id:vm.mobileValidation.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/mobile-validation/mobile-validation-dialog.html','<form name=\"editForm\" role=\"form\" novalidate><script>$(document).ready(function() {\\n    $(\\'#field_mobilenumber\\').keyup(function() {\\n        if ($(this).val().length >= 10) {\\n            $(\\'#field_remobilenumber\\').focus();\\n        }\\n    });\\n    \\n    $(\\'#field_remobilenumber\\').keyup(function() {\\n        if ($(this).val().length >= 10) {\\n          if($(\\'#field_remobilenumber\\').val() !=  $(\\'#field_mobilenumber\\').val()){\\n        \\t  alert(\\'mobile numbers should be equal\\');\\n        \\t  $(\\'#search\\').prop(\\'disabled\\', true);;\\n          }else{\\n        \\t  $(\\'#search\\').prop(\\'disabled\\', false);;\\n          }\\n        }\\n    });\\n});</script><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myMobileValidationLabel\">Create or edit a Mobile Validation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.mobileValidation.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.mobileValidation.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_mobilenumber\">Mobilenumber</label><input type=\"number\" class=\"form-control\" name=\"mobilenumber\" id=\"field_mobilenumber\" ng-model=\"vm.mobileValidation.mobilenumber\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_mobilenumber\">Re Mobilenumber</label><input type=\"number\" class=\"form-control\" name=\"mobilenumber\" id=\"field_remobilenumber\" ng-model=\"vm.mobileValidation.remobilenumber\"></div><button type=\"button\" class=\"btn btn-default\" id=\"search\" ng-click=\"vm.search()\"><span class=\"glyphicon\"></span>&nbsp;<span>Search</span></button><!-- <div class=\"form-group\">\\n            <label class=\"control-label\" for=\"field_activationDate\">Activation Date</label>\\n            <input type=\"text\" class=\"form-control\" name=\"activationDate\" id=\"field_activationDate\"\\n                    ng-model=\"vm.mobileValidation.activationDate\"\\n                    />\\n        </div>\\n        <div class=\"form-group\">\\n            <label class=\"control-label\" for=\"field_customerName\">Customer Name</label>\\n            <input type=\"text\" class=\"form-control\" name=\"customerName\" id=\"field_customerName\"\\n                    ng-model=\"vm.mobileValidation.customerName\"\\n                    />\\n        </div>\\n        <div class=\"form-group\">\\n            <label class=\"control-label\" for=\"field_colorCode\">Color Code</label>\\n            <input type=\"text\" class=\"form-control\" name=\"colorCode\" id=\"field_colorCode\"\\n                    ng-model=\"vm.mobileValidation.colorCode\"\\n                    />\\n        </div>\\n        <div class=\"form-group\">\\n            <label class=\"control-label\" for=\"field_user\">User</label>\\n            <input type=\"text\" class=\"form-control\" name=\"user\" id=\"field_user\"\\n                    ng-model=\"vm.mobileValidation.user\"\\n                    />\\n        </div>\\n        <div class=\"form-group\">\\n            <label class=\"control-label\" for=\"field_userDate\">User Date</label>\\n                <div class=\"input-group\">\\n                    <input id=\"field_userDate\" type=\"text\" class=\"form-control\" name=\"userDate\" uib-datepicker-popup=\"{{dateformat}}\" ng-model=\"vm.mobileValidation.userDate\" is-open=\"vm.datePickerOpenStatus.userDate\"\\n                    />\\n                    <span class=\"input-group-btn\">\\n                        <button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.openCalendar(\\'userDate\\')\"><i class=\"glyphicon glyphicon-calendar\"></i></button>\\n                    </span>\\n                </div>\\n        </div>\\n --></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/mobile-validation/mobile-validations.html','<div><h2>Mobile Validations</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"mobile-validation.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span class=\"hidden-xs-down\">Create new Mobile Validation</span></button></div><div class=\"col-xs-8 no-padding-right\"><form name=\"searchForm\" class=\"form-inline\"><div class=\"input-group pull-right\"><input type=\"text\" class=\"form-control\" ng-model=\"vm.searchQuery\" id=\"searchQuery\" placeholder=\"Query\"> <span class=\"input-group-btn width-min\"><button class=\"btn btn-info\" ng-click=\"vm.search(vm.searchQuery)\"><span class=\"glyphicon glyphicon-search\"></span></button> </span><span class=\"input-group-btn width-min\" ng-if=\"vm.currentSearch\"><button class=\"btn btn-info\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-trash\"></span></button></span></div></form></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"mobilenumber\"><span>Mobilenumber</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"activationDate\"><span>Activation Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"customerName\"><span>Customer Name</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"colorCode\"><span>Color Code</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"user\"><span>User</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"userDate\"><span>User Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"mobileValidation in vm.mobileValidations track by mobileValidation.id\"><td><a ui-sref=\"mobile-validation-detail({id:mobileValidation.id})\">{{mobileValidation.id}}</a></td><td>{{mobileValidation.mobilenumber}}</td><td>{{mobileValidation.activationDate}}</td><td>{{mobileValidation.customerName}}</td><td>{{mobileValidation.colorCode}}</td><td>{{mobileValidation.user}}</td><td>{{mobileValidation.userDate | date:\\'mediumDate\\'}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"mobile-validation-detail({id:mobileValidation.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"mobile-validation.edit({id:mobileValidation.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"mobile-validation.delete({id:mobileValidation.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" items-per-page=\"vm.itemsPerPage\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/entities/scancaf/scancaf-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.scancaf.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Scancaf?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/scancaf/scancaf-detail.html','<div><h2><span>Scancaf</span> {{vm.scancaf.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Sourcebox</span></dt><dd><span>{{vm.scancaf.sourcebox}}</span></dd><dt><span>Category 1</span></dt><dd><span>{{vm.scancaf.category1}}</span></dd><dt><span>Category 2</span></dt><dd><span>{{vm.scancaf.category2}}</span></dd><dt><span>Category 3</span></dt><dd><span>{{vm.scancaf.category3}}</span></dd><dt><span>Category 4</span></dt><dd><span>{{vm.scancaf.category4}}</span></dd><dt><span>Category 5</span></dt><dd><span>{{vm.scancaf.category5}}</span></dd><dt><span>Count Category 1</span></dt><dd><span>{{vm.scancaf.countCategory1}}</span></dd><dt><span>Count Category 2</span></dt><dd><span>{{vm.scancaf.countCategory2}}</span></dd><dt><span>Count Category 3</span></dt><dd><span>{{vm.scancaf.countCategory3}}</span></dd><dt><span>Count Category 4</span></dt><dd><span>{{vm.scancaf.countCategory4}}</span></dd><dt><span>Count Category 5</span></dt><dd><span>{{vm.scancaf.countCategory5}}</span></dd><dt><span>Cafbarcode</span></dt><dd><span>{{vm.scancaf.cafbarcode}}</span></dd><dt><span>Colorcode</span></dt><dd><span>{{vm.scancaf.colorcode}}</span></dd><dt><span>User</span></dt><dd><span>{{vm.scancaf.user}}</span></dd><dt><span>Userdate</span></dt><dd><span>{{vm.scancaf.userdate | date:\\'mediumDate\\'}}</span></dd><dt><span>Boxstatus</span></dt><dd><span>{{vm.scancaf.boxstatus}}</span></dd><dt><span>Sourceboxstaus</span></dt><dd><span>{{vm.scancaf.sourceboxstaus}}</span></dd><dt><span>Mobilenumber</span></dt><dd><span>{{vm.scancaf.mobilenumber}}</span></dd><dt><span>Centralbarcode</span></dt><dd><span>{{vm.scancaf.centralbarcode}}</span></dd><dt><span>Caftype</span></dt><dd><span>{{vm.scancaf.caftype}}</span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"scancaf-detail.edit({id:vm.scancaf.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/scancaf/scancaf-dialog.html','<form name=\"editForm\" role=\"form\" novalidate><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myScancafLabel\">CAF SCAN</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div ng-show=\"vm.scancaf.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.scancaf.id\" readonly=\"readonly\"></div><div><label class=\"control-label\" for=\"field_sourcebox\">Sourcebox</label><input type=\"text\" name=\"sourcebox\" id=\"field_sourcebox\" ng-model=\"vm.scancaf.sourcebox\" maxlength=\"8\"></div><div><label class=\"control-label\" for=\"field_cafbarcode\">Cafbarcode</label><input type=\"text\" name=\"cafbarcode\" id=\"field_cafbarcode\" ng-model=\"vm.scancaf.cafbarcode\"></div><div><label class=\"control-label\" for=\"field_colorcode\">Colorcode</label><textarea type=\"text\" name=\"colorcode\" id=\"field_colorcode\" ng-model=\"vm.scancaf.colorcode\" ng-style=\"{\\'background-color\\':vm.scancaf.colorcode}\" cols=\"70\" rows=\"10\">\\n        </div>\\n       \\n       \\n        <input type=\"button\" ng-click=\"toggleCustom()\" value=\"In progress\">\\n        <span ng-hide=\"custom\">\\n        <div>\\n            <label class=\"control-label\" for=\"field_category1\">Churn 1</label>\\n            <input type=\"text\" name=\"category1\" id=\"field_category1\" ng-model=\"vm.scancaf.category1\" maxlength=\"8\" ng-change=\"validate1()\">\\n            <input type=\"number\" name=\"countCategory1\" id=\"field_countCategory1\" ng-model=\"vm.scancaf.countCategory1\">\\n        </div>\\n        <div>\\n            <label class=\"control-label\" for=\"field_category2\">Chrun 2</label>\\n            <input type=\"text\" name=\"category2\" id=\"field_category2\" ng-model=\"vm.scancaf.category2\" maxlength=\"8\" ng-change=\"validate1()\">\\n            <input type=\"number\" name=\"countCategory2\" id=\"field_countCategory2\" ng-model=\"vm.scancaf.countCategory2\">\\n        </div>\\n        <div>\\n            <label class=\"control-label\" for=\"field_category3\">Churn 3</label>\\n            <input type=\"text\" name=\"category3\" id=\"field_category3\" ng-model=\"vm.scancaf.category3\" maxlength=\"8\" ng-change=\"validate1()\">\\n            <input type=\"number\" name=\"countCategory3\" id=\"field_countCategory3\" ng-model=\"vm.scancaf.countCategory3\">\\n        </div>\\n        \\n        <div>\\n            <label class=\"control-label\" for=\"field_category4\">Churn 4</label>\\n            <input type=\"text\" name=\"category4\" id=\"field_category4\" ng-model=\"vm.scancaf.category4\" maxlength=\"8\" ng-change=\"validate1()\">\\n            <input type=\"number\" name=\"countCategory4\" id=\"field_countCategory4\" ng-model=\"vm.scancaf.countCategory4\">\\n        </div>\\n        <div>\\n            <label class=\"control-label\" for=\"field_category5\">Churn 5</label>\\n            <input type=\"text\" name=\"category5\" id=\"field_category5\" ng-model=\"vm.scancaf.category5\" maxlength=\"8\" ng-change=\"validate1()\">\\n            <input type=\"number\" name=\"countCategory5\" id=\"field_countCategory5\" ng-model=\"vm.scancaf.countCategory5\">\\n        </div>\\n       \\n        </span>\\n        <!-- <div >\\n            <label class=\"control-label\" for=\"field_user\">User</label>\\n            <input type=\"text\" class=\"form-control\" name=\"user\" id=\"field_user\"\\n                    ng-model=\"vm.scancaf.user\"\\n                    />\\n        </div>\\n        <div >\\n            <label class=\"control-label\" for=\"field_userdate\">Userdate</label>\\n                <div class=\"input-group\">\\n                    <input id=\"field_userdate\" type=\"text\" class=\"form-control\" name=\"userdate\" uib-datepicker-popup=\"{{dateformat}}\" ng-model=\"vm.scancaf.userdate\" is-open=\"vm.datePickerOpenStatus.userdate\"\\n                    />\\n                    <span class=\"input-group-btn\">\\n                        <button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.openCalendar(\\'userdate\\')\"><i class=\"glyphicon glyphicon-calendar\"></i></button>\\n                    </span>\\n                </div>\\n        </div>\\n         <div >\\n            <label class=\"control-label\" for=\"field_boxstatus\">Boxstatus</label>\\n            <input type=\"text\" class=\"form-control\" name=\"boxstatus\" id=\"field_boxstatus\"\\n                    ng-model=\"vm.scancaf.boxstatus\"\\n                    />\\n        </div>\\n        <div >\\n            <label class=\"control-label\" for=\"field_sourceboxstaus\">Sourceboxstaus</label>\\n            <input type=\"text\" class=\"form-control\" name=\"sourceboxstaus\" id=\"field_sourceboxstaus\"\\n                    ng-model=\"vm.scancaf.sourceboxstaus\"\\n                    />\\n        </div> -->\\n        <div>\\n          <label class=\"control-label\" for=\"field_mobilenumber\">Last entered Details </label>\\n          <br>\\n            <label class=\"control-label\" for=\"field_mobilenumber\">Mobile Number</label>\\n            <input type=\"number\" name=\"mobilenumber\" id=\"field_mobilenumber\" ng-model=\"vm.scancaf.mobilenumber\" readonly=\"readonly\">\\n            <label class=\"control-label\" for=\"field_centralbarcode\">Centralbarcode</label>\\n            <input type=\"text\" name=\"centralbarcode\" id=\"field_centralbarcode\" ng-model=\"vm.scancaf.centralbarcode\" readonly=\"readonly\">\\n        </div> \\n       <!--  <div >\\n            <label class=\"control-label\" for=\"field_caftype\">Caftype</label>\\n            <input type=\"text\" name=\"caftype\" id=\"field_caftype\"\\n                    ng-model=\"vm.scancaf.caftype\"\\n                   readonly=\"readonly\" />\\n        </div> -->\\n        <div>\\n            <label class=\"control-label\" for=\"field_caftype\">Completed Box</label>\\n            <input type=\"text\" name=\"caftype\" id=\"field_lastcompletedbox\" ng-model=\"lastcompletedbox\" readonly=\"readonly\">\\n                     <label class=\"control-label\" for=\"field_caftype\">Last Source Box</label>\\n            <input type=\"text\" name=\"caftype\" id=\"field_lastsourcebox\" ng-model=\"lastsourcebox\" readonly=\"readonly\">\\n                    \\n        </div>\\n        \\n\\n    </div>\\n    <div class=\"modal-footer\">\\n        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\">\\n            <span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span>\\n        </button>\\n        <button type=\"button\" class=\"btn btn-primary\" ng-click=\"sourceBoxComplete()\">\\n            <span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Source Box Complete</span></button></div></form>');\n$templateCache.put('app/entities/scancaf/scancaf-dialog_second.html','<form name=\"editForm\" role=\"form\" novalidate><script src=\"https://rawgithub.com/eligrey/FileSaver.js/master/FileSaver.js\" type=\"text/javascript\"></script><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myScancafLabel\">CAF SCAN</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><!-- <div  ng-show=\"vm.scancaf.id\">\\n            <label for=\"id\">ID</label>\\n            <input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\"\\n                    ng-model=\"vm.scancaf.id\" readonly />\\n        </div> --><label class=\"control-label\" for=\"field_category1\">Box Name</label><input type=\"text\" name=\"category1\" id=\"field_category1\" ng-model=\"vm.scancaf.sourceboxstaus\" maxlength=\"8\"><div><label class=\"control-label\" for=\"field_cafbarcode\">Cafbarcode</label><input type=\"text\" name=\"cafbarcode\" id=\"field_cafbarcode\" ng-model=\"vm.scancaf.boxstatus\" ng-change=\"cafcheck()\"></div><div><label class=\"control-label\" for=\"field_colorcode\">Colorcode</label><textarea type=\"text\" name=\"colorcode\" id=\"field_colorcode\" ng-model=\"vm.scancaf.colorcode\" ng-style=\"{\\'background-color\\':vm.scancaf.colorcode}\" cols=\"70\" rows=\"10\">\\n            </textarea></div><input type=\"button\" ng-click=\"toggleCustom()\" value=\"Caf Status\"><span ng-hide=\"custom\"><div><label class=\"control-label\" for=\"field_category1\">Churn 1</label><input type=\"text\" name=\"category1\" id=\"field_category1\" ng-model=\"vm.scancaf.category1\" maxlength=\"8\" ng-change=\"validate1()\"> <input type=\"number\" name=\"countCategory1\" id=\"field_countCategory1\" ng-model=\"vm.scancaf.countCategory1\"></div><div><label class=\"control-label\" for=\"field_category2\">Chrun 2</label><input type=\"text\" name=\"category2\" id=\"field_category2\" ng-model=\"vm.scancaf.category2\" maxlength=\"8\" ng-change=\"validate1()\"> <input type=\"number\" name=\"countCategory2\" id=\"field_countCategory2\" ng-model=\"vm.scancaf.countCategory2\"></div><div><label class=\"control-label\" for=\"field_category3\">Churn 3</label><input type=\"text\" name=\"category3\" id=\"field_category3\" ng-model=\"vm.scancaf.category3\" maxlength=\"8\" ng-change=\"validate1()\"> <input type=\"number\" name=\"countCategory3\" id=\"field_countCategory3\" ng-model=\"vm.scancaf.countCategory3\"></div><div><label class=\"control-label\" for=\"field_category4\">Churn 4</label><input type=\"text\" name=\"category4\" id=\"field_category4\" ng-model=\"vm.scancaf.category4\" maxlength=\"8\" ng-change=\"validate1()\"> <input type=\"number\" name=\"countCategory4\" id=\"field_countCategory4\" ng-model=\"vm.scancaf.countCategory4\"></div><div><label class=\"control-label\" for=\"field_category5\">Churn 5</label><input type=\"text\" name=\"category5\" id=\"field_category5\" ng-model=\"vm.scancaf.category5\" maxlength=\"8\" ng-change=\"validate1()\"> <input type=\"number\" name=\"countCategory5\" id=\"field_countCategory5\" ng-model=\"vm.scancaf.countCategory5\"></div></span><div><!-- <label class=\"control-label\" for=\"field_churntype\">Churntype</label>\\n            \\n            <select ng-model=\"vm.scancaf.caftype\">\\n\\t\\t\\t<option  value=\"category_1\" style=\"background-color: red\">Churn Type 1</option>\\n\\t\\t\\t<option  value=\"category_2\">Churn Type 2</option>\\n\\t\\t\\t<option  value=\"category_3\">Churn Type 3</option>\\n\\t\\t\\t<option  value=\"category_4\">Churn Type 4</option>\\n\\t\\t\\t<option  value=\"category_5\">Churn Type 5</option>\\n\\t\\t\\t</select>  --> <button type=\"button\" class=\"btn btn-primary\" ng-click=\"BoxComplete()\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>OutBox Completed</span></button><td>{{item.boxstatus}}</td><div hidden=\"true\"><div id=\"exportable\"><table width=\"100%\"><thead><tr><th>{{item.boxstatus}}</th></tr></thead><tbody></tbody></table></div></div></div></div></form>');\n$templateCache.put('app/entities/scancaf/scancafs.html','<div><h2>Scancafs</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ng-click=\"initTest()\"><span class=\"glyphicon glyphicon-plus\"></span> <span class=\"hidden-xs-down\">1st Level Segregation</span></button><!--   <a ui-sref=\"{{ init() ? \\'.\\': \\'scancaf.new\\'}}\">Disabled Link</a>  --> <button class=\"btn btn-primary\" ui-sref=\"scancaf.second\"><span class=\"glyphicon glyphicon-plus\"></span> <span class=\"hidden-xs-down\">2nd Level Segregation</span></button></div><div class=\"col-xs-8 no-padding-right\"><form name=\"searchForm\" class=\"form-inline\"><div class=\"input-group pull-right\"><input type=\"text\" class=\"form-control\" ng-model=\"vm.searchQuery\" id=\"searchQuery\" placeholder=\"Query\"> <span class=\"input-group-btn width-min\"><button class=\"btn btn-info\" ng-click=\"vm.search(vm.searchQuery)\"><span class=\"glyphicon glyphicon-search\"></span></button> </span><span class=\"input-group-btn width-min\" ng-if=\"vm.currentSearch\"><button class=\"btn btn-info\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-trash\"></span></button></span></div></form></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"sourcebox\"><span>Sourcebox</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"category1\"><span>Category 1</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"category2\"><span>Category 2</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"category3\"><span>Category 3</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"category4\"><span>Category 4</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"category5\"><span>Category 5</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"countCategory1\"><span>Count Category 1</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"countCategory2\"><span>Count Category 2</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"countCategory3\"><span>Count Category 3</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"countCategory4\"><span>Count Category 4</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"countCategory5\"><span>Count Category 5</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"cafbarcode\"><span>Cafbarcode</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"colorcode\"><span>Colorcode</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"user\"><span>User</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"userdate\"><span>Userdate</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"boxstatus\"><span>Boxstatus</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"sourceboxstaus\"><span>Sourceboxstaus</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"mobilenumber\"><span>Mobilenumber</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"centralbarcode\"><span>Centralbarcode</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"caftype\"><span>Caftype</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"scancaf in vm.scancafs track by scancaf.id\"><td><a ui-sref=\"scancaf-detail({id:scancaf.id})\">{{scancaf.id}}</a></td><td>{{scancaf.sourcebox}}</td><td>{{scancaf.category1}}</td><td>{{scancaf.category2}}</td><td>{{scancaf.category3}}</td><td>{{scancaf.category4}}</td><td>{{scancaf.category5}}</td><td>{{scancaf.countCategory1}}</td><td>{{scancaf.countCategory2}}</td><td>{{scancaf.countCategory3}}</td><td>{{scancaf.countCategory4}}</td><td>{{scancaf.countCategory5}}</td><td>{{scancaf.cafbarcode}}</td><td>{{scancaf.colorcode}}</td><td>{{scancaf.user}}</td><td>{{scancaf.userdate | date:\\'mediumDate\\'}}</td><td>{{scancaf.boxstatus}}</td><td>{{scancaf.sourceboxstaus}}</td><td>{{scancaf.mobilenumber}}</td><td>{{scancaf.centralbarcode}}</td><td>{{scancaf.caftype}}</td><td>{{scancaf.caftype}}</td><td>{{scancaf.secaudit}}</td><td>{{scancaf.secauditdate | date:\\'mediumDate\\'}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"scancaf-detail({id:scancaf.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"scancaf.edit({id:scancaf.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"scancaf.delete({id:scancaf.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" items-per-page=\"vm.itemsPerPage\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/entities/suspendedusers/suspendedusers-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.suspendedusers.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Suspendedusers?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/suspendedusers/suspendedusers-detail.html','<div><h2><span>Suspendedusers</span> {{vm.suspendedusers.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Mobilenumber</span></dt><dd><span>{{vm.suspendedusers.mobilenumber}}</span></dd><dt><span>Centralbarcode</span></dt><dd><span>{{vm.suspendedusers.centralbarcode}}</span></dd><dt><span>Count</span></dt><dd><span>{{vm.suspendedusers.count}}</span></dd><dt><span>User</span></dt><dd><span>{{vm.suspendedusers.user}}</span></dd><dt><span>Userdate</span></dt><dd><span>{{vm.suspendedusers.userdate | date:\\'medium\\'}}</span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"suspendedusers-detail.edit({id:vm.suspendedusers.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/suspendedusers/suspendedusers-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"mySuspendedusersLabel\">Create or edit a Suspendedusers</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.suspendedusers.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.suspendedusers.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_mobilenumber\">Mobilenumber</label><input type=\"number\" class=\"form-control\" name=\"mobilenumber\" id=\"field_mobilenumber\" ng-model=\"vm.suspendedusers.mobilenumber\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_centralbarcode\">Centralbarcode</label><input type=\"text\" class=\"form-control\" name=\"centralbarcode\" id=\"field_centralbarcode\" ng-model=\"vm.suspendedusers.centralbarcode\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_count\">Count</label><input type=\"number\" class=\"form-control\" name=\"count\" id=\"field_count\" ng-model=\"vm.suspendedusers.count\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_user\">User</label><input type=\"text\" class=\"form-control\" name=\"user\" id=\"field_user\" ng-model=\"vm.suspendedusers.user\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_userdate\">Userdate</label><div class=\"input-group\"><input id=\"field_userdate\" type=\"text\" class=\"form-control\" name=\"userdate\" datetime-picker=\"{{dateformat}}\" ng-model=\"vm.suspendedusers.userdate\" is-open=\"vm.datePickerOpenStatus.userdate\"> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.openCalendar(\\'userdate\\')\"><i class=\"glyphicon glyphicon-calendar\"></i></button></span></div></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/suspendedusers/suspendedusers.html','<div><h2>Suspendedusers</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"suspendedusers.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span class=\"hidden-xs-down\">Create new Suspendedusers</span></button></div><div class=\"col-xs-8 no-padding-right\"><form name=\"searchForm\" class=\"form-inline\"><div class=\"input-group pull-right\"><input type=\"text\" class=\"form-control\" ng-model=\"vm.searchQuery\" id=\"searchQuery\" placeholder=\"Query\"> <span class=\"input-group-btn width-min\"><button class=\"btn btn-info\" ng-click=\"vm.search(vm.searchQuery)\"><span class=\"glyphicon glyphicon-search\"></span></button> </span><span class=\"input-group-btn width-min\" ng-if=\"vm.currentSearch\"><button class=\"btn btn-info\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-trash\"></span></button></span></div></form></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"mobilenumber\"><span>Mobilenumber</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"centralbarcode\"><span>Centralbarcode</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"count\"><span>Count</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"user\"><span>User</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"userdate\"><span>Userdate</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"suspendedusers in vm.suspendedusers track by suspendedusers.id\"><td><a ui-sref=\"suspendedusers-detail({id:suspendedusers.id})\">{{suspendedusers.id}}</a></td><td>{{suspendedusers.mobilenumber}}</td><td>{{suspendedusers.centralbarcode}}</td><td>{{suspendedusers.count}}</td><td>{{suspendedusers.user}}</td><td>{{suspendedusers.userdate | date:\\'medium\\'}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"suspendedusers-detail({id:suspendedusers.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"suspendedusers.edit({id:suspendedusers.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"suspendedusers.delete({id:suspendedusers.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" items-per-page=\"vm.itemsPerPage\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/entities/sourcebox/sourcebox-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.sourcebox.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Sourcebox?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/sourcebox/sourcebox-detail.html','<div><h2><span>Sourcebox</span> {{vm.sourcebox.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Sourceboxname</span></dt><dd><span>{{vm.sourcebox.sourceboxname}}</span></dd><dt><span>Createduser</span></dt><dd><span>{{vm.sourcebox.createduser}}</span></dd><dt><span>Createddate</span></dt><dd><span>{{vm.sourcebox.createddate | date:\\'mediumDate\\'}}</span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"sourcebox-detail.edit({id:vm.sourcebox.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/sourcebox/sourcebox-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"mySourceboxLabel\">Create or edit a Sourcebox</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.sourcebox.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.sourcebox.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_sourceboxname\">Sourceboxname</label><input type=\"text\" class=\"form-control\" name=\"sourceboxname\" id=\"field_sourceboxname\" ng-model=\"vm.sourcebox.sourceboxname\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_createduser\">Createduser</label><input type=\"text\" class=\"form-control\" name=\"createduser\" id=\"field_createduser\" ng-model=\"vm.sourcebox.createduser\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_createddate\">Createddate</label><div class=\"input-group\"><input id=\"field_createddate\" type=\"text\" class=\"form-control\" name=\"createddate\" uib-datepicker-popup=\"{{dateformat}}\" ng-model=\"vm.sourcebox.createddate\" is-open=\"vm.datePickerOpenStatus.createddate\"> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.openCalendar(\\'createddate\\')\"><i class=\"glyphicon glyphicon-calendar\"></i></button></span></div></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/sourcebox/sourceboxes.html','<div><h2>Sourceboxes</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"sourcebox.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span class=\"hidden-xs-down\">Create new Sourcebox</span></button></div><div class=\"col-xs-8 no-padding-right\"><form name=\"searchForm\" class=\"form-inline\"><div class=\"input-group pull-right\"><input type=\"text\" class=\"form-control\" ng-model=\"vm.searchQuery\" id=\"searchQuery\" placeholder=\"Query\"> <span class=\"input-group-btn width-min\"><button class=\"btn btn-info\" ng-click=\"vm.search(vm.searchQuery)\"><span class=\"glyphicon glyphicon-search\"></span></button> </span><span class=\"input-group-btn width-min\" ng-if=\"vm.currentSearch\"><button class=\"btn btn-info\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-trash\"></span></button></span></div></form></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"sourceboxname\"><span>Sourceboxname</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"createduser\"><span>Createduser</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"createddate\"><span>Createddate</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"sourcebox in vm.sourceboxes track by sourcebox.id\"><td><a ui-sref=\"sourcebox-detail({id:sourcebox.id})\">{{sourcebox.id}}</a></td><td>{{sourcebox.sourceboxname}}</td><td>{{sourcebox.createduser}}</td><td>{{sourcebox.createddate | date:\\'mediumDate\\'}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"sourcebox-detail({id:sourcebox.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"sourcebox.edit({id:sourcebox.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"sourcebox.delete({id:sourcebox.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" items-per-page=\"vm.itemsPerPage\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/entities/system/system-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.system.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this System?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/system/system-detail.html','<div><h2><span>System</span> {{vm.system.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Systemname</span></dt><dd><span>{{vm.system.systemname}}</span></dd><dt><span>User</span></dt><dd><span>{{vm.system.user}}</span></dd><dt><span>Userdate</span></dt><dd><span>{{vm.system.userdate | date:\\'mediumDate\\'}}</span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"system-detail.edit({id:vm.system.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/system/system-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"mySystemLabel\">Create or edit a System</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.system.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.system.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_systemname\">Systemname</label><input type=\"text\" class=\"form-control\" name=\"systemname\" id=\"field_systemname\" ng-model=\"vm.system.systemname\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_user\">User</label><input type=\"text\" class=\"form-control\" name=\"user\" id=\"field_user\" ng-model=\"vm.system.user\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_userdate\">Userdate</label><div class=\"input-group\"><input id=\"field_userdate\" type=\"text\" class=\"form-control\" name=\"userdate\" uib-datepicker-popup=\"{{dateformat}}\" ng-model=\"vm.system.userdate\" is-open=\"vm.datePickerOpenStatus.userdate\"> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.openCalendar(\\'userdate\\')\"><i class=\"glyphicon glyphicon-calendar\"></i></button></span></div></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/system/systems.html','<div><h2>Systems</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"system.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span class=\"hidden-xs-down\">Create new System</span></button></div><div class=\"col-xs-8 no-padding-right\"><form name=\"searchForm\" class=\"form-inline\"><div class=\"input-group pull-right\"><input type=\"text\" class=\"form-control\" ng-model=\"vm.searchQuery\" id=\"searchQuery\" placeholder=\"Query\"> <span class=\"input-group-btn width-min\"><button class=\"btn btn-info\" ng-click=\"vm.search(vm.searchQuery)\"><span class=\"glyphicon glyphicon-search\"></span></button> </span><span class=\"input-group-btn width-min\" ng-if=\"vm.currentSearch\"><button class=\"btn btn-info\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-trash\"></span></button></span></div></form></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr><th><span>ID</span></th><th><span>Systemname</span></th><th><span>User</span></th><th><span>Userdate</span></th><th></th></tr></thead><tbody><tr ng-repeat=\"system in vm.systems track by system.id\"><td><a ui-sref=\"system-detail({id:system.id})\">{{system.id}}</a></td><td>{{system.systemname}}</td><td>{{system.user}}</td><td>{{system.userdate | date:\\'mediumDate\\'}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"system-detail({id:system.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"system.edit({id:system.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"system.delete({id:system.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div></div>');\n$templateCache.put('app/layouts/error/accessdenied.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-4\"><span class=\"hipster img-responsive img-rounded\"></span></div><div class=\"col-md-8\"><h1>Error Page!</h1><div class=\"alert alert-danger\">You are not authorized to access the page.</div></div></div></div>');\n$templateCache.put('app/layouts/error/error.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-4\"><span class=\"hipster img-responsive img-rounded\"></span></div><div class=\"col-md-8\"><h1>Error Page!</h1><div ng-show=\"errorMessage\"><div class=\"alert alert-danger\">{{errorMessage}}</div></div></div></div></div>');\n$templateCache.put('app/layouts/navbar/navbar.html','<nav class=\"navbar navbar-default\" role=\"navigation\"><div class=\"container\"><div class=\"navbar-header\"><button type=\"button\" class=\"navbar-toggle\" ng-click=\"vm.toggleNavbar()\"><span class=\"sr-only\">Toggle navigation</span> <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span></button> <a class=\"navbar-brand logo\" href=\"#/\" ng-click=\"vm.collapseNavbar()\"><img class=\"logo-img\" src=\"content/images/logo-jhipster.png\" alt=\"logo\"> <span>Cafvalidity_v2</span> <span class=\"navbar-version\">v{{VERSION}}</span></a></div><div class=\"navbar-collapse\" uib-collapse=\"vm.isNavbarCollapsed\" ng-switch=\"vm.isAuthenticated()\"><ul class=\"nav navbar-nav navbar-right\"><li ui-sref-active=\"active\"><a ui-sref=\"home\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-home\"></span> <span class=\"hidden-sm\">Home</span></a></li><!-- jhipster-needle-add-element-to-menu - JHipster will add new menu items here --><li ng-class=\"{active: vm.$state.includes(\\'entity\\')}\" ng-switch-when=\"true\" uib-dropdown class=\"dropdown pointer\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"entity-menu\"><span><span class=\"glyphicon glyphicon-th-list\"></span> <span class=\"hidden-sm\">Entities </span><b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><li ui-sref-active=\"active\"><a ui-sref=\"scancaf\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Scancaf</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"sourcebox\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Sourcebox</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"boxassign\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Boxassign</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"suspendedusers\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Suspendedusers</span></a></li><!--   <li ui-sref-active=\"active\">\\n                                <a ui-sref=\"adminstats\" ng-click=\"vm.collapseNavbar()\">\\n                                    <span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp;\\n                                    <span>Adminstats</span>\\n                                </a>\\n                            </li> --><li ui-sref-active=\"active\"><a ui-sref=\"system\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>System</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"mobile-validation\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Mobile Validation</span></a></li><!-- jhipster-needle-add-entity-to-menu - JHipster will add entities to the menu here --></ul></li><li ng-class=\"{active: vm.$state.includes(\\'account\\')}\" uib-dropdown class=\"dropdown pointer\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"account-menu\"><span><span class=\"glyphicon glyphicon-user\"></span> <span class=\"hidden-sm\">Account </span><b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a ui-sref=\"settings\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-wrench\"></span>&nbsp; <span>Settings</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a ui-sref=\"password\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-lock\"></span>&nbsp; <span>Password</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a href=\"\" ng-click=\"vm.logout()\" id=\"logout\"><span class=\"glyphicon glyphicon-log-out\"></span>&nbsp; <span>Sign out</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"false\"><a href=\"\" ng-click=\"vm.login()\" id=\"login\"><span class=\"glyphicon glyphicon-log-in\"></span>&nbsp; <span>Sign in</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"false\"><a ui-sref=\"register\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-plus-sign\"></span>&nbsp; <span>Register</span></a></li></ul></li><li ng-class=\"{active: vm.$state.includes(\\'admin\\')}\" ng-switch-when=\"true\" has-authority=\"ROLE_ADMIN\" uib-dropdown class=\"dropdown pointer\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"admin-menu\"><span><span class=\"glyphicon glyphicon-tower\"></span> <span class=\"hidden-sm\">Administration</span> <b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><li ui-sref-active=\"active\"><a ui-sref=\"user-management\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-user\"></span>&nbsp; <span>User management</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"jhi-metrics\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-dashboard\"></span>&nbsp; <span>Metrics</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"jhi-health\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-heart\"></span>&nbsp; <span>Health</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"jhi-configuration\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-list-alt\"></span>&nbsp; <span>Configuration</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"audits\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-bell\"></span>&nbsp; <span>Audits</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"elasticsearch-reindex\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-tasks\"></span>&nbsp; <span>Logs</span></a></li><li ng-show=\"vm.swaggerEnabled\" ui-sref-active=\"active\"><a ui-sref=\"docs\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-book\"></span>&nbsp; <span>API</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"elasticsearch-reindex\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-exclamation-sign\"></span>&nbsp; <span>Elasticsearch Reindex</span></a></li><!-- jhipster-needle-add-element-to-admin-menu - JHipster will add entities to the admin menu here --></ul></li></ul></div></div></nav>');\n$templateCache.put('app/account/reset/finish/reset.finish.html','<div><div class=\"row\"><div class=\"col-md-4 col-md-offset-4\"><h1>Reset password</h1><div class=\"alert alert-danger\" ng-show=\"vm.keyMissing\"><strong>The password reset key is missing.</strong></div><div class=\"alert alert-warning\" ng-hide=\"vm.success || vm.keyMissing\"><p>Choose a new password</p></div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><p>Your password couldn\\'t be reset. Remember a password request is only valid for 24 hours.</p></div><div class=\"alert alert-success\" ng-show=\"vm.success\"><p><strong>Your password has been reset.</strong> Please <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>.</p></div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\">The password and its confirmation do not match!</div><div ng-hide=\"vm.keyMissing\"><form ng-show=\"!vm.success\" name=\"form\" role=\"form\" novalidate ng-submit=\"vm.finishReset()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"password\">New password</label><input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"New password\" ng-model=\"vm.resetAccount.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.resetAccount.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\">New password confirmation</label><input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"Confirm the new password\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\">Your password confirmation is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\">Your password confirmation is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\">Your password confirmation cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Reset Password</button></form></div></div></div></div>');\n$templateCache.put('app/account/reset/request/reset.request.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1>Reset your password</h1><div class=\"alert alert-danger\" ng-show=\"vm.errorEmailNotExists\"><strong>Email address isn\\'t registered!</strong> Please check and try again.</div><div class=\"alert alert-warning\" ng-hide=\"vm.success\"><p>Enter the email address you used to register.</p></div><div class=\"alert alert-success\" ng-show=\"vm.success === \\'OK\\'\"><p>Check your emails for details on how to reset your password.</p></div><form ng-show=\"!vm.success\" name=\"form\" role=\"form\" novalidate ng-submit=\"vm.requestReset()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"email\">Email</label><input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"Your email\" ng-model=\"vm.resetAccount.email\" ng-minlength=\"5\" ng-maxlength=\"100\" required><div ng-show=\"form.email.$dirty && form.email.$invalid\"><p class=\"help-block\" ng-show=\"form.email.$error.required\">Your email is required.</p><p class=\"help-block\" ng-show=\"form.email.$error.email\">Your email is invalid.</p><p class=\"help-block\" ng-show=\"form.email.$error.minlength\">Your email is required to be at least 5 characters.</p><p class=\"help-block\" ng-show=\"form.email.$error.maxlength\">Your email cannot be longer than 100 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Reset</button></form></div></div></div>');}]);})();"],"sourceRoot":"/source/"}